#setwd("C:/Users/BSCHIEK.CGIARAD/Documents")
setwd("D:/OneDrive - CGIAR/Documents")
options(warn = -1); options(scipen = 999)
library(ggplot2)
library(tidyverse)
source('D:/OneDrive - CGIAR/Documents/FAOdat_createRegionGroups.R')
#source('D:/OneDrive - CGIAR/Documents/CollectiveModes.R')
#------------------------------
#Prep food balance data
df_raw <- read.csv("FoodBalanceSheets_E_All_Data.csv", stringsAsFactors = F)
df_raw <- subset(df_raw, Item.Code != 2928)
df_raw$Area.Code <- NULL
df_raw$Item.Code <- NULL
df_raw$Element.Code <-NULL
df_raw$Item <- as.character(df_raw$Item)
df_raw$Element <- as.character(df_raw$Element)
df_raw$Area <- as.character(df_raw$Area)
u <- colnames(df_raw)
df_raw <- df_raw[, -grep("F", u)]
colnames(df_raw)[5:ncol(df_raw)] <- as.character(c(1961:2013))
df_raw <- gather(df_raw,Year,Value,`1961`:`2013`)
#------------------------------
#unique(df_raw$Element)
#area_vec <- c("Kenya", "Uganda", "Ethiopia", "United Republic of Tanzania")
item_vec <- c("Cereals - Excluding Beer", "Sugar (Raw Equivalent)", "Starchy Roots",
              "Animal Products", "Pulses", "Vegetal Products", "Honey",
              "Sugar cane", "Sugar non-centrifugal", "Sweeteners, Other")
element_vec <- c("Stock Variation")
#element_vec <- c("Food supply (kcal/capita/day)")
#element_vec <- c("Protein supply quantity (g/capita/day)")
df <- subset(df_raw, Item %in% item_vec)
df <- subset(df, Element %in% element_vec)
#df_raw <- subset(df, Area %in% area_vec)

u <- df$Item
df$Item[grep("Cereals", u)] <- "Cereals"
#df$Item[grep("Fruits", u)] <- "Fruits"
df$Item[grep("Vegetal", u)] <- "Fruits/Veg."
unique(df$Item)[unique(df$Item) != "Grand Total"]
df_wide <- df %>% spread(Item, Value)
df_wide[is.na(df_wide)] <- 0
#--
df_wide$`Fruits/Veg.` <- df_wide$`Fruits/Veg.` - df_wide$Cereals - df_wide$Pulses -
  df_wide$Honey - df_wide$`Starchy Roots` - df_wide$`Sugar cane` -
  df_wide$`Sugar non-centrifugal` - df_wide$`Sweeteners, Other` - df_wide$`Sugar (Raw Equivalent)`
df_wide$Honey <- NULL
df_wide$`Sugar cane` <- NULL
df_wide$`Sugar non-centrifugal` <- NULL
df_wide$`Sweeteners, Other` <- NULL
df_wide$Unit <- NULL
ind <- which(colnames(df_wide) == "Sugar (Raw Equivalent)")
colnames(df_wide)[ind] <- "Sugar"
#--
gathercols <- colnames(df_wide)[4:ncol(df_wide)]
df <- df_wide %>% gather_("Item", "Value", gathercols)

if(element_vec == "Protein supply quantity (g/capita/day)"){
  df$Value <- df$Value * 4 # convert g to kcal
}

exclude_these <- c("Ethiopia PDR", "Brunei Darussalam", "China, Hong Kong SAR",
                   "China, Macao SAR", "China, Taiwan Province of")
df <- FAOdat_createRegionGroups(df, exclude_these, keep_FAOregions = F,
                            df_is_trade_matrix = F,
                            consolidate_LAC = T,
                            consolidate_WEur = T,
                            consolidate_AusNZPacIslands = T,
                            consolidate_SSA = T)

unique(df$Region)
unique(df$Area[df$Region == "Eastern Africa"])
df <- subset(df, Region != "Central Asia")
df$Region[which(df$Region == "Western Asia")] <- "Middle East"
  
  
df$Area <- NULL
df$Element <- NULL
df <- as.data.frame(df %>% group_by(Region, Year, Item) %>% summarise(Value = sum(Value)))
df$Region_item <- paste(df$Region, df$Item)
Item_vec <- df$Item
Region_vec <- df$Region
this_df <- df
this_df$Item <- NULL
this_df$Region <- NULL
df_wide <- this_df %>% spread(Region_item, Value)
year_vec <- df_wide$Year[-1]
df_wide$Year <- NULL
RegionItem_vec <- colnames(df_wide)

if(element_vec == "Stock Variation"){
  in_mat <- as.matrix(df_wide)
}else{
  mat_diff <- diff(as.matrix(df_wide))
  in_mat <- mat_diff
  
  }

cormat <- cor(in_mat)
image(cormat)
max_graph <- 12
e <- eigen(cormat)
eig_vectors <- e$vectors


lam_cor <- e$values
lamcor_max <- max(lam_cor)
N_t <- nrow(in_mat)
N_c <- ncol(in_mat)
Q <- N_t / N_c
s_sq <- 1 - lamcor_max / N_c
#s_sq <- 1
lamrand_max <- s_sq * (1 + 1 / Q + 2 / sqrt(Q))
lamrand_min <- s_sq * (1 + 1 / Q - 2 / sqrt(Q))
lam <- seq(lamrand_min, lamrand_max, 0.001)
dens_rand <- Q / (2 * pi * s_sq) * sqrt((lamrand_max - lam) * (lam - lamrand_min)) / lam
df_e <- data.frame(values = lam_cor)
#--
gg <- ggplot() +
  geom_density(data = df_e, aes(x = values, color = "Correlation Matrix")) +
  #geom_histogram(data = df_e, aes(x = values), alpha = 0.2) +
  geom_line(data = data.frame(x = lam, y = dens_rand), aes(x = x, y = y, color = "Random matrix")) +
  coord_cartesian(xlim = c(0, ceiling(lamcor_max))) +
  scale_colour_manual(name = "Eigenvalue density", 
                      values = c(`Correlation Matrix` = "blue", `Random matrix` = "orange"))
gg
#-----------------------------
# How many collective modes?
ind_deviating_from_noise <- which(lam_cor > lamrand_max)
collModes <- as.matrix(eig_vectors[, ind_deviating_from_noise])

noiseModes <- as.matrix(eig_vectors[, -ind_deviating_from_noise])
n_collModes <- ncol(collModes)
#-----------------------------
# Set sign of eigenvectors such that they
# best conform to the input time series
Modes <- in_mat %*% collModes
ts_avg <- in_mat %*% rep(1, N_c) * 1 / N_c
for(i in 1:n_collModes){
  sse <- sum((Modes[, i] - ts_avg)^2)
  sse_neg <- sum((-Modes[, i] - ts_avg)^2)
  sse_vec <- c(sse, sse_neg)
  if(which(sse_vec == min(sse_vec)) == 2){
    collModes[, i] <- -collModes[, i]
  }
}
#-----------------------------
n_collModes_really <- n_collModes
n_collModes_to_graph <- n_collModes
collModes_really <- collModes
print(paste("Number of collective modes: ", n_collModes))
if(ncol(collModes) > max_graph){
  collModes <- collModes[, 1:max_graph]
  n_collModes_to_graph <- max_graph
}


# library(mclust)
# library(FactoMineR)
# library(factoextra)
# # Model-based-clustering (takes a little bit -- Correctly chooses 9 as optimal number of clusters!)
# class(eig_vectors)
# mc <- Mclust(t(as.matrix(df_wide)))
# # Print a summary
# summary(mc)
# fviz_cluster(mc, frame.type = "norm", geom = "point")


# res <- PCA(df_wide)
# fviz_pca_biplot(res)

df_plot <- data.frame(eig_vectors[, 1:n_collModes])
df_plot$Region_Item <- RegionItem_vec


Item_vec <- gsub("(Cereals|Pulses|Starchy Roots|Fruits/Veg.|Animal Products|Sugar)(*SKIP)(*FAIL)|.", "", RegionItem_vec, perl = T)
Region_vec <- gsub("(Cereals|Pulses|Starchy Roots|Fruits/Veg.|Animal Products|Sugar)", "", RegionItem_vec, perl = T)
Region_vec <- str_trim(Region_vec)
df_plot$Item <- as.factor(Item_vec)
xx <- df_plot$Item
df_plot$Region_Item <- factor(df_plot$Region_Item, levels = unique(df_plot$Region_Item[order(xx)]))
# df_plot$Region <- as.factor(Region_vec)
# xx <- df_plot$Region
# df_plot$Region_Item <- factor(df_plot$Region_Item, levels = unique(df_plot$Region_Item[order(xx)]))
colnames(df_plot)[1:n_collModes] <- paste("Contribution", 1:n_collModes)
gathercols <- colnames(df_plot)[1:n_collModes]
df_plot <- df_plot %>% gather_("Contribution", "Value", gathercols)
df_plot$Value <- df_plot$Value^2
gg <- ggplot(df_plot, aes(x = Region_Item, y = Value, fill = Region))
#gg <- ggplot(df_plot, aes(x = Region_Item, y = Value, fill = Item))
gg <- gg + geom_bar(stat = "identity", position = "dodge")
gg <- gg + facet_wrap(~ Contribution, ncol = 1)
#gg <- gg + theme_economist()
gg <- gg + theme(axis.text.x = element_text(angle = 60, hjust = 1),
                 axis.title.x = element_blank(),
                 panel.spacing = unit(1.5, "lines"))
gg



#==============================================
#==============================================
African_Regions <- c("Eastern Africa", "Western Africa", "Middle Africa", "Southern Africa", "Northern Africa")
this_df <- subset(df, Region %in% c(African_Regions, "Southern Asia", "Middle East"))
#unique(df$Region)
this_df$Item <- NULL
this_df$Region <- NULL
df_wide <- this_df %>% spread(Region_item, Value)
year_vec <- df_wide$Year[-1]
df_wide$Year <- NULL
RegionItem_vec <- colnames(df_wide)
if(element_vec == "Stock Variation"){
  in_mat <- as.matrix(df_wide)
}else{
  mat_diff <- diff(as.matrix(df_wide))
  in_mat <- mat_diff
  
}

cormat <- cor(in_mat)
image(cormat)
max_graph <- 12
e <- eigen(cormat)
eig_vectors <- e$vectors


lam_cor <- e$values
lamcor_max <- max(lam_cor)
N_t <- nrow(in_mat)
N_c <- ncol(in_mat)
Q <- N_t / N_c
s_sq <- 1 - lamcor_max / N_c
#s_sq <- 1
lamrand_max <- s_sq * (1 + 1 / Q + 2 / sqrt(Q))
lamrand_min <- s_sq * (1 + 1 / Q - 2 / sqrt(Q))
lam <- seq(lamrand_min, lamrand_max, 0.001)
dens_rand <- Q / (2 * pi * s_sq) * sqrt((lamrand_max - lam) * (lam - lamrand_min)) / lam
df_e <- data.frame(values = lam_cor)
#--
gg <- ggplot() +
  geom_density(data = df_e, aes(x = values, color = "Correlation Matrix")) +
  #geom_histogram(data = df_e, aes(x = values), alpha = 0.2) +
  geom_line(data = data.frame(x = lam, y = dens_rand), aes(x = x, y = y, color = "Random matrix")) +
  coord_cartesian(xlim = c(0, ceiling(lamcor_max))) +
  scale_colour_manual(name = "Eigenvalue density", 
                      values = c(`Correlation Matrix` = "blue", `Random matrix` = "orange"))
gg
#-----------------------------
# How many collective modes?
ind_deviating_from_noise <- which(lam_cor > lamrand_max)
collModes <- as.matrix(eig_vectors[, ind_deviating_from_noise])

noiseModes <- as.matrix(eig_vectors[, -ind_deviating_from_noise])
n_collModes <- ncol(collModes)
#-----------------------------
# Set sign of eigenvectors such that they
# best conform to the input time series
Modes <- in_mat %*% collModes
ts_avg <- in_mat %*% rep(1, N_c) * 1 / N_c
for(i in 1:n_collModes){
  sse <- sum((Modes[, i] - ts_avg)^2)
  sse_neg <- sum((-Modes[, i] - ts_avg)^2)
  sse_vec <- c(sse, sse_neg)
  if(which(sse_vec == min(sse_vec)) == 2){
    collModes[, i] <- -collModes[, i]
  }
}
#-----------------------------
n_collModes_really <- n_collModes
n_collModes_to_graph <- n_collModes
collModes_really <- collModes
print(paste("Number of collective modes: ", n_collModes))
if(ncol(collModes) > max_graph){
  collModes <- collModes[, 1:max_graph]
  n_collModes_to_graph <- max_graph
}


# library(mclust)
# library(FactoMineR)
# library(factoextra)
# # Model-based-clustering (takes a little bit -- Correctly chooses 9 as optimal number of clusters!)
# class(eig_vectors)
# mc <- Mclust(t(as.matrix(df_wide)))
# # Print a summary
# summary(mc)
# fviz_cluster(mc, frame.type = "norm", geom = "point")


# res <- PCA(df_wide)
# fviz_pca_biplot(res)

df_plot <- data.frame(eig_vectors[, 1:n_collModes])
df_plot$Region_Item <- RegionItem_vec


Item_vec <- gsub("(Cereals|Pulses|Starchy Roots|Fruits/Veg.|Animal Products|Sugar)(*SKIP)(*FAIL)|.", "", RegionItem_vec, perl = T)
Region_vec <- gsub("(Cereals|Pulses|Starchy Roots|Fruits/Veg.|Animal Products|Sugar)", "", RegionItem_vec, perl = T)
Region_vec <- str_trim(Region_vec)
# df_plot$Item <- as.factor(Item_vec)
# xx <- df_plot$Item
# df_plot$Region_Item <- factor(df_plot$Region_Item, levels = unique(df_plot$Region_Item[order(xx)]))
df_plot$Region <- as.factor(Region_vec)
xx <- df_plot$Region
df_plot$Region_Item <- factor(df_plot$Region_Item, levels = unique(df_plot$Region_Item[order(xx)]))
colnames(df_plot)[1:n_collModes] <- paste("Contribution", 1:n_collModes)
gathercols <- colnames(df_plot)[1:n_collModes]
df_plot <- df_plot %>% gather_("Contribution", "Value", gathercols)
#df_plot$Value <- df_plot$Value^2
gg <- ggplot(df_plot, aes(x = Region_Item, y = Value, fill = Region))
gg <- gg + geom_bar(stat = "identity", position = "dodge")
gg <- gg + facet_wrap(~ Contribution, ncol = 1)
#gg <- gg + theme_economist()
gg <- gg + theme(axis.text.x = element_text(angle = 60, hjust = 1),
                 axis.title.x = element_blank(),
                 panel.spacing = unit(1.5, "lines"))
gg




#=======================================================
#=======================================================
#=======================================================
#=======================================================
#=======================================================
#=======================================================
# library(stats)
# library(plyr)
# library(tidyverse)
# library(ggplot2)
# library(ggrepel)
# library(TSA)
setwd("D:/OneDrive - CGIAR/Documents")
options(warn = -1); options(scipen = 999)
library(ggplot2)
library(tidyverse)
library(zoo)

ExportData_raw <- read.csv("Trade_Crops_Livestock_E_All_Data.csv", stringsAsFactors = F)
ExportData_raw <- subset(ExportData_raw, Item.Code != 2928)
ExportData_raw$Area.Code <- NULL
ExportData_raw$Element.Code <-NULL
ExportData_raw$Item <- as.character(ExportData_raw$Item)
ExportData_raw$Element <- as.character(ExportData_raw$Element)
ExportData_raw$Area <- as.character(ExportData_raw$Area)
u <- colnames(ExportData_raw)
ExportData_raw <- ExportData_raw[, -grep("F", u)]
yr_cols <- 6:ncol(ExportData_raw)
colnames(ExportData_raw)[yr_cols] <- gsub("Y", "", as.character(colnames(ExportData_raw)[yr_cols]))
gathercols <- colnames(ExportData_raw)[yr_cols]
ExportData_raw <- ExportData_raw %>% gather_("Year", "Value", gathercols)
rm(u)
colnames(ExportData_raw)
unique(ExportData_raw$Element)
ExportData_raw <- subset(ExportData_raw, Element %in% c("Export Quantity", "Export Value"))
ExportData_raw$Item.Code <- NULL
ExportData_raw$Unit <- NULL
#--
# subregion_vec <- c("Eastern Africa",
#                    "Middle Africa",
#                    "Northern Africa",
#                    "Southern Africa",
#                    "Western Africa",
#                    "Northern America",
#                    "Central America",
#                    "Caribbean",
#                    "South America",
#                    "Eastern Asia",
#                    "Central Asia",
#                    "Southern Asia",
#                    "South-Eastern Asia",
#                    "Western Asia",
#                    "Eastern Europe",
#                    "Northern Europe",
#                    "Southern Europe",
#                    "Western Europe",
#                    "Australia & New Zealand")#,
#                    #"World")

African_Regions <- c("Eastern Africa", "Western Africa", "Middle Africa", "Southern Africa", "Northern Africa")
Asian_Regions <- c("Eastern Asia", "Southern Asia", "South-Eastern Asia", "Western Asia")
Eur_Regions <- c("Eastern Europe", "Northern Europe", "Southern Europe", "Western Europe")
subregion_vec <- c(African_Regions, Asian_Regions, Eur_Regions)

cerealPrimary_vec <- c("Maize", "Wheat", "Barley", "Rice", "Millet", "Rye", "Sorghum")
#cerealPrimary_vec <- c("Maize", "Wheat", "Barley", "Rice", "Millet", "Sorghum")
#cerealSecondary_vec <- c("Flour, maize", "Flour, wheat", "Cake, maize")
cerealSecondary_vec <- c("Flour, maize", "Flour, wheat", "Bran, maize",
                         "Bran, sorghum", "Bran, wheat", "Bran, millet", "Bran, buckwheat",
                         "Cake, rice bran", "Oil, rice bran", "Cake, maize")
#pulses_vec <- c("Pulses", "Flour, pulses") #c("Flour, pulses", "Lentils", "Beans, dry")
pulses_vec <- c("Beans, dry", "Broad beans, horse beans, dry", "Bambara beans", "Lentils",
                "Flour, pulses", "Peas, dry", "Chick peas", "Vetches")
meat_vec <- c("Meat, goat", "Meat, pork", "Bovine Meat", "Poultry Meat")


# RnTPrimary_vec <- c("Sweet potatoes", "Cassava Equivalent", "Potatoes")
# RnTSecondary_vec <- c("Starch, cassava", "Cassava dried", "Flour, potatoes")
# fruits_vec <- c("Oranges+Tang+Clem", "Tomatoes", "Plantains and others", "Mangoes, mangosteens, guavas", "Bananas")
# OilPrimary_vec <- c("Soybeans", "Cottonseed", "Linseed", "Coconuts", "Groundnuts, shelled")
# OilSecondary_vec <- c("Oil, soybean", "Oil, palm", "Oil, maize", "Oil, coconut (copra)", "Olive Oil,Total",
#                       "Oil, groundnut")
# SugarcropsPrimary_vec <- c("Sugar beet", "Sugar Raw Centrifugal")
# SugarcropsSecondary_vec <- c("Beet pulp")
# teaCoffeeCacao <- c("Tea", "Cocoa, butter", "Cocoa, paste", "Cocoa, beans", "Coffee, roasted", "Coffee, green")
# textileIndustrial <- c("Cotton lint", "Wool, greasy", "Wool, degreased", "Rubber, natural", "Cotton, carded, combed", "Silk raw")

unique(ExportData_raw$Item)[grep("cereal", unique(ExportData_raw$Item), ignore.case = T)]
unique(ExportData_raw$Item)[grep("sugar", unique(ExportData_raw$Item), ignore.case = T)]
unique(ExportData_raw$Item)[grep("root", unique(ExportData_raw$Item), ignore.case = T)]
unique(ExportData_raw$Item)[grep("Meat", unique(ExportData_raw$Item), ignore.case = T)]
unique(ExportData_raw$Item)[grep("Vegetable", unique(ExportData_raw$Item), ignore.case = T)]
unique(ExportData_raw$Item)[grep("pulse", unique(ExportData_raw$Item), ignore.case = T)]
unique(ExportData_raw$Item)[grep("frozen", unique(ExportData_raw$Item), ignore.case = T)]
unique(ExportData_raw$Item)[grep("oil", unique(ExportData_raw$Item), ignore.case = T)]


#---
cereal_vec <- c(cerealPrimary_vec, cerealSecondary_vec)
# RnT_vec <- c(RnTPrimary_vec, RnTSecondary_vec)
# oil_vec <- c(OilPrimary_vec, OilSecondary_vec)
# sugar_vec <- c(SugarcropsPrimary_vec, SugarcropsSecondary_vec)
#---
# item_vec <- c(cereal_vec, RnT_vec, oil_vec, fruits_vec, pulses_vec,
#               sugar_vec, teaCoffeeCacao, textileIndustrial)
item_vec <- c(cereal_vec, pulses_vec, meat_vec)
#item_vec <- c(pulses_vec, "Total Meat")
#---

df_raw <- ExportData_raw
df_raw <- subset(df_raw, Item %in% item_vec)
df_raw <- subset(df_raw, Area %in% subregion_vec)

# u <- df_raw$Item
# df_raw$Group <- NA
# df_raw$Group[which(u %in% pulses_vec)] <- "Pulses"
# df_raw$Group[which(u %in% cereal_vec)] <- "Cereals"
# df_raw$Group[which(u == "Total Meat")] <- "Meat"
# unique(df_raw$Group)
# #df_raw$Item[grep("Fruit and Vegetables", u)] <- "Fruits/Veg."
# df_raw$Item[which(u %in% pulses_vec)] <- "Pulses"
# df_raw$Item[which(u %in% cereal_vec)] <- "Cereals"
# df_raw$Item[which(u %in% fruits_vec)] <- "Fruits"
# df_raw$Item[which(u %in% oil_vec)] <- "Oilseeds/Oils"
# df_raw$Item[which(u %in% sugar_vec)] <- "Sugar"
# #df_raw$Item[grep("Meat", u)] <- "Meat and Preps."
# df_raw$Item[which(u %in% RnT_vec)] <- "RnT"
# df_raw$Item[which(u %in% teaCoffeeCacao)] <- "TeaCoffCacao"
# df_raw$Item[which(u %in% textileIndustrial)] <- "TextIndust"
# unique(df_raw$Item)
# df_raw <- df_raw %>% group_by(Area, Year, Element, Item) %>% summarize(Value = sum(Value, na.rm = T))
#--
# exclude_these <- c("Ethiopia PDR", "Brunei Darussalam", "China, Hong Kong SAR",
#                    "China, Macao SAR", "China, Taiwan Province of")
# df_raw <- FAOdat_createRegionGroups(df_raw, exclude_these, keep_FAOregions = F,
#                                 df_is_trade_matrix = F,
#                                 consolidate_LAC = T,
#                                 consolidate_WEur = T,
#                                 consolidate_AusNZPacIslands = T,
#                                 consolidate_SSA = T)
# unique(df_raw$Region)
# df_raw <- subset(df_raw, Region != "Central Asia")
# df_raw$Region[which(df_raw$Region == "Western Asia")] <- "Middle East"
#--
#unique(df_raw$Area)
df_raw$Area[which(df_raw$Area == "Western Asia")] <- "Middle East"
df_raw <- subset(df_raw, Area != "Central Asia")
#df <- df_raw
#--
# Consolidate regions
LAC <- c("Central America", "Caribbean", "South America")
u <- df_raw$Area
df_raw$Area[which(u %in% LAC)] <- "LAC"
Europe_WNS <- c("Southern Europe", "Western Europe", "Northern Europe")
u <- df_raw$Area
df_raw$Area[which(u %in% Europe_WNS)] <- "W/N/S Europe"
# SSA <- c("Eastern Africa", "Southern Africa", "Western Africa", "Middle Africa")
# u <- df_raw$Area
# df_raw_raw$Area[which(u %in% SSA)] <- "SSA"
# Abbreviate
u <- df_raw$Area
df_raw$Area[which(u == "Australia & New Zealand")] <- "AUS/NZ"
u <- df_raw$Area
df_raw$Area <- gsub("South-Eastern", "SE", u)
u <- df_raw$Area
df_raw$Area <- gsub("Eastern", "E", u)
u <- df_raw$Area
df_raw$Area <- gsub("Western", "W", u)
u <- df_raw$Area
df_raw$Area <- gsub("Southern", "S", u)
u <- df_raw$Area
df_raw$Area <- gsub("Northern", "N", u)
unique(df_raw$Area)
rm(u)
df_raw <- df_raw %>% group_by(Year, Element, Item, Area) %>% summarise(Value = sum(Value, na.rm = T))
#--
df_raw <- as.data.frame(df_raw)
df_raw <- df_raw %>% spread(Element, Value)
class(df_raw)
#df_raw <- as.data.frame(df_raw)
df_raw$Price <- df_raw$`Export Value` / df_raw$`Export Quantity`
df_raw$`Export Value` <- NULL
df_raw$`Export Quantity` <- NULL
df_raw$Price[which(is.nan(df_raw$Price))] <- NA
df_raw$Price[which(is.infinite(df_raw$Price))] <- NA
#---------------------------------
unique(df_raw$Area)
df_raw$Region <- NA
u <- df_raw$Area
df_raw$Region[grep("Europe", u)] <- "Europe"
df_raw$Region[grep("Asia|Middle East", u)] <- "Asia"
df_raw$Region[grep("Africa", u)] <- "Africa"
#which(is.na(df_raw$Region))
unique(df_raw$Item)
df_raw$Group <- NA
u <- df_raw$Item
df_raw$Group[which(u %in% cerealPrimary_vec)] <- "Raw Cereals"
df_raw$Group[which(u %in% cerealSecondary_vec)] <- "Proc'd Cereals"
df_raw$Group[which(u %in% pulses_vec)] <- "Pulses"
df_raw$Group[which(u %in% meat_vec)] <- "Meats"
#which(is.na(df_raw$Group))
df_raw$Year <- as.integer(df_raw$Year)
df_plot <- df_raw
#df_plot <- subset(df_raw, Area == "E Africa")
gg <- ggplot(df_plot, aes(x = Year, y = Price, group = Item, color = Item))
gg <- gg + geom_line()
gg <- gg + facet_grid(Area ~ Group, scales = "free")
gg
#---------------------------------
df <- df_raw
df$Region_Item <- paste(df$Area, df$Item)
Item_vec <- df$Item
Region_vec <- df$Area
unique(Item_vec)
unique(Region_vec)
df$Item <- NULL
df$Area <- NULL
df$Region <- NULL
df$Group <- NULL
df <- as.data.frame(df)
df <- df %>% spread(Region_Item, Price)
df$Year <- NULL
out <- apply(df, 2, function(x) length(which(is.na(x))))
table(out)
ind_rm <- which(as.numeric(out) > 10)
length(ind_rm)
df <- df[, -ind_rm]
ncol(df)
ind_rp <- which(is.na(df[1, ]))
for(i in 1:length(ind_rp)){
  df[1, ind_rp[i]] <- mean(df[, ind_rp[i]], na.rm = T)
}
ind_rp <- which(is.na(df[nrow(df), ]))
for(i in 1:length(ind_rp)){
  df[nrow(df), ind_rp[i]] <- mean(df[, ind_rp[i]], na.rm = T)
}

df <- as.data.frame(na.approx(df))
class(df)
out <- apply(df, 2, function(x) length(which(is.na(x))))
table(out)
which(as.numeric(out) > 0)
colnames(df)[which(as.numeric(out) > 0)]


u <- colnames(df)

commodGroup_vec <- rep(NA, length(u))
commodGroup_vec[grep(paste(cerealPrimary_vec, collapse = "|"), u)] <- "Raw Cereals"
commodGroup_vec[grep(paste(cerealSecondary_vec, collapse = "|"), u)] <- "Proc'd Cereals"
commodGroup_vec[grep(paste(pulses_vec, collapse = "|"), u)] <- "Pulses"
commodGroup_vec[grep(paste(meat_vec, collapse = "|"), u)] <- "Meats"
which(is.na(commodGroup_vec))

region_vec <- rep(NA, length(u))
regions <- unique(Region_vec)
for(i in 1:length(regions)){
  region_vec[grep(regions[i], u)] <- regions[i]
}
which(is.na(region_vec))



mat_diff <- diff(as.matrix(df))
in_mat <- mat_diff

cormat <- cor(in_mat)
image(cormat)
max_graph <- 12
e <- eigen(cormat)
eig_vectors <- e$vectors


lam_cor <- e$values
lamcor_max <- max(lam_cor)
N_t <- nrow(in_mat)
N_c <- ncol(in_mat)
Q <- N_t / N_c
s_sq <- 1 - lamcor_max / N_c
#s_sq <- 1
lamrand_max <- s_sq * (1 + 1 / Q + 2 / sqrt(Q))
lamrand_min <- s_sq * (1 + 1 / Q - 2 / sqrt(Q))
lam <- seq(lamrand_min, lamrand_max, 0.001)
dens_rand <- Q / (2 * pi * s_sq) * sqrt((lamrand_max - lam) * (lam - lamrand_min)) / lam
df_e <- data.frame(values = lam_cor)
#--
gg <- ggplot() +
  geom_density(data = df_e, aes(x = values, color = "Correlation Matrix")) +
  #geom_histogram(data = df_e, aes(x = values), alpha = 0.2) +
  geom_line(data = data.frame(x = lam, y = dens_rand), aes(x = x, y = y, color = "Random matrix")) +
  coord_cartesian(xlim = c(0, ceiling(lamcor_max))) +
  scale_colour_manual(name = "Eigenvalue density", 
                      values = c(`Correlation Matrix` = "blue", `Random matrix` = "orange"))
gg
#-----------------------------
# How many collective modes?
ind_deviating_from_noise <- which(lam_cor > lamrand_max)
collModes <- as.matrix(eig_vectors[, ind_deviating_from_noise])

noiseModes <- as.matrix(eig_vectors[, -ind_deviating_from_noise])
n_collModes <- ncol(collModes)
#-----------------------------
# Set sign of eigenvectors such that they
# best conform to the input time series
Modes <- in_mat %*% collModes
ts_avg <- in_mat %*% rep(1, N_c) * 1 / N_c
for(i in 1:n_collModes){
  sse <- sum((Modes[, i] - ts_avg)^2)
  sse_neg <- sum((-Modes[, i] - ts_avg)^2)
  sse_vec <- c(sse, sse_neg)
  if(which(sse_vec == min(sse_vec)) == 2){
    collModes[, i] <- -collModes[, i]
  }
}
#-----------------------------
n_collModes_really <- n_collModes
n_collModes_to_graph <- n_collModes
collModes_really <- collModes
print(paste("Number of collective modes: ", n_collModes))
if(ncol(collModes) > max_graph){
  collModes <- collModes[, 1:max_graph]
  n_collModes_to_graph <- max_graph
}


# library(mclust)
# library(FactoMineR)
# library(factoextra)
# class(eig_vectors)
# mc <- Mclust(t(as.matrix(df)))
# # Print a summary
# summary(mc)
# fviz_cluster(mc, frame.type = "norm", geom = "point")
# length(mc$classification)
# nrow(eig_vectors)
# res <- PCA(t(as.matrix(df)))
# fviz_pca_biplot(res)

RegionItem_vec <- colnames(df)

df_plot <- data.frame(eig_vectors[, 1:n_collModes])
df_plot$Region_Item <- RegionItem_vec

#unique(Item_vec)

# Item_vec <- gsub("[item_vec](*SKIP)(*FAIL)|.", "", RegionItem_vec, perl = T)
# Region_vec <- gsub("(Cereals|Pulses|Total Meat)", "", RegionItem_vec, perl = T)
# Region_vec <- str_trim(Region_vec)

# df_plot$Group <- as.factor(mc$classification)
# xx <- df_plot$Group
# df_plot$Region_Item <- factor(df_plot$Region_Item, levels = unique(df_plot$Region_Item[order(xx)]))

df_plot$Group <- as.factor(group_vec)
xx <- df_plot$Group
df_plot$Region_Item <- factor(df_plot$Region_Item, levels = unique(df_plot$Region_Item[order(xx)]))
# df_plot$Region <- as.factor(Region_vec)
# xx <- df_plot$Region
# df_plot$Region_Item <- factor(df_plot$Region_Item, levels = unique(df_plot$Region_Item[order(xx)]))
colnames(df_plot)[1:n_collModes] <- paste("Contribution", 1:n_collModes)
gathercols <- colnames(df_plot)[1:n_collModes]
df_plot <- df_plot %>% gather_("Contribution", "Value", gathercols)
df_plot$Value <- df_plot$Value^2
#gg <- ggplot(df_plot, aes(x = Region_Item, y = Value, fill = Region))
gg <- ggplot(df_plot, aes(x = Region_Item, y = Value, fill = Group))
gg <- gg + geom_bar(stat = "identity", position = "dodge")
gg <- gg + facet_wrap(~ Contribution, ncol = 1)
#gg <- gg + theme_economist()
gg <- gg + theme(axis.text.x = element_text(angle = 60, hjust = 1),
                 axis.title.x = element_blank(),
                 panel.spacing = unit(1.5, "lines"))
gg
































