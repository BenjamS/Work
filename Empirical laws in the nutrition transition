library(tidyverse)
library(gganimate)
#==========================================================================
#==========================================================================
FAOdat_createRegionGroups <- function(df_raw, exclude_these, keep_FAOregions = F,
                                      df_is_trade_matrix = F,
                                      consolidate_LAC = T,
                                      consolidate_WEur = T,
                                      consolidate_AusNZPacIslands = T,
                                      consolidate_SSA = T,
                                      output_countryVecs = F)
{
  #=================================
  #--Africa
  countries_NAfrica <- as.character(unique(read.csv("Country list - Northern Africa.csv")[,"Area"]))
  countries_MAfrica <- as.character(unique(read.csv("Country list - Middle Africa.csv")[,"Area"]))
  countries_WAfrica <- as.character(unique(read.csv("Country list - Western Africa.csv")[,"Area"]))
  countries_EAfrica <- as.character(unique(read.csv("Country list - Eastern Africa.csv")[,"Area"]))
  countries_SAfrica <- as.character(unique(read.csv("Country list - Southern Africa.csv")[,"Area"]))
  #--Americas
  countries_SAmer <- as.character(unique(read.csv("Country list - South America.csv")[,"Area"]))
  countries_CAmer <- as.character(unique(read.csv("Country list - Central America.csv")[,"Area"]))
  countries_Carib <- as.character(unique(read.csv("Country list - Caribbean.csv")[,"Area"]))
  countries_NAmer <- as.character(unique(read.csv("Country list - Northern America.csv")[,"Country"]))
  #--Asia
  countries_EAsia <- as.character(unique(read.csv("Country list - Eastern Asia.csv")[,"Area"]))
  #countries_EAsia <- countries_EAsia[!(countries_EAsia %in% c("China, Hong Kong SAR", "China, Macao SAR"))]
  countries_SEAsia <- as.character(unique(read.csv("Country list - South-Eastern Asia.csv")[,"Area"]))
  countries_SAsia <- as.character(unique(read.csv("Country list - Southern Asia.csv")[,"Area"]))
  countries_WAsia <- as.character(unique(read.csv("Country list - Western Asia.csv")[,"Area"]))
  countries_CAsia <- as.character(unique(read.csv("Country list - Central Asia.csv")[,"Area"]))
  #--Europe
  countries_NEurope <- as.character(unique(read.csv("Country list - Northern Europe.csv")[,"Area"]))
  countries_WEurope <- as.character(unique(read.csv("Country list - Western Europe.csv")[,"Area"]))
  countries_EEurope <- as.character(unique(read.csv("Country list - Eastern Europe.csv")[,"Area"]))
  countries_SEurope <- as.character(unique(read.csv("Country list - Southern Europe.csv")[,"Area"]))
  #--Oceania
  countries_Oceania <- as.character(unique(read.csv("Country list - Oceania.csv")[,"Area"]))
  countries_AusNZea <- c("Australia", "New Zealand")
  countries_PacifIs <- setdiff(countries_Oceania, countries_AusNZea)
  #=================================
  #--Create region groupings
  if(df_is_trade_matrix){
    u <- df_raw$Partner.Countries
  }else{
    u <- df_raw$Area
  }
  df_raw$Region <- NA
  df_raw$Region[which(u %in% countries_NAmer)] <- "North America"
  df_raw$Region[which(u %in% countries_SAmer)] <- "South America"
  df_raw$Region[which(u %in% countries_CAmer)] <- "Central America"
  df_raw$Region[which(u %in% countries_Carib)] <- "Caribbean"
  df_raw$Region[which(u %in% countries_NAfrica)] <- "Northern Africa"
  df_raw$Region[which(u %in% countries_SAfrica)] <- "Southern Africa"
  df_raw$Region[which(u %in% countries_WAfrica)] <- "Western Africa"
  df_raw$Region[which(u %in% countries_EAfrica)] <- "Eastern Africa"
  df_raw$Region[which(u %in% countries_MAfrica)] <- "Middle Africa"
  df_raw$Region[which(u %in% countries_CAsia)] <- "Central Asia"
  df_raw$Region[which(u %in% countries_WAsia)] <- "Western Asia"
  df_raw$Region[which(u %in% countries_SAsia)] <- "Southern Asia"
  df_raw$Region[which(u %in% countries_EAsia)] <- "Eastern Asia"
  df_raw$Region[which(u %in% countries_SEAsia)] <- "South-Eastern Asia"
  df_raw$Region[which(u %in% countries_NEurope)] <- "Northern Europe"
  df_raw$Region[which(u %in% countries_SEurope)] <- "Southern Europe"
  df_raw$Region[which(u %in% countries_WEurope)] <- "Western Europe"
  df_raw$Region[which(u %in% countries_EEurope)] <- "Eastern Europe"
  df_raw$Region[which(u %in% countries_PacifIs)] <- "Pacific Islands"
  df_raw$Region[which(u %in% countries_AusNZea)] <- "Australia & New Zealand"
  rm(u)
  #--------------------
  #--See what countries escaped designation
  #unique(df_raw$Area[which(is.na(df_raw$Region))])
  #--Assign these to their proper regions
  #(Leave out "China" as it is already covered under "China, mainlaind", "Hong Kong", etc.)
  if(df_is_trade_matrix){
    u <- df_raw$Partner.Countries
  }else{
    u <- df_raw$Area
  }
  df_raw$Region[which(u %in% c("Åland Islands", "Isle of Man", "Greenland"))] <- "Northern Europe"
  df_raw$Region[which(u %in% c("Anguilla", "Bermuda", "Cayman Islands", "Curaçao"))] <- "Caribbean"
  df_raw$Region[which(u %in% c("Côte d'Ivoire"))] <- "Western Africa"
  df_raw$Region[which(u %in% c("Palau"))] <- "Pacific Islands"
  df_raw$Region[which(u %in% c("Maldives", "Réunion"))] <- "Southern Asia"
  df_raw$Region[which(u %in% c("French Guiana"))] <- "South America"
  rm(u)
  #===========================
  #unique(df_raw$Area[which(is.na(df_raw$Region) == T)])
  if(!(df_is_trade_matrix)){
    ind_NA <- which(is.na(df_raw$Region) == T)
    ind_noNA <- which(is.na(df_raw$Region) == F)
    if(keep_FAOregions == F){
      df_raw <- df_raw[ind_noNA,]
    }else{
      df_raw$Region[ind_NA] <- df_raw$Area[ind_NA] 
    }
  }
  #===========================
  #--
  if(df_is_trade_matrix){
    df_raw <- subset(df_raw, !(Partner.Countries %in% exclude_these))
  }else{
    df_raw <- subset(df_raw, !(Area %in% exclude_these))
  }
  #--
  if(consolidate_LAC){
    LAC <- c("Central America", "Caribbean", "South America")
    u <- df_raw$Region
    df_raw$Region[which(u %in% LAC)] <- "LAC"
    rm(u)
  }
  if(consolidate_WEur){
    Europe_WNS <- c("Southern Europe", "Western Europe", "Northern Europe")
    u <- df_raw$Region
    df_raw$Region[which(u %in% Europe_WNS)] <- "W/N/S Europe"
    rm(u)
  }
  if(consolidate_AusNZPacIslands){
    AusNZPacIslands <- c("Australia & New Zealand", "Pacific Islands")
    u <- df_raw$Region
    df_raw$Region[which(u %in% AusNZPacIslands)] <- "Aus/NZ/Oceania"
    rm(u)
  }
  if(consolidate_SSA){
    SSA <- c("Eastern Africa", "Southern Africa", "Western Africa", "Middle Africa")
    u <- df_raw$Region
    df_raw$Region[which(u %in% SSA)] <- "Sub-Saharan Africa"
    rm(u)
  }
  
  # Europe_E <- "Eastern Europe"
  # ESE_Asia <- c("South-Eastern Asia", "Eastern Asia")
  #--
  # u <- df_raw$Region
  # df_raw$Region[which(u %in% LAC)] <- "LAC"
  # df_raw$Region[which(u %in% Europe_E)] <- "E. Europe"
  # df_raw$Region[which(u %in% ESE_Asia)] <- "E. & S.E. Asia"
  # rm(u)
  #--
  if(output_countryVecs){
    out_list <- list()
    out_list[["Northern Africa"]] <- countries_NAfrica
    out_list[["Middle Africa"]] <- countries_MAfrica
    out_list[["Western Africa"]] <- countries_WAfrica
    out_list[["Eastern Africa"]] <- countries_EAfrica
    out_list[["Southern Africa"]] <- countries_SAfrica
    out_list[["df_raw"]] <- df_raw
    return(out_list)
  }else{
    return(df_raw)
  }
  
}
# regionGroups_vec <- paste0("countries_",
#                            #--Africa
#                            c("NAfrica", "MAfrica",
#                              "WAfrica", "EAfrica",
#                              "SAfrica",
#                              #--Americas
#                              "SAmer", "CAmer",
#                              "Carib", "NAmer",
#                              #--Asia
#                              "EAsia",
#                              "SEAsia", "SAsia",
#                              "WAsia", "CAsia",
#                              #--Europe
#                              "NEurope", "EEurope",
#                              "WEurope", "SEurope",
#                              #--Oceania
#                              "Oceania", "AusNZea",
#                              "PacifIs"))
# #=================================
# countries_NAfrica <- as.character(unique(read.csv("Country list - Northern Africa.csv")[,"Area"]))
# 
# ind_load <- which(exists(regionGroups_vec[4]) == F)
# 
# "Northern Africa"
# "Middle Africa"
# "Western Africa"
# "Eastern Africa"
# "Southern Africa"
# #--Americas
# "South America"
# "Central America"
#==========================================================================
#==========================================================================
#==========================================================================
df_raw_1 <- read.csv("FAO Data/FoodBalanceSheetsHistoric_E_All_Data.csv", stringsAsFactors = F)
df_raw_1 <- subset(df_raw_1, Item.Code != 2928)
df_raw_2 <- read.csv("FAO Data/FoodBalanceSheets_E_All_Data.csv", stringsAsFactors = F)
df_raw_2 <- subset(df_raw_2, Item.Code != 2928)
rm_cols <- c("Area.Code", "Item.Code", "Element.Code")
rm_cols <- which(colnames(df_raw_1) %in% rm_cols)
df_raw_1 <- df_raw_1[, -rm_cols]
df_raw_2 <- df_raw_2[, -rm_cols]
df_raw <- merge(df_raw_1, df_raw_2, by = c("Area", "Item", "Element", "Unit"))
df_raw$Item <- as.character(df_raw$Item)
df_raw$Element <- as.character(df_raw$Element)
df_raw$Area <- as.character(df_raw$Area)
u <- colnames(df_raw)
df_raw <- df_raw[, -grep("F", u)]
v <- colnames(df_raw)[5:ncol(df_raw)]
colnames(df_raw)[5:ncol(df_raw)] <- gsub("Y", "", v)
df_raw <- gather(df_raw,Year,Value,`1961`:`2017`)
#------------------------------------------------------------------------
rm(df_raw_1, df_raw_2); gc()
#------------------------------------------------------------------------
out_list <- FAOdat_createRegionGroups(df_raw, exclude_these = NULL, keep_FAOregions = F,
                                      df_is_trade_matrix = F,
                                      consolidate_LAC = T,
                                      consolidate_WEur = T,
                                      consolidate_AusNZPacIslands = T,
                                      consolidate_SSA = F,
                                      output_countryVecs = T)
df_raw <- out_list[["df_raw"]]
EAfrica_vec <- out_list[["Eastern Africa"]]
EAfrica_vec <- c(EAfrica_vec, "Mayotte")
WAfrica_vec <- out_list[["Western Africa"]]
NAfrica_vec <- out_list[["Northern Africa"]]
MAfrica_vec <- out_list[["Middle Africa"]]
SAfrica_vec <- out_list[["Southern Africa"]]
EAfrica_vec[grep("Tanzania", EAfrica_vec)] <- "Tanzania"
SAfrica_vec[grep("Eswatini", SAfrica_vec)] <- "Swaziland"
WAfrica_vec[grep("CÃ´te d'Ivoire", WAfrica_vec)] <- "Côte d'Ivoire"
SSA_vec <- c(EAfrica_vec, WAfrica_vec, SAfrica_vec, MAfrica_vec)
#------------------------------------------------------------------------
df_raw$Area[grep("Tanzania", df_raw$Area)] <- "Tanzania"
df_raw$Area[grep("Eswatini", df_raw$Area)] <- "Swaziland"
df_raw$Area[grep("CÃ´te d'Ivoire", df_raw$Area)] <- "Côte d'Ivoire"
df_raw$Region[which(df_raw$Region == "Eastern Africa")] <- "East Africa"
df_raw$Region[which(df_raw$Region == "Western Africa")] <- "West Africa"
#==========================================================================
df_fbal <- subset(df_raw, Element == "Food supply (kcal/capita/day)" &
                    Item == "Grand Total")
df_fbal <- df_fbal[, c("Area", "Region", "Year", "Value")]
df_fbal$Value <- log(df_fbal$Value)
colnames(df_fbal)[ncol(df_fbal)] <- "Food supply (kcal/capita/day), logged"
rm(df_raw); gc()
#==========================================================================
df_raw <- read.csv("FAO Data/Macro-Statistics_Key_Indicators_E_All_Data.csv", stringsAsFactors = F)
rm_cols <- c("Area.Code", "Item.Code", "Element.Code")
rm_cols <- which(colnames(df_raw) %in% rm_cols)
df_raw <- df_raw[, -rm_cols]
#unique(df_raw$Item)
df_raw$Item <- as.character(df_raw$Item)
df_raw$Area <- as.character(df_raw$Area)
u <- colnames(df_raw)
df_raw <- df_raw[, -grep("F", u)]
u <- colnames(df_raw)
df_raw <- df_raw[, -grep("N", u)]
v <- colnames(df_raw)[5:ncol(df_raw)]
colnames(df_raw)[5:ncol(df_raw)] <- gsub("Y", "", v)
#---------------------------------------------------------------------------
# Check available years
#colnames(df_raw)
#---------------------------------------------------------------------------
available_yrs <- as.character(c(1970:2018))
df_raw <- gather_(df_raw, "Year", "Value", gather_cols = available_yrs)
#df_raw$Unit <- NULL
#---------------------------------------------------------------------------
df_raw$Area[grep("Tanzania", df_raw$Area)] <- "Tanzania"
df_raw$Area[grep("Eswatini", df_raw$Area)] <- "Swaziland"
df_raw$Area[grep("CÃ´te d'Ivoire", df_raw$Area)] <- "Côte d'Ivoire"
#---------------------------------------------------------------------------
#unique(df_raw$Item)
item_vec <- c("Gross Domestic Product per capita")
this_element <- "Value US$, 2015 prices"
df_gdp <- subset(df_raw, Item == "Gross Domestic Product per capita" &
                     Element == "Value US$, 2015 prices")
df_gdp <- df_gdp[, c("Area", "Year", "Value")]
df_gdp$Value <- log(df_gdp$Value)
colnames(df_gdp)[ncol(df_gdp)] <- "GDP/capita (USD, 2015 prices), logged"
rm(df_raw); gc()
#==========================================================================
df <- merge(df_fbal, df_gdp, by = c("Area", "Year"))
df$Region[grep("Africa", df$Region)] <- "Africa"
df$Region[grep("Europe", df$Region)] <- "Europe"
df$Region[which(df$Region %in% c("Europe", "North America"))] <- "Europe/N. Amer.\nAustralia/NZ"
df$Region[which(df$Area %in% c("Australia", "New Zealand"))] <- "Europe/N. Amer.\nAustralia/NZ"
#df$Region[grep("Western Asia", df$Region)] <- "Middle East"
#df$Region <- gsub("Eastern", "East", df$Region)
df$Region[which(df$Region %in% c("Southern Asia", "South-Eastern Asia"))] <- "S./S.E. Asia"
df$Region[which(df$Region == "Aus/NZ/Oceania")] <- "Pacific Islands"
unique(df$Region)
#==========================================================================
df_CIneq_raw <- read.csv("GCIP Data/Consumption Inequality/consumption-inequalityexcel.csv", stringsAsFactors = F)
df_IIneq_raw <- read.csv("GCIP Data/Income Inequality/income-inequalityexcel.csv", stringsAsFactors = F)
# colnames(df_CIneq_raw)
# unique(df_CIneq_raw$country)
# unique(df_CIneq_raw$year)
df_CIneq_raw$year <- as.integer(df_CIneq_raw$year)
df_IIneq_raw$year <- as.integer(df_IIneq_raw$year)
df_CIneq_raw <- df_CIneq_raw[, c("country", "year", "gini")]
df_IIneq_raw <- df_IIneq_raw[, c("country", "year", "gini")]
df_CIneq_raw$Type <- "Consumption Inequality (Gini Coefficient)"
df_IIneq_raw$Type <- "Income Inequality (Gini Coefficient)"
df_Ineq <- rbind(df_CIneq_raw, df_IIneq_raw)
colnames(df_Ineq)[1:2] <- c("Area", "Year")
df_Ineq <- df_Ineq %>% spread(Type, gini)
rm(df_CIneq_raw, df_IIneq_raw); gc()
#==========================================================================
list_df <- list(df, df_Ineq)
for(i in 1:length(list_df)){
  this_df <- list_df[[i]]
  this_df$Area[grep("Tanzania", this_df$Area, ignore.case = T)] <- "Tanzania"
  this_df$Area[grep("Iran", this_df$Area, ignore.case = T)] <- "Iran"
  this_df$Area[grep("Syria", this_df$Area, ignore.case = T)] <- "Syria"
  this_df$Area[grep("United States Virgin Islands", this_df$Area, ignore.case = T)] <- "US Virgin Islands"
  this_df$Area[grep("British Virgin Islands", this_df$Area, ignore.case = T)] <- "UK Virgin Islands"
  this_df$Area[grep("United States", this_df$Area, ignore.case = T)] <- "United States"
  this_df$Area[grep("Viet", this_df$Area, ignore.case = T)] <- "Vietnam"
  this_df$Area[grep("Democratic Republic of the Congo", this_df$Area, ignore.case = T)] <- "DRC"
  this_df$Area[grep("Congo, Dem. Rep.", this_df$Area, ignore.case = T)] <- "DRC"
  this_df$Area[grep("Bolivia", this_df$Area, ignore.case = T)] <- "Bolivia"
  this_df$Area[grep("Singapore", this_df$Area, ignore.case = T)] <- "Singapore"
  this_df$Area[grep("Macedonia", this_df$Area, ignore.case = T)] <- "Macedonia"
  this_df$Area[grep("Venezuela", this_df$Area, ignore.case = T)] <- "Venezuela"
  this_df$Area[grep("Ivoire", this_df$Area, ignore.case = T)] <- "Cote d'Ivoire"
  this_df$Area[grep("Lanka", this_df$Area, ignore.case = T)] <- "Sri Lanka"
  this_df$Area[grep("Eswatini", this_df$Area, ignore.case = T)] <- "Swaziland"
  list_df[[i]] <- this_df
}
df <- plyr::join_all(list_df)
#==========================================================================
this_year <- "2000"
df_plot <- subset(df, Year == this_year)

df_mod <- df_plot[, setdiff(colnames(df_plot), c("Area", "Year", "Region"))]
keep_rows <- which(!is.na(df_mod$`Consumption Inequality (Gini Coefficient)`))
df_mod <- df_mod[keep_rows, ]
keep_rows <- which(!is.na(df_mod$`Food supply (kcal/capita/day), logged`))
df_mod <- df_mod[keep_rows, ]

row.names(df_mod) <- df_plot$Area[keep_rows]
df_mod$`Income Inequality (Gini Coefficient)` <- NULL
#df_mod$`Consumption Inequality (Gini Coefficient)` <- NULL
#df_mod$`Income Inequality (Gini Coefficient)` <- log(df_mod$`Income Inequality (Gini Coefficient)`)
df_mod$`Consumption Inequality (Gini Coefficient)` <- log(df_mod$`Consumption Inequality (Gini Coefficient)`)

df_mod$`Consumption Inequality (Gini Coefficient)` <- NULL

mod <- lm(`Food supply (kcal/capita/day), logged` ~ ., df_mod)
summary(mod)
m_gini <- round(mod$coefficients[3], 2)
m_gdp <- round(mod$coefficients[2], 2)
b <- round(mod$coefficients[1], 2)

# plot(mod$fitted.values, mod$residuals)
# plot(mod$fitted.values, df_mod$`Food supply (kcal/capita/day), logged`)

y_lab <- paste(b, "+", m_gdp, "(GDP/capita (USD, 2015 prices), logged) +\n",
      m_gini, "(Consumption Inequality (Gini Coefficient), logged)")

df_mod$`6.93 + 0.1 (GDP/capita (USD, 2015 prices), logged) +\n -0.14 (Consumption Inequality (Gini Coefficient), logged)` <-
  mod$fitted.values
df_mod$Area <- row.names(df_mod)
df_mod <- merge(df_mod, df_plot[, c("Area", "Region")], by = "Area")
df_plot <- df_mod
#unique(df_plot$Area[grep("Korea", df_plot$Area, ignore.case = T)])
label_these <- c("China, mainland", "United States of America", "France", "Austria",
                 "Lesotho", "South Africa", "Colombia", "Mexico", "Guatemala",
                 "Nicaragua", "Viet Nam", "Republic of Korea", "Indonesia",
                 "Kenya", "Ethiopia", "Burkina Faso", "Ghana", "Senegal",
                 "Angola", "Brazil", "Bolivia", "Haiti", "Dominican Republic",
                 "Australia", "Japan", "Turkey", "Estonia", "Italy",
                 "Liberia", "Iran", "Afghanistan")
df_plot$label_these <- NA
u <- which(df_plot$Area %in% label_these)
df_plot$label_these[u] <- df_plot$Area[u]

df_labelThese <- subset(df_plot, Area %in% label_these)
n <- length(unique(df_plot$Region))
bag_of_colors <- randomcoloR::distinctColorPalette(k = 2 * n)
color_vec <- sample(bag_of_colors, n)
gg <- ggplot(df_plot, aes(x = `6.93 + 0.1 (GDP/capita (USD, 2015 prices), logged) +\n -0.14 (Consumption Inequality (Gini Coefficient), logged)`,
                          y = `Food supply (kcal/capita/day), logged`,
                          label = label_these))
gg <- gg + geom_point(aes(group = Region, color = Region), alpha = 0.7, size = 3)
gg <- gg + ggrepel::geom_text_repel(color = "black", size = 4)
gg <- gg + scale_color_manual(values = color_vec)
#gg <- gg + geom_abline(slope = m, intercept = b, color = "black", linetype = "dashed")
gg <- gg + labs(title = "Engel's Law, Variation 4")
# gg <- gg + labs(title = "Engel's Law, Variation 3",
#                 subtitle = paste0("Slope = ", m, "  y-intercept = ", b))
gg <- gg + theme(legend.position = "bottom",
                 legend.spacing.x = unit(0.5, 'cm'),
                 legend.title = element_blank())
gg
#==========================================================================
df_plot <- df

label_these <- c("China, mainland", "India", "France",
                 "Australia", "Nicaragua", "Colombia", "Haiti", "Uganda",
                 "Ghana", "South Africa", "Liberia", "Vietnam", "Canada",
                 "Mexico", "Republic of Korea", "Japan", "Iran")

df_plot$label_these <- NA
u <- which(df_plot$Area %in% label_these)
df_plot$label_these[u] <- df_plot$Area[u]


n <- length(unique(df_plot$Region))
bag_of_colors <- randomcoloR::distinctColorPalette(k = 2 * n)
color_vec <- sample(bag_of_colors, n)

df_plot$Year <- as.integer(df_plot$Year)
gg <- ggplot(df_plot, aes(x = `GDP/capita (USD, 2015 prices), logged`,
                          y = `Food supply (kcal/capita/day), logged`,
                          label = label_these))
gg <- gg + geom_point(aes(group = Region, color = Region),
                      alpha = 0.7, size = 3)
gg <- gg + geom_text(color = "black", size = 5)
gg <- gg + scale_color_manual(values = color_vec)
gg <- gg + geom_smooth(method = lm, se = F)
#gg <- gg + ggrepel::geom_text_repel()
#gg <- gg + geom_abline(slope = m, intercept = b, color = "black", linetype = "dashed")
gg <- gg + labs(title = "Year: {frame_time}",
                subtitle = "Engel's Law, Variation 1")
#                subtitle = paste0("Slope = ", m, "  y-intercept = ", b))
gg <- gg + theme(legend.position = "bottom",
                 legend.spacing.x = unit(0.5, 'cm'),
                 legend.title = element_blank())
gg <- gg + transition_time(Year) + ease_aes("linear")
#gg
animate(gg, fps = 5)

anim_save("test_anim.gif")


#==========================================================================
df_params <- df[, c("Year", "Food supply (kcal/capita/day), logged",
                    "GDP/capita (USD, 2015 prices), logged")]
df_params <- df_params[which(!is.na(df_params$`Food supply (kcal/capita/day), logged`)), ]

yr_vec <- unique(df_params$Year)
n_yrs <- length(yr_vec)
m_vec <- c()
b_vec <- c()
adjR2_vec <- c()
for(i in 1:n_yrs){
  this_year <- yr_vec[i]
  this_df <- subset(df_params, Year == this_year)
  this_df$Year <- NULL
  mod <- lm(`Food supply (kcal/capita/day), logged`~., this_df)
  m_vec[i] <- round(mod$coefficients[2], 3)
  b_vec[i] <- round(mod$coefficients[1], 3)
  df_out <- as.data.frame(broom::glance(mod))
  adjR2_vec[i] <- df_out$adj.r.squared
  
}

df_plot <- data.frame(Year = yr_vec, Slope = m_vec, b_vec, adjR2_vec)
colnames(df_plot)[3:4] <- c("Y-intercept", "Adj. R squared")
mean(df_plot$Slope)
sd(df_plot$Slope)
mean(df_plot$`Y-intercept`)
sd(df_plot$`Y-intercept`)

df_plot$Year <- as.integer(as.character(df_plot$Year))
df_plot <- df_plot %>% gather(Type, Value, Slope:`Adj. R squared`)
gg <- ggplot(df_plot, aes(x = Year, y = Value))
gg <- gg + geom_line()
gg <- gg + facet_wrap(~Type, ncol = 1, scales = "free_y")
gg <- gg + theme(axis.title = element_blank())
gg


#==========================================================================
#==========================================================================
#==========================================================================
