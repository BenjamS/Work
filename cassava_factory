library(ggplot2)
library(tidyr)
library(fields)
#-------------
P_root_lcu_MT <- 2.5 * 1000
Q_root_statusQuo_MT <- 800
N_surm <- 1200
mu_fsize <- 0.5
mu_h <- 0.9
mu_b <- mu_h / (1 - mu_h)
cv_b <- 0.25
#-------------
lconv_factr_P <- (-1 + sqrt(1 - 2 * cv_b^2 * (log(N_surm) + log(mu_fsize) - log(Q_root_statusQuo_MT)))) / (mu_b * cv_b^2) - log(P_root_lcu_MT)
conv_factr_P <- exp(lconv_factr_P)
# sig2_b <- 2 / log(P_root_lcu_MT)^2 * (log(Q_obs_MT) - log(N_surm) - log(mu_fsize) - mu_b * log(P_root_lcu_MT))
# sig_b <- sqrt(sig2_b)
# cv_b <- sig_b / mu_b
# cv_b
#-------------
Pvec_lcu <- seq(1, 3000, 10)
Pvec <- conv_factr_P * Pvec_lcu
#-------------
#cv_vec <- c(0.15, 0.25, 0.35, 0.45, 0.55)
#N_vec <- seq(800, 1400, 200)
mu_h_vec <- c(0.7, 0.8, 0.9, 1.1)
#-------------
list_Q <- list()
# for(i in 1:length(cv_vec)){
#   in_cv_b <- cv_vec[i]
#   Qvec <- N_surm * mu_fsize * Pvec^mu_b * exp(1/2 * (mu_b * in_cv_b * log(Pvec))^2)
#   list_Q[[i]] <- Qvec
# }
#---
# for(i in 1:length(N_vec)){
#   in_N_surm <- N_vec[i]
#   print(N_surm)
#   Qvec <- in_N_surm * mu_fsize * Pvec^mu_b * exp(1/2 * (mu_b * cv_b * log(Pvec))^2)
#   list_Q[[i]] <- Qvec
# }
#---
for(i in 1:length(mu_h_vec)){
  in_mu_h <- mu_h_vec[i]
  in_mu_b <- in_mu_h / (1 - in_mu_h)
  Qvec <- N_surm * mu_fsize * Pvec^in_mu_b * exp(1/2 * (in_mu_b * cv_b * log(Pvec))^2)
  list_Q[[i]] <- Qvec
}
#---
df_Q <- as.data.frame(do.call(cbind, list_Q))
# colnames(df_Q) <- as.character(cv_vec)
#colnames(df_Q) <- as.character(N_vec)
colnames(df_Q) <- as.character(mu_h_vec)
gathercols <- colnames(df_Q)
df_Q$P_lcu <- Pvec_lcu
# df_Q <- df_Q %>% gather_("CV", "Q", gathercols)
#df_Q <- df_Q %>% gather_("N", "Q", gathercols)
df_Q <- df_Q %>% gather_("mu_h", "Q", gathercols)
#-------------
df_plot <- df_Q #data.frame(Q = Qvec, P_lcu = Pvec_lcu, lQ = log(Qvec), lP = log(Pvec_lcu))

#gg <- ggplot(df_plot, aes(x = P_lcu, y = Q, group = CV, color = CV))
#gg <- ggplot(df_plot, aes(x = P_lcu, y = Q, group = N, color = N))
gg <- ggplot(df_plot, aes(x = P_lcu, y = Q, group = mu_h, color = mu_h))
gg <- gg + geom_point()
gg <- gg + coord_cartesian(ylim = c(0, 1000))
gg
#==============
P_root_lcu_kg <- 2.5
P_root_lcu_MT <- P_root_lcu_kg * 1000
P_root_conv_MT <- P_root_lcu_MT * conv_factr_P
P_starch_lcu_MT <- 14000
#P_starch_conv_MT <- P_starch_lcu_MT * conv_factr_P
MTRootsPerMTStarch <- 4.21
CostPerMTStarch <- 13500
CostExclRoots <- CostPerMTStarch - MTRootsPerMTStarch * P_root_lcu_MT
#pctCostNonRoot <- CostExclRoots / CostPerMTStarch
#--------------
Q_starch_statusQuo_MT <- Q_root_statusQuo_MT / MTRootsPerMTStarch
Cost_statusQuo <- Q_starch_statusQuo_MT * CostPerMTStarch
NR_statusQuo <- P_starch_lcu_MT * Q_starch_statusQuo_MT - Cost
#--------------
pct_cost_reduction_vec <- -seq(0.01, 0.2, 0.01)
pct_h_reduction_vec <- -seq(0.01, 0.2, 0.01)
#--------------
n_pctCostRed <- length(pct_cost_reduction_vec)
n_pctHRed <- length(pct_h_reduction_vec)
Q_root_mat <- matrix(NA, n_pctCostRed, n_pctHRed)
Q_starch_mat <- matrix(NA, n_pctCostRed, n_pctHRed)
NR_mat <- matrix(NA, n_pctCostRed, n_pctHRed)
NR_pctChng_mat <- matrix(NA, n_pctCostRed, n_pctHRed)
NR_pctChng_Qconst_mat <- matrix(NA, n_pctCostRed, n_pctHRed)
for(i in 1:n_pctCostRed){
  pct_cost_reduction <- pct_cost_reduction_vec[i]
  for(j in 1:n_pctHRed){
    pct_h_reduction <- pct_h_reduction_vec[j]
    in_mu_h <- mu_h * (1 + pct_h_reduction)
    in_mu_b <- in_mu_h / (1 - in_mu_h)
    Q_root_MT <- N_surm * mu_fsize * P_root_conv_MT^in_mu_b * exp(1/2 * (in_mu_b * cv_b * log(P_root_conv_MT))^2)
    Q_starch_MT <- Q_root_MT / MTRootsPerMTStarch
    Cost <- Q_starch_MT * CostPerMTStarch * (1 + pct_cost_reduction)
    NR <- P_starch_lcu_MT * Q_starch_MT - Cost
    NR_pctChng <- 100 * (NR - NR_statusQuo) / NR_statusQuo
    #-----------
    Q_root_mat[i, j] <- Q_root_MT
    Q_starch_mat[i, j] <- Q_starch_MT
    NR_mat[i, j] <- NR
    NR_pctChng_mat[i, j] <- NR_pctChng
    #-----------
    P_root_conv_MT_new <- exp((-1 + sqrt(1 - 2 * cv_b^2 * (log(N_surm) + log(mu_fsize) - log(Q_root_statusQuo_MT)))) / (in_mu_b * cv_b^2))
    P_root_lcu_MT_new <- P_root_conv_MT_new / conv_factr_P
    CostPerMTStarch_new <- MTRootsPerMTStarch * P_root_lcu_MT_new + CostExclRoots
    Cost <- Q_starch_statusQuo_MT * CostPerMTStarch_new * (1 + pct_cost_reduction)
    NR <- P_starch_lcu_MT * Q_starch_statusQuo_MT - Cost
    NR_pctChng <- 100 * (NR - NR_statusQuo) / NR_statusQuo
    NR_pctChng_Qconst <- 100 * (NR - NR_statusQuo) / NR_statusQuo
    NR_pctChng_Qconst_mat[i, j] <- NR_pctChng_Qconst
  }
}

image(NR_pctChng_Qconst_mat)
image.plot(NR_pctChng_mat, col = cm.colors(64, alpha = 1), axes = F)
contour(NR_mat, lwd = 2, labcex = 1, add = T)

df_NR <- as.data.frame(NR_pctChng_Qconst_mat)
colnames(df_NR) <- as.character(pct_h_reduction_vec)
gathercols <- colnames(df_NR)
df_NR$`chng C` <- as.character(pct_cost_reduction_vec)
df_NR <- df_NR %>% gather_("chng h", "chng NR", gathercols)
#-------
df_plot <- df_NR
df_plot %>% sapply(class)
df_plot$`chng C` <- as.numeric(df_plot$`chng C`)
df_plot$`chng h` <- as.numeric(df_plot$`chng h`)

# gg <- ggplot(df_plot, aes(x = `chng C`, y = `chng h`, z = `chng NR`))
# gg <- gg + geom_contour()

gg <- ggplot()
gg <- gg + geom_raster(data = df_plot, aes(x = `chng C`, y = `chng h`, fill = `chng NR`), alpha = 0.7)
gg <- gg + scale_fill_gradient(limits = range(df_plot$`chng NR`), high = 'purple', low = 'white')
gg <- gg + labs(fill = "chng NR")
gg <- gg + geom_contour(data = df_plot, aes(x = `chng C`, y = `chng h`, z = `chng NR`, color = ..level..))#, size = 1.5, binwidth = 0.3)
gg <- gg + scale_color_gradient(limits = range(df_plot$`chng NR`), high = 'green', low = 'white')
gg <- gg + labs(color = "chng NR")
gg <- gg + theme_minimal()
gg <- gg + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
# gg <- gg + xlab("Change in standard deviation")
# gg <- gg + ylab("Change in mean")
gg







QX_MT <- Q_obs_MT / RootsPerStarch
Cost <- P_root_lcu_MT * Q_obs_MT
