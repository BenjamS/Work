library(ggplot2)
library(tidyr)
library(fields)
#-------------
# Thai Cassava farm survey
setwd("D:/OneDrive - CGIAR/Documents")
df <- read.csv("Cassava work/tran12-survey-95farmers-cassava-Korat.csv", stringsAsFactors = F)
#df <- read.csv("tran12-survey-95farmers-cassava-Korat.csv", stringsAsFactors = F)
colnames(df)[1] <- "x"
df <- df[-c(1:2), -c(ncol(df), (ncol(df) - 1))]
colnames(df)[2:ncol(df)] <- df[2, 2:ncol(df)]
df <- df[-c(1:2), ]
colnames(df)[1] <- "Ampoer"
colnames(df)[8] <- paste("Land Prep", colnames(df)[8])
colnames(df)[15] <- paste("Harvest", colnames(df)[15])
df_supplement <- df[97:144, ]
df <- df[-c(96:nrow(df)), ]
df[, -1] <- as.data.frame(apply(df[, -1], 2, as.numeric))
#--
df$`Farm size (ha)` <- df$`Farm size (rai)` / 6.25
df$`l(Farm size (ha))` <- log(df$`Farm size (ha)`)
hist(df$`Farm size (ha)`)
hist(df$`l(Farm size (ha))`)
m_lfsize <- mean(df$`l(Farm size (ha))`)
s_lfsize <- sd(df$`l(Farm size (ha))`)
cv_lfsize <- s_lfsize / m_lfsize
s2_lfsize <- s_lfsize^2
mu_fsize <- exp(m_lfsize + 1 / 2 * s2_lfsize)
mu_fsize_sample <- mean(df$`Farm size (ha)`, na.rm = T)
mode_fsize <- exp(m_lfsize - s2_lfsize)
#--
df$`Yield (ton/ha)` <- df$`Yield (ton/rai) 1 ha = 6.25 rai` * 6.25
df$`l(Yield (ton/ha))` <- log(df$`Yield (ton/ha)`)
hist(df$`Yield (ton/ha)`)
hist(df$`l(Yield (ton/ha))`)
m_lyield <- mean(df$`l(Yield (ton/ha))`)
s_lyield <- sd(df$`l(Yield (ton/ha))`)
cv_lyield <- s_lyield / m_lyield
s2_lyield <- s_lyield^2
mu_yield <- exp(m_lyield + 1 / 2 * s2_lyield)
mu_yield_sample <- mean(df$`Yield (ton/ha)`, na.rm = T)
sig_yield_sample <- sd(df$`Yield (ton/ha)`, na.rm = T)
mode_yield <- exp(m_lyield - s2_lyield)
cv_yield_sample <- sig_yield_sample / mu_yield_sample
#--
df$`pct. cass cult` <- df$`Surface occupied by cassava (rai)` / df$`Farm size (rai)`
hist(df$`pct. cass cult`)
gg <- ggplot(df, aes(x = `Yield (ton/rai) 1 ha = 6.25 rai`,
                     y = `Surface occupied by cassava (rai)`))
gg <- gg + geom_point()
gg
df$`Surface occupied by cassava (rai)`
hist(df$`N (kg/rai)`)
hist(df$`P (kg/rai)`)
hist(df$`K (kg/rai)`)
hist(df$`Chicken manure (ton/rai)`)
length(which(df$`Chicken manure (ton/rai)` > 0))
nrow(df)
median(df$`Chicken manure (ton/rai)`)
#-------------

sum(df$`Surface occupied by cassava (rai)`) / sum(df$`Farm size (rai)`)
df$`Surface occupied by cassava (ha)` <- df$`Surface occupied by cassava (rai)` / 6.25
sum(df$`Surface occupied by cassava (ha)`)
sum(df$`Farm size (ha)`)
#-------------
# Deduce number of producers (factory suppliers) from above info
# N_root_statQuo <- Q_root_MT_day_statQuo / (mu_yield * mu_fsize)#(mode_yield * mode_fsize)
#-------------
# Deduce sig2_h1 (root and chip)
# h_surmise <- 0.9
# cv_1oh_surm <- 0.2
# mu_1oh_surm <- 1 / h_surmise
# sig2_1oh_surm <- (mu_1oh_surm * cv_1oh_surm)^2
# m_lyroot_h1_statQuo <- m_lyield + (mu_1oh_surm - 1) * log(P_root_lcu_MT_statQuo)
# m_lyroot_h1_statQuo
# mu_yroot_h1_statQuo <- Q_root_MT_day_statQuo / (N_root_statQuo * mu_fsize) *
#   P_root_lcu_MT_statQuo^(mu_1oh_surm - 1) * 
#   exp(-sig2_1oh_surm * log(P_root_lcu_MT_statQuo)^2 / 2)
# mu_yroot_h1_statQuo
# # Check (log(mu_y_h1) has to be > m_ly_h1!)
# log(mu_yroot_h1_statQuo) - m_lyroot_h1_statQuo
# #For just m_lyroot_h1_statQuo:
# # Therefore, assuming lognormal distribution
# s2_lyroot_h1_statQuo <- 2 * (log(mu_yroot_h1_statQuo) - m_lyroot_h1_statQuo)
# s2_lyroot_h1_statQuo
#-------------
Q_root_MT_day_statQuo <- 800
P_root_lcu_MT_statQuo <- 2500
P_chip_lcu_MT_statQuo <- 8000
P_starch_lcu_MT_statQuo <- 14000
MTRootsPerMTStarch <- 4.21
#-------------
# Supply function
Q_supply <- function(P, N0, mu_A, mu_Cq, k, cv_Cq, l_credit = 0){
  x <- (1 - l_credit) / P
  Q <- N * mu_A * exp(-x * (mu_Cq + k) + 
                        (x * mu_Cq * cv_Cq)^2 / 2)
  return(Q)
}
P_supply <- function(Q, N0, mu_A, mu_Cq, k, cv_Cq, l_credit = 0){
  sig2_Cq <- cv_Cq^2 * mu_Cq^2
  a <- sig2_Cq / 2
  b <- -(mu_Cq + k)
  c <- log(N0) + log(mu_A) - log(Q)
  xx <- (-b - sqrt(b^2 - 4 * a * c)) / (2 * a)
  P <- (1 - l_credit) / xx
  return(P)
}
FactoryNetRevenue <- function(Q_feedstock, P_output_lcu_Qoutput, fdstkToOutput_efficiency,
                              P_feedstock_lcu_Q, alpha, beta){
  Revenue <- Q_feedstock / fdstkToOutput_efficiency * P_output_lcu_Qoutput
  Cost_feedstock <- Q_feedstock * P_feedstock_lcu_Q
  Cost_processing <- alpha * Q_feedstock^beta
  Cost <-  Cost_feedstock + Cost_processing
  NR <- Revenue - Cost
  return(NR)
}

FactoryStar <- function(P_output_lcu_Qoutput, P_feedstock_lcu_Q,
                         fdstkToOutput_efficiency, alpha, beta, mu_Cq, cv_Cq, k){
  sig2_Cq <- (mu_Cq * cv_Cq)^2
  eta_QP <- (mu_Cq + k) / P_feedstock_lcu_Q - sig2_Cq / P_feedstock_lcu_Q^2
  term <- (P_output_lcu_Qoutput / fdstkToOutput_efficiency - P_feedstock_lcu_Q * (1 + 1 / eta_QP))
  #Qstar <- (term / (alpha * beta))^(1 / (beta - 1))
  Qstar <- (term / (beta + 1))^(1 / beta)
  Revenue <- Qstar / fdstkToOutput_efficiency * P_output_lcu_Qoutput
  Cost_feedstock <- Qstar * P_feedstock_lcu_Q
  #Cost_processing <- alpha * Qstar^beta
  Cost_processing <-  Qstar^(beta + 1)
  Cost <- Cost_feedstock + Cost_processing
  NRstar <- Revenue - Cost
  outlist <- list(Qstar, NRstar)
  return(outlist)
}
#======================================
# Farm population parameters
cv_Cq_statQuo <- 0.15
N0_statQuo <- 700
mu_A_statQuo <- 10
mu_Cq_statQuo <- 1100
k_statQuo <- 4300
l_credit_statQuo <- 0
#======================================
# Factory parameters
Q_chip_MT_statQuo <- 350
MTRootsPerMTStarch <- 1 / 3.05
#N_chip_statQuo <- Q_chip_MT_statQuo / (convert_root_chip * mode_yield * mode_fsize)
Q_root_MT_day_statQuo <- 800
P_root_lcu_MT_statQuo <- 2500
P_starch_lcu_MT_statQuo <- 14000
#P_ethanol_lcu_ML_statQuo <- 
MTRootsPerMTStarch_statQuo <- 4.21
Q_starch_MT_day_statQuo <- Q_root_MT_day_statQuo / MTRootsPerMTStarch
Cost_rootProcessing_MTroot_statQuo <- 13500 / MTRootsPerMTStarch_statQuo - P_root_lcu_MT_statQuo
#Cost_rootProcessing_MTstarch_statQuo <- MTRootsPerMTStarch_statQuo * Cost_rootProcessing_MTroot_statQuo
Cost_processing_day_statQuo <- Q_feedstock_MT_day_statQuo * Cost_rootProcessing_MTroot_statQuo
#beta_statQuo <- 0.97
#alpha_statQuo <- exp(log(Cost_rootProcessing_MTroot_statQuo) - beta_statQuo * log(Q_feedstock_MT_day_statQuo))
# alpha_statQuo <- exp(log(Cost_processing_day_statQuo) - beta_statQuo * log(Q_feedstock_MT_day_statQuo))
# alpha_statQuo * Q_root_MT_day_statQuo^beta_statQuo - Cost_processing_day_statQuo
beta_statQuo <- log(Cost_processing_day_statQuo) / log(Q_feedstock_MT_day_statQuo) - 1
#======================================
fdstkToOutput_efficiency_statQuo <- MTRootsPerMTStarch_statQuo
#--
P_feedstock_lcu_MT_statQuo <- P_root_lcu_MT_statQuo
P_output_lcu_MToutput_statQuo <- P_starch_lcu_MT_statQuo
#--
P_output_lcu_MTfdstk_statQuo <- P_output_lcu_MToutput_statQuo / fdstkToOutput_efficiency_statQuo
#--
Q_feedstock_MT_day_statQuo <- Q_root_MT_day_statQuo
#--
Cost_fdstkProcessing_MTfdstk_statQuo <- Cost_rootProcessing_MTroot_statQuo
Cost_fdstkProcessing_MToutput_statQuo <- Cost_rootProcessing_MTstarch_statQuo
#======================================
# Check
NR <- FactoryNetRevenue(Q_feedstock = Q_feedstock_MT_day_statQuo,
                        P_output_lcu_Qoutput = P_output_lcu_MToutput_statQuo,
                        fdstkToOutput_efficiency = fdstkToOutput_efficiency_statQuo,
                        P_feedstock_lcu_Q = P_feedstock_lcu_MT_statQuo,
                        alpha = alpha_statQuo,
                        beta = beta_statQuo)
NR
Q_feedstock_MT_day_statQuo / fdstkToOutput_efficiency_statQuo * (P_starch_lcu_MT_statQuo - 13500)
#Revenue <- Q_feedstock_MT_day_statQuo / fdstkToOutput_efficiency_statQuo * P_output_lcu_MToutput_statQuo
# Revenue <- Q_feedstock_MT_day_statQuo * P_output_lcu_MTfdstk_statQuo
# Cost <- Q_feedstock_MT_day_statQuo * (P_feedstock_lcu_MT_statQuo + Cost_fdstkProcessing_MTfdstk_statQuo)
# NR_day <- Revenue - Cost
#======================================
# Factory Demand Curve
P_fdstk_vec <- seq(0, 3000, 10)
Qstar_vec <- c()
NRstar_vec <- c()
for(i in 1:length(P_fdstk_vec)){
  P_fdstk <- P_fdstk_vec[i]
  outFactoryStar <- FactoryStar(P_output_lcu_Qoutput = 15000, #P_output_lcu_MToutput_statQuo,
                                P_feedstock_lcu_Q = P_fdstk,
                                fdstkToOutput_efficiency = fdstkToOutput_efficiency_statQuo,
                                alpha = alpha_statQuo,
                                beta = 0.98,#beta_statQuo,
                                mu_Cq = mu_Cq_statQuo,
                                cv_Cq = cv_Cq_statQuo,
                                k = 10000)#k_statQuo)
  Qstar_vec[i] <- outFactoryStar[1]
  NRstar_vec[i] <- outFactoryStar[2]

}
df_plot <- data.frame(Qstar = Qstar_vec, NRstar = NRstar_vec, P = P_fdstk_vec)
gg <- ggplot(df_plot, aes(x = P, y = NRstar)) + geom_line()
#gg <- gg + coord_cartesian(ylim = c(0, 1100))
gg
#======================================
# Equilibrium NRstar at status quo
P_feedstock_lcu_MT_statQuo <- 2304

outFactoryStar <- FactoryStar(P_output_lcu_Qoutput = P_output_lcu_MToutput_statQuo,
                              P_feedstock_lcu_Q = P_feedstock_lcu_MT_statQuo,
                              fdstkToOutput_efficiency = fdstkToOutput_efficiency_statQuo,
                              alpha = alpha_statQuo,
                              beta = beta_statQuo,
                              mu_Cq = mu_Cq_statQuo,
                              cv_Cq = cv_Cq_statQuo,
                              k = k_statQuo)
NRstar_statQuo <- outFactoryStar[[2]]
NRstar_statQuo
class(NRstar_statQuo)

# P_output_lcu_Qoutput = P_output_lcu_MToutput_statQuo
# P_feedstock_lcu_Q = P_feedstock_lcu_MT_statQuo
# fdstkToOutput_efficiency = fdstkToOutput_efficiency_statQuo
# alpha = alpha_statQuo
# beta = beta_statQuo
# mu_Cq = mu_Cq_statQuo
# cv_Cq = cv_Cq_statQuo
# k = k_statQuo
# sig2_Cq <- (mu_Cq * cv_Cq)^2
# eta_QP <- (mu_Cq + k) / P_feedstock_lcu_Q - sig2_Cq / P_feedstock_lcu_Q^2
# term <- (P_output_lcu_Qoutput / fdstkToOutput_efficiency - P_feedstock_lcu_Q * (1 + 1 / eta_QP))
# #Qstar <- (term / (alpha * beta))^(1 / (beta - 1))
# Qstar <- (term / (beta + 1))^(1 / beta)
# Revenue <- Qstar / fdstkToOutput_efficiency * P_output_lcu_Qoutput
# Cost_feedstock <- Qstar * P_feedstock_lcu_Q
# #Cost_processing <- alpha * Qstar^beta
# Cost_processing <-  Qstar^(beta + 1)
# Cost <- Cost_feedstock + Cost_processing
# NRstar <- Revenue - Cost
# NRstar
# Qstar
#======================================
# Heatmap time
Pvec_lcu_MT <- seq(1, 3000, 10)
beta_change_vec <- -seq(0, 0.05, 0.001)
mu_Cq_change_vec <- seq(0, .05, 0.001)
#-------------
n_FactryCostChng <- length(beta_change_vec)
n_FarmCostChng <- length(mu_Cq_change_vec)
P_equilib_mat <- matrix(NA, n_FactryCostChng, n_FarmCostChng)
Q_equilib_mat <- matrix(NA, n_FactryCostChng, n_FarmCostChng)
NR_equilib_mat <- matrix(NA, n_FactryCostChng, n_FarmCostChng)
NR_pctChng_mat <- matrix(NA, n_FactryCostChng, n_FarmCostChng)
FactoryNRday_pctChng_QstatQuo_mat <- matrix(NA, n_FactryCostChng, n_FarmCostChng)
FactoryNRday_pctChng_PstatQuo_mat <- matrix(NA, n_FactryCostChng, n_FarmCostChng)
last_i <- length(mu_Cq_change_vec)
last_j <- length(beta_change_vec)
for(j in 1:last_j){
  this_beta <- beta_statQuo + beta_change_vec[j]
  for(i in 1:last_i){
  this_mu_Cq <- mu_Cq_statQuo * (1 + mu_Cq_change_vec[i])
  #cv_Cq <- cv_surmise_vec[i]
  QSup_vec <- Q_supply(P = Pvec_lcu_MT,
                   N0 = N0_statQuo, 
                   mu_A = mu_A_statQuo,
                   mu_Cq = this_mu_Cq,
                   k = k_statQuo, 
                   cv_Cq = cv_Cq_statQuo, 
                   l_credit = 0)
  #list_QSup[[i]] <- QSup_vec
  outFactoryStar <- FactoryStar(P_output_lcu_Qoutput = P_output_lcu_MToutput_statQuo,
                                P_feedstock_lcu_Q = Pvec_lcu_MT,
                                fdstkToOutput_efficiency = fdstkToOutput_efficiency_statQuo,
                                alpha = alpha_statQuo,
                                beta = this_beta,
                                mu_Cq = this_mu_Cq,
                                cv_Cq = cv_Cq_statQuo,
                                k = k_statQuo)
  QDem_vec <- outFactoryStar[[1]]
  NRstar_vec <- outFactoryStar[[2]]
  #list_QDem[[i]] <- QDem_vec
  #list_NRstar[[i]] <- NRstar_vec
  # Equilibium price
  # First get equilibrium Q (intersection of supply and demand curves)
  diffvec <- abs(QDem_vec - QSup_vec)
  diffvec[which(is.nan(diffvec))] <- 10^9
  ind_equilib <- which(diffvec == min(diffvec))
  #QDem_vec[ind_equilib]
  Qstar_equilib <- QSup_vec[ind_equilib]
  NRstar_equilib <- NRstar_vec[ind_equilib]
  P_equilib <- P_supply(Q = Qstar_equilib,
           N0 = N0_statQuo,
           mu_A = mu_A_statQuo,
           mu_Cq = this_mu_Cq,
           k = k_statQuo,
           cv_Cq = cv_Cq_statQuo,
           l_credit = 0)
  P_equilib_mat[j, i] <- P_equilib
  Q_equilib_mat[j, i] <- Qstar_equilib
  NR_equilib_mat[j, i] <- NRstar_equilib
  NR_pctChng_mat[j, i] <- 100 * (NRstar_equilib - NRstar_statQuo) / NRstar_statQuo
  }
}

#-----------------
xtick_labs <- -beta_change_vec * 100
ytick_labs <- mu_Cq_change_vec * 100
#-----------------
inMat <- NR_equilib_mat
surface <- list(x = xtick_labs,
                y = ytick_labs,
                z = inMat)
plot.surface(surface, type = "C",
             xlab = "Pct factory cost reduction",
             ylab = "Pct farm cost increase", col = cm.colors(25))
title(main = "Pct Change in Factory Net Revenue \nholding feedstock quantity constant",
      cex.main = 1)
#-----------------
inMat <- NR_pctChng_mat
surface <- list(x = xtick_labs,
                y = ytick_labs,
                z = inMat)
plot.surface(surface, type = "C",
             xlab = "Pct factory cost reduction",
             ylab = "Pct farm cost increase", col = cm.colors(25))
title(main = "Pct Change in Factory Net Revenue \nholding feedstock price constant",
      cex.main = 1)































#---
df_QS <- as.data.frame(do.call(cbind, list_QSup))
df_QD <- as.data.frame(do.call(cbind, list_QDem))
df_QS$Type <- "Supply"
df_QD$Type <- "Demand"
df_Q <- rbind(df_QS, df_QD)
colnames(df_Q)[1:length(mu_Cq_change_vec)] <- as.character(mu_Cq_change_vec)
gathercols <- colnames(df_Q)[1:length(mu_Cq_change_vec)]
# colnames(df_Q)[1:length(cv_surmise_vec)] <- as.character(cv_surmise_vec)
# gathercols <- colnames(df_Q)[1:length(cv_surmise_vec)]
df_Q$`P (lcu/MT)` <- Pvec_lcu_MT
#df_Q <- df_Q %>% gather_("CV", "Q (MT)", gathercols)
df_Q <- df_Q %>% gather_("Mean Farm Cost (lcu/MT root)", "Q (MT)", gathercols)
#-------------
df_plot <- df_Q
gg <- ggplot()
gg <- gg + geom_point(data = df_plot, aes(x = `P (lcu/MT)`, y = `Q (MT)`, 
                                      group = `Mean Farm Cost (lcu/MT root)`,
                                      color = `Mean Farm Cost (lcu/MT root)`))
                                      # group = CV,
                                      # color = CV))
gg <- gg + geom_point(aes(x = P_equilib_vec, y = Q_equilib_vec), color="blue", size = 4)
gg <- gg + coord_cartesian(ylim = c(0, 1900))
gg


#====================================
pct_factryCost_reduction_vec <- -seq(0.01, 0.2, 0.01)
pct_Cq_change_vec <- seq(0.01, 0.2, 0.01)
#--------------
n_pctFactryCostRed <- length(pct_factryCost_reduction_vec)
n_pctFarmCostRed <- length(pct_Cq_change_vec)
FactoryNRday_new_QstatQuo_mat <- matrix(NA, n_pctFactryCostRed, n_pctFarmCostRed)
FactoryNRday_new_PstatQuo_mat <- matrix(NA, n_pctFactryCostRed, n_pctFarmCostRed)
FactoryNRday_pctChng_QstatQuo_mat <- matrix(NA, n_pctFactryCostRed, n_pctFarmCostRed)
FactoryNRday_pctChng_PstatQuo_mat <- matrix(NA, n_pctFactryCostRed, n_pctFarmCostRed)
for(i in 1:n_pctFactryCostRed){
  #pct_factryCost_reduction <- pct_factryCost_reduction_vec[i]
  #CostPerQ_processing <- Cost_fdstkProcessing_MTfdstk_statQuo * (1 + pct_factryCost_reduction)
  pp_reduc <- pct_factryCost_reduction_vec[i]
  beta <- beta_statusQuo + pp_reduc
  for(j in 1:n_pctFarmCostRed){
    pct_Cq_change <- pct_Cq_change_vec[j]
    #--------------------------
    mu_Cq_new <- mu_Cq_statQuo * (1 + pct_Cq_change)
    #--------------------------
    # New feedstock price to pay in order to maintain Q_statQuo
    # P_feedstock_lcu_MT_new_QstatQuo <- P_supply(Q = Q_feedstock_MT_day_statQuo,
    #                                             N = N0_statQuo,
    #                                             mu_A = mu_A_statQuo,
    #                                             mu_Cq,
    #                                             k = k_statQuo,
    #                                             cv_Cq = cv_Cq_statQuo,
    #                                             l_credit = l_credit_statQuo)
    # New optimal factory feedstock quantity given change in farm productivity
    Qstar_new <- FactoryQstar(P_output_lcu_Qoutput = P_output_lcu_MToutput_statQuo,
                          P_feedstock_lcu_Q = P_feedstock_lcu_MT_statQuo, 
                          fdstkToOutput_efficiency = fdstkToOutput_efficiency_statQuo, 
                          beta = beta_statQuo,
                          mu_Cq = mu_Cq_new,
                          cv_Cq = cv_Cq_statQuo, 
                          k = k_statQuo)
    P_feedstock_lcu_MT_new_QstatQuo
    P_feedstock_lcu_MT_statQuo
    #--------
    # New Factory daily NR at new P same Q
    P_feedstock_lcu_Q <- P_feedstock_lcu_MT_new_QstatQuo
    FactoryNR_lcu_day_new_QstatQuo <- FactoryNetRevenue(Q_feedstock = Q_feedstock_MT_day_statQuo,
                                                        P_output_lcu_Qoutput = P_output_lcu_MToutput_statQuo,
                                                        fdstkToOutput_efficiency = fdstkToOutput_efficiency_statQuo,
                                                        P_feedstock_lcu_Q,
                                                        CostPerQ_processing)
    FactoryNR_lcu_day_new_QstatQuo
    FactoryNR_lcu_day_statQuo
    FactoryNR_pctChng_QstatQuo <- 100 * (FactoryNR_lcu_day_new_QstatQuo - FactoryNR_lcu_day_statQuo) / FactoryNR_lcu_day_statQuo
    FactoryNR_pctChng_QstatQuo
    #--------------------------
    # New quantity obtained if paying the same price P_statQuo
    Q_feedstock_MT_day_new_PstatQuo <- Q_supply(P = P_feedstock_lcu_MT_statQuo,
                                                N = N0_statQuo,
                                                mu_A = mu_A_statQuo,
                                                mu_Cq,
                                                k = k_statQuo,
                                                cv_Cq = cv_Cq_statQuo,
                                                l_credit = l_credit_statQuo)
    Q_feedstock_MT_day_new_PstatQuo
    Q_feedstock_MT_day_statQuo
    #--------
    # New Factory daily NR at new Q same P
    Q_feedstock <- Q_feedstock_MT_day_new_PstatQuo
    FactoryNR_lcu_day_new_PstatQuo <- FactoryNetRevenue(Q_feedstock,
                                                        P_output_lcu_Qoutput = P_output_lcu_MToutput_statQuo,
                                                        fdstkToOutput_efficiency = fdstkToOutput_efficiency_statQuo,
                                                        P_feedstock_lcu_Q = P_feedstock_lcu_MT_statQuo,
                                                        CostPerQ_processing)
    FactoryNR_lcu_day_new_PstatQuo
    FactoryNR_lcu_day_statQuo
    FactoryNR_pctChng_PstatQuo <- 100 * (FactoryNR_lcu_day_new_PstatQuo - FactoryNR_lcu_day_statQuo) / FactoryNR_lcu_day_statQuo
    FactoryNR_pctChng_PstatQuo
    #-----------
    FactoryNRday_pctChng_QstatQuo_mat[i, j] <- FactoryNR_pctChng_QstatQuo
    FactoryNRday_pctChng_PstatQuo_mat[i, j] <- FactoryNR_pctChng_PstatQuo
    FactoryNRday_new_QstatQuo_mat[i, j] <- FactoryNR_lcu_day_new_QstatQuo
    FactoryNRday_new_PstatQuo_mat[i, j] <- FactoryNR_lcu_day_new_PstatQuo
    #-----------
  }
}
#-----------------
xtick_labs <- -pct_factryCost_reduction_vec * 100
ytick_labs <- pct_Cq_change_vec * 100
#-----------------
inMat <- FactoryNRday_pctChng_QstatQuo_mat
surface <- list(x = xtick_labs,
                y = ytick_labs,
                z = inMat)
plot.surface(surface, type = "C",
             xlab = "Pct factory cost reduction",
             ylab = "Pct farm cost increase", col = cm.colors(25))
title(main = "Pct Change in Factory Net Revenue \nholding feedstock quantity constant",
      cex.main = 1)
#-----------------
inMat <- FactoryNRday_pctChng_PstatQuo_mat
surface <- list(x = xtick_labs,
                y = ytick_labs,
                z = inMat)
plot.surface(surface, type = "C",
             xlab = "Pct factory cost reduction",
             ylab = "Pct farm cost increase", col = cm.colors(25))
title(main = "Pct Change in Factory Net Revenue \nholding feedstock price constant",
      cex.main = 1)














# image.plot(FactoryNRday_pctChng_PstatQuo_mat, col = cm.colors(64, alpha = 1), axes = T)
# contour(inMat, lwd = 2, labcex = 1, add = T)


df_NR <- as.data.frame(inMat)
colnames(df_NR) <- as.character(pct_Cq_change_vec)
gathercols <- colnames(df_NR)
df_NR$`Pct chng factory cost` <- as.character(pct_factryCost_reduction_vec)
df_NR <- df_NR %>% gather_("Pct chng farm cost", "chng NR", gathercols)
#-------
df_plot <- df_NR
df_plot %>% sapply(class)
df_plot$`Pct chng factory cost` <- as.numeric(df_plot$`Pct chng factory cost`)
df_plot$`Pct chng farm cost` <- as.numeric(df_plot$`Pct chng farm cost`)

# gg <- ggplot(df_plot, aes(x = `chng C`, y = `chng h`, z = `chng NR`))
# gg <- gg + geom_contour()

gg <- ggplot()
gg <- gg + geom_raster(data = df_plot, aes(x = `Pct chng factory cost`, y = `Pct chng farm cost`, fill = `chng NR`), alpha = 0.7)
gg <- gg + scale_fill_gradient(limits = range(df_plot$`chng NR`), high = 'purple', low = 'white')
gg <- gg + labs(fill = "chng NR")
gg <- gg + geom_contour(data = df_plot, aes(x = `Pct chng factory cost`, y = `Pct chng farm cost`, z = `chng NR`, color = ..level..))#, size = 1.5, binwidth = 0.3)
gg <- gg + scale_color_gradient(limits = range(df_plot$`chng NR`), high = 'green', low = 'white')
gg <- gg + labs(color = "chng NR")
gg <- gg + theme_minimal()
gg <- gg + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
# gg <- gg + xlab("Change in standard deviation")
# gg <- gg + ylab("Change in mean")
gg




#--
#Regression
colnames(df)

rm_vec <- c("Harvest Diesel fuel used  (L/rai)", "Land Prep Diesel fuel used (L/rai)",
            "Planting reparation rate (%)", "Landfill organic waste", "Paraquat (L/rai)", "Chicken manure (ton/rai)")
regrsrs_str1 <- c("Farm size (rai)", "Surface occupied by cassava (rai)", "Crop duration (month)")
#regrsrs_str1 <- c("Farm size (rai)", "Crop duration (month)")
regrsrs_str1 <- paste0("`", regrsrs_str1, "`", collapse = " + ")
regrsrs_str2 <- paste0("`", setdiff(colnames(df)[6:17], rm_vec), "`", collapse = " + ")
regrsrs <- paste(regrsrs_str1, regrsrs_str2, sep = " + ")
this_formula <- as.formula(paste("`Yield (ton/rai) 1 ha = 6.25 rai` ~ ", regrsrs)[1])
df_l <- as.data.frame(apply(df[, -1], 2, log))
df_l <- df_l[-which(is.infinite(df_l$`K (kg/rai)`)), ]
df_l <- df_l[-which(is.infinite(df_l$`Glyphosate (L/rai)`)), ]

linmod <- lm(this_formula, df)
#---------------------
summod <- summary(linmod)
print(summod)
#---------------------
pvals <- as.numeric(summod$coefficients[, 4])
