library(ggplot2)
library(tidyr)
library(fields)
#-------------
# Thai Cassava farm survey
#df <- read.csv("Cassava work/tran12-survey-95farmers-cassava-Korat.csv", stringsAsFactors = F)
df <- read.csv("tran12-survey-95farmers-cassava-Korat.csv", stringsAsFactors = F)
colnames(df)[1] <- "x"
df <- df[-c(1:2), -c(ncol(df), (ncol(df) - 1))]
colnames(df)[2:ncol(df)] <- df[2, 2:ncol(df)]
df <- df[-c(1:2), ]
colnames(df)[1] <- "Ampoer"
colnames(df)[8] <- paste("Land Prep", colnames(df)[8])
colnames(df)[15] <- paste("Harvest", colnames(df)[15])
df_supplement <- df[97:144, ]
df <- df[-c(96:nrow(df)), ]
df[, -1] <- as.data.frame(apply(df[, -1], 2, as.numeric))
#--
df$`Farm size (ha)` <- df$`Farm size (rai)` / 6.25
df$`l(Farm size (ha))` <- log(df$`Farm size (ha)`)
hist(df$`l(Farm size (ha))`)
m_lfsize <- mean(df$`l(Farm size (ha))`)
s_lfsize <- sd(df$`l(Farm size (ha))`)
cv_lfsize <- s_lfsize / m_lfsize
s2_lfsize <- s_lfsize^2
mu_fsize <- exp(m_lfsize + 1 / 2 * s2_lfsize)
mu_fsize_sample <- mean(df$`Farm size (ha)`, na.rm = T)
mode_fsize <- exp(m_lfsize - s2_lfsize)
#--
df$`Yield (ton/ha)` <- df$`Yield (ton/rai) 1 ha = 6.25 rai` * 6.25
df$`l(Yield (ton/ha))` <- log(df$`Yield (ton/ha)`)
hist(df$`Yield (ton/ha)`)
hist(df$`l(Yield (ton/ha))`)
m_lyield <- mean(df$`l(Yield (ton/ha))`)
s_lyield <- sd(df$`l(Yield (ton/ha))`)
cv_lyield <- s_lyield / m_lyield
s2_lyield <- s_lyield^2
mu_yield <- exp(m_lyield + 1 / 2 * s2_lyield)
mu_yield_sample <- mean(df$`Yield (ton/ha)`, na.rm = T)
sig_yield_sample <- sd(df$`Yield (ton/ha)`, na.rm = T)
mode_yield <- exp(m_lyield - s2_lyield)
cv_yield_sample <- sig_yield_sample / mu_yield_sample
#--
df$`pct. cass cult` <- df$`Surface occupied by cassava (rai)` / df$`Farm size (rai)`
hist(df$`pct. cass cult`)
gg <- ggplot(df, aes(x = `Yield (ton/rai) 1 ha = 6.25 rai`,
                     y = `Surface occupied by cassava (rai)`))
gg <- gg + geom_point()
gg
df$`Surface occupied by cassava (rai)`
hist(df$`N (kg/rai)`)
hist(df$`P (kg/rai)`)
hist(df$`K (kg/rai)`)
hist(df$`Chicken manure (ton/rai)`)
length(which(df$`Chicken manure (ton/rai)` > 0))
nrow(df)
median(df$`Chicken manure (ton/rai)`)



#-------------
# Deduce number of producers (factory suppliers) from above info
Q_root_MT_day_statusQuo <- 800
N_root_statusQuo <- Q_root_MT_day_statusQuo / (mu_yield * mu_fsize)#(mode_yield * mode_fsize)
Q_chip_MT_statusQuo <- 350
convert_root_chip <- 1 / 3.05
N_chip_statusQuo <- Q_chip_MT_statusQuo / (convert_root_chip * mode_yield * mode_fsize)
#-------------
# Deduce sig2_h1 (root and chip)
P_root_lcu_MT_statusQuo <- 2500
P_chip_lcu_MT_statusQuo <- 8000
h_surmise <- 0.9
cv_1oh_surm <- 0.2
mu_1oh_surm <- 1 / h_surmise
sig2_1oh_surm <- (mu_1oh_surm * cv_1oh_surm)^2
m_lyroot_h1_statusQuo <- m_lyield + (mu_1oh_surm - 1) * log(P_root_lcu_MT_statusQuo)
m_lyroot_h1_statusQuo
mu_yroot_h1_statusQuo <- Q_root_MT_day_statusQuo / (N_root_statusQuo * mu_fsize) *
  P_root_lcu_MT_statusQuo^(mu_1oh_surm - 1) * 
  exp(-sig2_1oh_surm * log(P_root_lcu_MT_statusQuo)^2 / 2)
mu_yroot_h1_statusQuo
# Check (log(mu_y_h1) has to be > m_ly_h1!)
log(mu_yroot_h1_statusQuo) - m_lyroot_h1_statusQuo
#For just m_lyroot_h1_statusQuo:
# Therefore, assuming lognormal distribution
s2_lyroot_h1_statusQuo <- 2 * (log(mu_yroot_h1_statusQuo) - m_lyroot_h1_statusQuo)
s2_lyroot_h1_statusQuo
#-------------
Pvec_lcu_MT <- seq(1, 3000, 10)
h_surmise_vec <- c(0.7, 0.8, 0.9, 1)
#cv_1oh_vec <- c(0.1, 0.15, 0.25, 0.35, 0.45, 0.55)
#-------------
# list_Q <- list()
# for(i in 1:length(cv_vec)){
#   in_cv_1oh <- cv_1oh_vec[i]
# sig2_1oh <- (mu_1oh * in_cv_1oh)^2
# mu_yroot_h1_statusQuo <- Q_root_MT_day_statusQuo / (N_root_statusQuo * mu_fsize) *
#   P_root_lcu_MT_statusQuo^(mu_1oh - 1) * 
#   exp(-sig2_1oh * log(P_root_lcu_MT_statusQuo)^2 / 2)
# print(mu_yroot_h1_statusQuo)
#   Qvec <- N_root_statusQuo * mu_fsize * mu_yroot_h1_statusQuo * 
#     Pvec_lcu_MT^(1 - mu_1oh_surm) * exp(1/2 * sig2_1oh *
#     log(Pvec_lcu_MT)^2)
#   list_Q[[i]] <- Qvec
# }
#---
list_Q <- list()
for(i in 1:length(h_surmise_vec)){
  in_h <- h_surmise_vec[i]
  in_mu_1oh <- 1 / in_h
  sig2_1oh <- (in_mu_1oh * cv_1oh_surm)^2
  Qvec <- N_root_statusQuo * mu_fsize * mu_yroot_h1_statusQuo * 
    Pvec_lcu_MT^(1 - in_mu_1oh) *
    exp(1/2 * sig2_1oh * log(Pvec_lcu_MT)^2)
  list_Q[[i]] <- Qvec
}
#---
df_Q <- as.data.frame(do.call(cbind, list_Q))
# colnames(df_Q) <- as.character(cv_1oh_vec)
colnames(df_Q) <- as.character(h_surmise_vec)
gathercols <- colnames(df_Q)
df_Q$P_lcu <- Pvec_lcu_MT
# df_Q <- df_Q %>% gather_("CV", "Q", gathercols)
df_Q <- df_Q %>% gather_("h_surm", "Q", gathercols)
#-------------
df_plot <- df_Q #data.frame(Q = Qvec, P_lcu = Pvec_lcu, lQ = log(Qvec), lP = log(Pvec_lcu))

#gg <- ggplot(df_plot, aes(x = P_lcu, y = Q, group = CV, color = CV))
gg <- ggplot(df_plot, aes(x = P_lcu, y = Q, group = h_surm, color = h_surm))
gg <- gg + geom_point()
#gg <- gg + coord_cartesian(ylim = c(0, 1000))
gg
#==============
P_starch_lcu_MT_statusQuo <- 14000
#P_starch_conv_MT <- P_starch_lcu_MT * conv_factr_P
MTRootsPerMTStarch <- 4.21
Cost_starch_MT_statusQuo <- 13500
Cost_feedstock_MTstarch_statusQuo <- MTRootsPerMTStarch * P_root_lcu_MT_statusQuo
Cost_ExclFeedstock_MTstarch_statusQuo <- Cost_starch_MT_statusQuo - Cost_feedstock_MTstarch_statusQuo
#pctCostNonRoot <- CostExclRoots / CostPerMTStarch
#--------------
Q_starch_MT_day_statusQuo <- Q_root_MT_day_statusQuo / MTRootsPerMTStarch
Cost_lcu_day_statusQuo <- Q_starch_MT_day_statusQuo * Cost_starch_MT_statusQuo
Revenue_lcu_day_statusQuo <- P_starch_lcu_MT_statusQuo * Q_starch_MT_day_statusQuo
NR_lcu_day_statusQuo <- Revenue_lcu_day_statusQuo - Cost_lcu_day_statusQuo
#--------------
pct_cost_reduction_vec <- -seq(0.01, 0.2, 0.01)
pct_h_reduction_vec <- -seq(0.01, 0.2, 0.01)
#--------------
n_pctCostRed <- length(pct_cost_reduction_vec)
n_pctHRed <- length(pct_h_reduction_vec)
Q_root_mat <- matrix(NA, n_pctCostRed, n_pctHRed)
Q_starch_mat <- matrix(NA, n_pctCostRed, n_pctHRed)
NR_mat <- matrix(NA, n_pctCostRed, n_pctHRed)
NR_pctChng_QstatQuo_mat <- matrix(NA, n_pctCostRed, n_pctHRed)
NR_pctChng_PstatQuo_mat <- matrix(NA, n_pctCostRed, n_pctHRed)
for(i in 1:n_pctCostRed){
  pct_cost_reduction <- pct_cost_reduction_vec[i]
  for(j in 1:n_pctHRed){
    pct_h_reduction <- pct_h_reduction_vec[j]
    in_h_surm <- h_surmise * (1 + pct_h_reduction)
    in_mu_1oh <- 1 / in_h_surm
    sig2_1oh <- (in_mu_1oh * cv_1oh_surm)^2
    #--------
    # New root price to pay in order to maintain Q_statusQuo
    a <- 1 / 2 * sig2_1oh
    b <- 1 - mu_1oh_surm
    c <- log(N_root_statusQuo) + log(mu_fsize) + log(mu_yroot_h1_statusQuo) -
      log(Q_root_MT_day_statusQuo)
    lP_root_lcu_MT_new <- (-b + sqrt(b^2 - 4 * a * c)) / (2 * a)
    P_root_lcu_MT_new <- exp(lP_root_lcu_MT_new)
    #-
    Cost_feedstock_MTstarch_new <- MTRootsPerMTStarch * P_root_lcu_MT_new
    #Cost_ExclFeedstock_MT_new <- Cost_ExclFeedstock_MT_statusQuo * (1 + pct_cost_reduction)
    Cost_lcu_day_new_QstatQuo <- (Cost_feedstock_MTstarch_new * 
      Q_starch_MT_day_statusQuo + 
      Cost_ExclFeedstock_MTstarch_statusQuo) * (1 + pct_cost_reduction)
    NR_lcu_day_new_QstatQuo <- Revenue_lcu_day_statusQuo - Cost_lcu_day_new_QstatQuo
    #--------
    # New quantity obtained if paying the same price P_statusQuo
    Q_root_MT_day_new <- N_root_statusQuo * mu_fsize * mu_yroot_h1_statusQuo * 
      P_root_lcu_MT_statusQuo^(1 - in_mu_1oh) *
      exp(1/2 * sig2_1oh * log(P_root_lcu_MT_statusQuo)^2)
    #-
    Q_starch_MT_day_new <- Q_root_MT_new / MTRootsPerMTStarch
    Revenue_lcu_day_new_PstatQuo <- Q_starch_MT_day_new * P_starch_lcu_MT_statusQuo
    Cost_lcu_day_new_PstatQuo <- (Cost_feedstock_MTstarch_statusQuo * 
                                    Q_starch_MT_day_new + 
                                    Cost_ExclFeedstock_MTstarch_statusQuo) * (1 + pct_cost_reduction)
    NR_lcu_day_new_PstatQuo <- Revenue_lcu_day_new_PstatQuo - Cost_lcu_day_new_PstatQuo
    NR_pctChng_PstatQuo <- 100 * (NR_lcu_day_new_PstatQuo - NR_lcu_day_statusQuo) / NR_lcu_day_statusQuo
    #-----------
    NR_pctChng_QstatQuo_mat[i, j] <- 
    NR_pctChng_PstatQuo_mat[i, j] <- 
    
    NR_pctChng_PstatQuo_mat[i, j]
    NR_new_mat[i, j] <- NR
    NR_pctChng_mat[i, j] <- NR_pctChng
    #-----------
    
    Cost <- Q_starch_statusQuo_MT * Cost_starch_MT_new * (1 + pct_cost_reduction)
    NR <- P_starch_lcu_MT * Q_starch_statusQuo_MT - Cost
    NR_pctChng <- 100 * (NR - NR_statusQuo) / NR_statusQuo
    NR_pctChng_Qconst <- 100 * (NR - NR_statusQuo) / NR_statusQuo
    NR_pctChng_Qconst_mat[i, j] <- NR_pctChng_Qconst
  }
}

image(NR_pctChng_Qconst_mat)
image.plot(NR_pctChng_mat, col = cm.colors(64, alpha = 1), axes = F)
contour(NR_mat, lwd = 2, labcex = 1, add = T)

df_NR <- as.data.frame(NR_pctChng_Qconst_mat)
colnames(df_NR) <- as.character(pct_h_reduction_vec)
gathercols <- colnames(df_NR)
df_NR$`chng C` <- as.character(pct_cost_reduction_vec)
df_NR <- df_NR %>% gather_("chng h", "chng NR", gathercols)
#-------
df_plot <- df_NR
df_plot %>% sapply(class)
df_plot$`chng C` <- as.numeric(df_plot$`chng C`)
df_plot$`chng h` <- as.numeric(df_plot$`chng h`)

# gg <- ggplot(df_plot, aes(x = `chng C`, y = `chng h`, z = `chng NR`))
# gg <- gg + geom_contour()

gg <- ggplot()
gg <- gg + geom_raster(data = df_plot, aes(x = `chng C`, y = `chng h`, fill = `chng NR`), alpha = 0.7)
gg <- gg + scale_fill_gradient(limits = range(df_plot$`chng NR`), high = 'purple', low = 'white')
gg <- gg + labs(fill = "chng NR")
gg <- gg + geom_contour(data = df_plot, aes(x = `chng C`, y = `chng h`, z = `chng NR`, color = ..level..))#, size = 1.5, binwidth = 0.3)
gg <- gg + scale_color_gradient(limits = range(df_plot$`chng NR`), high = 'green', low = 'white')
gg <- gg + labs(color = "chng NR")
gg <- gg + theme_minimal()
gg <- gg + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
# gg <- gg + xlab("Change in standard deviation")
# gg <- gg + ylab("Change in mean")
gg




#--
#Regression
colnames(df)

rm_vec <- c("Harvest Diesel fuel used  (L/rai)", "Land Prep Diesel fuel used (L/rai)",
            "Planting reparation rate (%)", "Landfill organic waste", "Paraquat (L/rai)", "Chicken manure (ton/rai)")
regrsrs_str1 <- c("Farm size (rai)", "Surface occupied by cassava (rai)", "Crop duration (month)")
#regrsrs_str1 <- c("Farm size (rai)", "Crop duration (month)")
regrsrs_str1 <- paste0("`", regrsrs_str1, "`", collapse = " + ")
regrsrs_str2 <- paste0("`", setdiff(colnames(df)[6:17], rm_vec), "`", collapse = " + ")
regrsrs <- paste(regrsrs_str1, regrsrs_str2, sep = " + ")
this_formula <- as.formula(paste("`Yield (ton/rai) 1 ha = 6.25 rai` ~ ", regrsrs)[1])
df_l <- as.data.frame(apply(df[, -1], 2, log))
df_l <- df_l[-which(is.infinite(df_l$`K (kg/rai)`)), ]
df_l <- df_l[-which(is.infinite(df_l$`Glyphosate (L/rai)`)), ]

linmod <- lm(this_formula, df)
#---------------------
summod <- summary(linmod)
print(summod)
#---------------------
pvals <- as.numeric(summod$coefficients[, 4])
