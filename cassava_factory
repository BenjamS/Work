library(ggplot2)
library(tidyr)
library(fields)
#-------------
# Thai Cassava farm survey
setwd("D:/OneDrive - CGIAR/Documents")
df <- read.csv("Cassava work/tran12-survey-95farmers-cassava-Korat.csv", stringsAsFactors = F)
#df <- read.csv("tran12-survey-95farmers-cassava-Korat.csv", stringsAsFactors = F)
colnames(df)[1] <- "x"
df <- df[-c(1:2), -c(ncol(df), (ncol(df) - 1))]
colnames(df)[2:ncol(df)] <- df[2, 2:ncol(df)]
df <- df[-c(1:2), ]
colnames(df)[1] <- "Ampoer"
colnames(df)[8] <- paste("Land Prep", colnames(df)[8])
colnames(df)[15] <- paste("Harvest", colnames(df)[15])
df_supplement <- df[97:144, ]
df <- df[-c(96:nrow(df)), ]
df[, -1] <- as.data.frame(apply(df[, -1], 2, as.numeric))
#--
df$`Farm size (ha)` <- df$`Farm size (rai)` / 6.25
df$`l(Farm size (ha))` <- log(df$`Farm size (ha)`)
hist(df$`Farm size (ha)`)
hist(df$`l(Farm size (ha))`)
m_lfsize <- mean(df$`l(Farm size (ha))`)
s_lfsize <- sd(df$`l(Farm size (ha))`)
cv_lfsize <- s_lfsize / m_lfsize
s2_lfsize <- s_lfsize^2
mu_fsize <- exp(m_lfsize + 1 / 2 * s2_lfsize)
mu_fsize_sample <- mean(df$`Farm size (ha)`, na.rm = T)
mode_fsize <- exp(m_lfsize - s2_lfsize)
#--
df$`Yield (ton/ha)` <- df$`Yield (ton/rai) 1 ha = 6.25 rai` * 6.25
df$`l(Yield (ton/ha))` <- log(df$`Yield (ton/ha)`)
hist(df$`Yield (ton/ha)`)
hist(df$`l(Yield (ton/ha))`)
m_lyield <- mean(df$`l(Yield (ton/ha))`)
s_lyield <- sd(df$`l(Yield (ton/ha))`)
cv_lyield <- s_lyield / m_lyield
s2_lyield <- s_lyield^2
mu_yield <- exp(m_lyield + 1 / 2 * s2_lyield)
mu_yield_sample <- mean(df$`Yield (ton/ha)`, na.rm = T)
sig_yield_sample <- sd(df$`Yield (ton/ha)`, na.rm = T)
mode_yield <- exp(m_lyield - s2_lyield)
cv_yield_sample <- sig_yield_sample / mu_yield_sample
#--
df$`pct. cass cult` <- df$`Surface occupied by cassava (rai)` / df$`Farm size (rai)`
hist(df$`pct. cass cult`)
gg <- ggplot(df, aes(x = `Yield (ton/rai) 1 ha = 6.25 rai`,
                     y = `Surface occupied by cassava (rai)`))
gg <- gg + geom_point()
gg
df$`Surface occupied by cassava (rai)`
hist(df$`N (kg/rai)`)
hist(df$`P (kg/rai)`)
hist(df$`K (kg/rai)`)
hist(df$`Chicken manure (ton/rai)`)
length(which(df$`Chicken manure (ton/rai)` > 0))
nrow(df)
median(df$`Chicken manure (ton/rai)`)
#-------------

sum(df$`Surface occupied by cassava (rai)`) / sum(df$`Farm size (rai)`)
df$`Surface occupied by cassava (ha)` <- df$`Surface occupied by cassava (rai)` / 6.25
sum(df$`Surface occupied by cassava (ha)`)
sum(df$`Farm size (ha)`)
#-------------
# Deduce number of producers (factory suppliers) from above info
# N_root_statQuo <- Q_root_MT_day_statQuo / (mu_yield * mu_fsize)#(mode_yield * mode_fsize)
#-------------
# Deduce sig2_h1 (root and chip)
# h_surmise <- 0.9
# cv_1oh_surm <- 0.2
# mu_1oh_surm <- 1 / h_surmise
# sig2_1oh_surm <- (mu_1oh_surm * cv_1oh_surm)^2
# m_lyroot_h1_statQuo <- m_lyield + (mu_1oh_surm - 1) * log(P_root_lcu_MT_statQuo)
# m_lyroot_h1_statQuo
# mu_yroot_h1_statQuo <- Q_root_MT_day_statQuo / (N_root_statQuo * mu_fsize) *
#   P_root_lcu_MT_statQuo^(mu_1oh_surm - 1) * 
#   exp(-sig2_1oh_surm * log(P_root_lcu_MT_statQuo)^2 / 2)
# mu_yroot_h1_statQuo
# # Check (log(mu_y_h1) has to be > m_ly_h1!)
# log(mu_yroot_h1_statQuo) - m_lyroot_h1_statQuo
# #For just m_lyroot_h1_statQuo:
# # Therefore, assuming lognormal distribution
# s2_lyroot_h1_statQuo <- 2 * (log(mu_yroot_h1_statQuo) - m_lyroot_h1_statQuo)
# s2_lyroot_h1_statQuo
#-------------
Q_root_MT_day_statQuo <- 800
P_root_lcu_MT_statQuo <- 2500
P_chip_lcu_MT_statQuo <- 8000
P_starch_lcu_MT_statQuo <- 14000
MTRootsPerMTStarch <- 4.21
#-------------
# Supply function
Q_supply <- function(P, N, mu_A, mu_farmCost_A, k, cv_farmCost, l_credit = 0){
  x <- (1 - l_credit) / P
  Q <- N * mu_A * exp(-x * (mu_farmCost_A + k) + 
                        (x * mu_farmCost_A * cv_farmCost)^2 / 2)
  return(Q)
}
P_supply <- function(Q, N, mu_A, mu_farmCost_A, k, cv_farmCost, l_credit = 0){
  sig2_farmCost <- cv_farmCost^2 * mu_farmCost_A^2
  a <- sig2_farmCost / 2
  b <- -(mu_farmCost_A + k)
  c <- log(N) + log(mu_A) - log(Q)
  xx <- (-b - sqrt(b^2 - 4 * a * c)) / (2 * a)
  P <- (1 - l_credit) / xx
  return(P)
}
FactoryNetRevenue <- function(Q_feedstock, P_output_lcu_Qoutput, fdstkToOutput_efficiency,
                              P_feedstock_lcu_Q, beta){
  Revenue <- Q_feedstock / fdstkToOutput_efficiency * P_output_lcu_Qoutput
  Cost_feedstock <- Q_feedstock * P_feedstock_lcu_Q
  Cost_processing <- Q_feedstock * Q_feedstock^beta
  Cost <-  Cost_feedstock + Cost_processing
  NR <- Revenue - Cost
  return(NR)
}

FactoryNRstar <- function(Q_feedstock, P_output_lcu_Qoutput,
                              P_feedstock_lcu_Q, beta, mu_Cq, cv_Cq, k){
  s2_Cq <- (cv_Cq * mu_Cq)^2
  eta_QP <- (mu_Cq - k) / P - s2_Cq / P^2
  Cost_feedstock <- Q_feedstock * P_feedstock_lcu_Q
  Cost_processing <- Q_feedstock * Q_feedstock^beta
  NRstar <- Cost_feedstock / eta_QP - Cost_processing * (1 - beta)
  return(NRstar)
}

# FactoryQstar <- function(NR_targ, P_output_lcu_Qoutput,
#                           P_feedstock_lcu_Q, beta){
#   s2_Cq <- (cv_Cq * mu_Cq)^2
#   eta_QP <- (mu_Cq - k) / P - s2_Cq / P^2
#   Cost_processing <- Q_feedstock^beta
#   Qstar <- eta_QP / P_feedstock_lcu_Q * (NR_targ + Cost_processing * (1 - beta))
#   return(Qstar)
# }

FactoryStar <- function(P_output_lcu_Qoutput, P_feedstock_lcu_Q,
                         fdstkToOutput_efficiency, beta, mu_Cq, cv_Cq, k){
  sig2_Cq <- (mu_Cq * cv_Cq)^2
  eta_QP <- (mu_Cq - k) / P_feedstock_lcu_Q - sig2_Cq / P_feedstock_lcu_Q^2
  term <- (P_output_lcu_Qoutput * fdstkToOutput_efficiency - P_feedstock_lcu_Q * (1 - 1 / eta_QP))
  Qstar <- (term / (1 + beta))^(1 / beta)
  Revenue <- Qstar * P_output_lcu_Qoutput * fdstkToOutput_efficiency
  Cost_feedstock <- Qstar * P_feedstock_lcu_Q
  Cost_processing_perunit_feedstock <- Qstar^beta
  Cost_processing <- Qstar * Cost_processing_perunit_feedstock
  Cost <- Cost_feedstock + Cost_processing
  NRstar <- Revenue - Cost
  outvec <- c(Qstar, NRstar)
  return(outvec)
}

# P_fdstk_vec <- seq(0, 6000, 1)
# Qstar_vec <- c()
# NRstar_vec <- c()
# for(i in 1:length(P_fdstk_vec)){
#   P_fdstk <- P_fdstk_vec[i]
#   outFactoryStar <- FactoryStar(P_output_lcu_Qoutput = P_output_lcu_MToutput_statQuo,
#                                 P_feedstock_lcu_Q = P_fdstk,
#                                 fdstkToOutput_efficiency = fdstkToOutput_efficiency_statQuo,
#                                 beta = beta_statQuo,
#                                 mu_Cq = mu_Cq_statQuo,
#                                 cv_Cq = cv_Cq_statQuo,
#                                 k = k_statQuo)
#   Qstar_vec[i] <- outFactoryStar[1]
#   NRstar_vec[i] <- outFactoryStar[2]
#   
# }
# df_plot <- data.frame(Qstar = Qstar_vec, NRstar = NRstar_vec, P = P_fdstk_vec)
# gg <- ggplot(df_plot, aes(x = Qstar, y = NRstar)) + geom_line()
# gg


#-------------
# Farm population parameters
cv_Cq_statQuo <- 0.15
N0_statQuo <- 700
mu_A_statQuo <- 10
mu_Cq_statQuo <- 1100
k_statQuo <- 4300
l_credit_statQuo <- 0
#-------------
Pvec_lcu_MT <- seq(1, 25000, 10)
mu_farmCost_surmise_vec <- c(500, 1100, 1700, 2300)
#cv_surmise_vec <- c(0.1, 0.15, 0.25, 0.35, 0.45, 0.55)
#-------------
in_param_vec <- mu_farmCost_surmise_vec
cv_farmCost <- cv_farmCost_statQuo
N <- N0_statQuo
mu_A <- mu_A_statQuo
l_credit <- l_credit_statQuo
list_Q <- list()
for(i in 1:length(mu_farmCost_surmise_vec)){
  mu_farmCost_A <- mu_farmCost_surmise_vec[i]
  Qvec <- Q_supply(Pvec_lcu_MT, N, mu_A, mu_farmCost_A, k_statQuo, cv_farmCost, l_credit = 0)
  list_Q[[i]] <- Qvec
}
#---
df_Q <- as.data.frame(do.call(cbind, list_Q))
# colnames(df_Q) <- as.character(cv_1oh_vec)
colnames(df_Q) <- as.character(mu_farmCost_surmise_vec)
gathercols <- colnames(df_Q)
df_Q$`P (lcu/MT)` <- Pvec_lcu_MT
# df_Q <- df_Q %>% gather_("CV", "Q", gathercols)
df_Q <- df_Q %>% gather_("Mean Farm Cost (lcu/MT root)", "Q (MT)", gathercols)
#-------------
df_plot <- df_Q #data.frame(Q = Qvec, P_lcu = Pvec_lcu, lQ = log(Qvec), lP = log(Pvec_lcu))
gg <- ggplot(df_plot, aes(x = `P (lcu/MT)`, y = `Q (MT)`, group = `Mean Farm Cost (lcu/MT root)`,
                          color = `Mean Farm Cost (lcu/MT root)`))
gg <- gg + geom_point()
gg <- gg + geom_point(aes(x = P_root_lcu_MT_statQuo, y = Q_root_MT_day_statQuo), color="blue", size = 4)
gg <- gg + coord_cartesian(ylim = c(0, 7100))
gg
#======================================
# Factory parameters
Q_chip_MT_statQuo <- 350
MTRootsPerMTStarch <- 1 / 3.05
#N_chip_statQuo <- Q_chip_MT_statQuo / (convert_root_chip * mode_yield * mode_fsize)
Q_root_MT_day_statQuo <- 800
P_root_lcu_MT_statQuo <- 2500
P_starch_lcu_MT_statQuo <- 14000
#P_ethanol_lcu_ML_statQuo <- 
MTRootsPerMTStarch_statQuo <- 4.21
Q_starch_MT_day_statQuo <- Q_root_MT_day_statQuo / MTRootsPerMTStarch
Cost_rootProcessing_MTroot_statQuo <- 13500 / MTRootsPerMTStarch_statQuo - P_root_lcu_MT_statQuo
#Cost_rootProcessing_MTstarch_statQuo <- MTRootsPerMTStarch_statQuo * Cost_rootProcessing_MTroot_statQuo
beta_statQuo <- log(Cost_rootProcessing_MTroot_statQuo) / log(Q_root_MT_day_statQuo)
#======================================
fdstkToOutput_efficiency_statQuo <- MTRootsPerMTStarch_statQuo
#--
P_feedstock_lcu_MT_statQuo <- P_root_lcu_MT_statQuo
P_output_lcu_MToutput_statQuo <- P_starch_lcu_MT_statQuo
#--
P_output_lcu_MTfdstk_statQuo <- P_output_lcu_MToutput_statQuo / fdstkToOutput_efficiency_statQuo
#--
Q_feedstock_MT_day_statQuo <- Q_root_MT_day_statQuo
#--
Cost_fdstkProcessing_MTfdstk_statQuo <- Cost_rootProcessing_MTroot_statQuo
Cost_fdstkProcessing_MToutput_statQuo <- Cost_rootProcessing_MTstarch_statQuo
#--------------
FactoryNR_lcu_day_statQuo <- FactoryNetRevenue(Q_feedstock = Q_feedstock_MT_day_statQuo,
                                               P_output_lcu_Qoutput = P_output_lcu_MToutput_statQuo,
                                               fdstkToOutput_efficiency = fdstkToOutput_efficiency_statQuo,
                                               P_feedstock_lcu_Q = P_feedstock_lcu_MT_statQuo,
                                               beta = beta_statQuo)
FactoryNR_lcu_day_statQuo
Q_feedstock_MT_day_statQuo / fdstkToOutput_efficiency_statQuo * (P_starch_lcu_MT_statQuo - 13500)
#Revenue <- Q_feedstock_MT_day_statQuo / fdstkToOutput_efficiency_statQuo * P_output_lcu_MToutput_statQuo
# Revenue <- Q_feedstock_MT_day_statQuo * P_output_lcu_MTfdstk_statQuo
# Cost <- Q_feedstock_MT_day_statQuo * (P_feedstock_lcu_MT_statQuo + Cost_fdstkProcessing_MTfdstk_statQuo)
# NR_day <- Revenue - Cost

FactoryNRstar_lcu_day_statQuo <- FactoryNRstar(Q_feedstock = Q_feedstock_MT_day_statQuo,
                                               P_output_lcu_Qoutput = P_output_lcu_MToutput_statQuo,
                                               P_feedstock_lcu_Q = P_feedstock_lcu_MT_statQuo,
                                               beta = beta_statQuo,
                                               mu_Cq = mu_Cq_statQuo,
                                               cv_Cq = cv_Cq_statQuo,
                                               k = k_statQuo)
FactoryNRstar_lcu_day_statQuo

Qstar_statQuo <- FactoryQstar(P_output_lcu_Qoutput = P_output_lcu_MToutput_statQuo,
                          P_feedstock_lcu_Q = P_feedstock_lcu_MT_statQuo, 
                          fdstkToOutput_efficiency = fdstkToOutput_efficiency_statQuo, 
                          beta = beta_statQuo)
Qstar_statQuo

#====================================
pct_factryCost_reduction_vec <- -seq(0.01, 0.2, 0.01)
pct_farmCost_change_vec <- seq(0.01, 0.2, 0.01)
#--------------
n_pctFactryCostRed <- length(pct_factryCost_reduction_vec)
n_pctFarmCostRed <- length(pct_farmCost_change_vec)
FactoryNRday_new_QstatQuo_mat <- matrix(NA, n_pctFactryCostRed, n_pctFarmCostRed)
FactoryNRday_new_PstatQuo_mat <- matrix(NA, n_pctFactryCostRed, n_pctFarmCostRed)
FactoryNRday_pctChng_QstatQuo_mat <- matrix(NA, n_pctFactryCostRed, n_pctFarmCostRed)
FactoryNRday_pctChng_PstatQuo_mat <- matrix(NA, n_pctFactryCostRed, n_pctFarmCostRed)
for(i in 1:n_pctFactryCostRed){
  #pct_factryCost_reduction <- pct_factryCost_reduction_vec[i]
  #CostPerQ_processing <- Cost_fdstkProcessing_MTfdstk_statQuo * (1 + pct_factryCost_reduction)
  pp_reduc <- pct_factryCost_reduction_vec[i]
  beta <- beta_statusQuo + pp_reduc
  for(j in 1:n_pctFarmCostRed){
    pct_farmCost_change <- pct_farmCost_change_vec[j]
    #--------------------------
    mu_Cq_new <- mu_Cq_statQuo * (1 + pct_farmCost_change)
    #--------------------------
    # New feedstock price to pay in order to maintain Q_statQuo
    # P_feedstock_lcu_MT_new_QstatQuo <- P_supply(Q = Q_feedstock_MT_day_statQuo,
    #                                             N = N0_statQuo,
    #                                             mu_A = mu_A_statQuo,
    #                                             mu_farmCost_A,
    #                                             k = k_statQuo,
    #                                             cv_farmCost = cv_farmCost_statQuo,
    #                                             l_credit = l_credit_statQuo)
    # New optimal factory feedstock quantity given change in farm productivity
    Qstar_new <- FactoryQstar(P_output_lcu_Qoutput = P_output_lcu_MToutput_statQuo,
                          P_feedstock_lcu_Q = P_feedstock_lcu_MT_statQuo, 
                          fdstkToOutput_efficiency = fdstkToOutput_efficiency_statQuo, 
                          beta = beta_statQuo,
                          mu_Cq = mu_Cq_new,
                          cv_Cq = cv_farmCost_statQuo, 
                          k = k_statQuo)
    P_feedstock_lcu_MT_new_QstatQuo
    P_feedstock_lcu_MT_statQuo
    #--------
    # New Factory daily NR at new P same Q
    P_feedstock_lcu_Q <- P_feedstock_lcu_MT_new_QstatQuo
    FactoryNR_lcu_day_new_QstatQuo <- FactoryNetRevenue(Q_feedstock = Q_feedstock_MT_day_statQuo,
                                                        P_output_lcu_Qoutput = P_output_lcu_MToutput_statQuo,
                                                        fdstkToOutput_efficiency = fdstkToOutput_efficiency_statQuo,
                                                        P_feedstock_lcu_Q,
                                                        CostPerQ_processing)
    FactoryNR_lcu_day_new_QstatQuo
    FactoryNR_lcu_day_statQuo
    FactoryNR_pctChng_QstatQuo <- 100 * (FactoryNR_lcu_day_new_QstatQuo - FactoryNR_lcu_day_statQuo) / FactoryNR_lcu_day_statQuo
    FactoryNR_pctChng_QstatQuo
    #--------------------------
    # New quantity obtained if paying the same price P_statQuo
    Q_feedstock_MT_day_new_PstatQuo <- Q_supply(P = P_feedstock_lcu_MT_statQuo,
                                                N = N0_statQuo,
                                                mu_A = mu_A_statQuo,
                                                mu_farmCost_A,
                                                k = k_statQuo,
                                                cv_farmCost = cv_farmCost_statQuo,
                                                l_credit = l_credit_statQuo)
    Q_feedstock_MT_day_new_PstatQuo
    Q_feedstock_MT_day_statQuo
    #--------
    # New Factory daily NR at new Q same P
    Q_feedstock <- Q_feedstock_MT_day_new_PstatQuo
    FactoryNR_lcu_day_new_PstatQuo <- FactoryNetRevenue(Q_feedstock,
                                                        P_output_lcu_Qoutput = P_output_lcu_MToutput_statQuo,
                                                        fdstkToOutput_efficiency = fdstkToOutput_efficiency_statQuo,
                                                        P_feedstock_lcu_Q = P_feedstock_lcu_MT_statQuo,
                                                        CostPerQ_processing)
    FactoryNR_lcu_day_new_PstatQuo
    FactoryNR_lcu_day_statQuo
    FactoryNR_pctChng_PstatQuo <- 100 * (FactoryNR_lcu_day_new_PstatQuo - FactoryNR_lcu_day_statQuo) / FactoryNR_lcu_day_statQuo
    FactoryNR_pctChng_PstatQuo
    #-----------
    FactoryNRday_pctChng_QstatQuo_mat[i, j] <- FactoryNR_pctChng_QstatQuo
    FactoryNRday_pctChng_PstatQuo_mat[i, j] <- FactoryNR_pctChng_PstatQuo
    FactoryNRday_new_QstatQuo_mat[i, j] <- FactoryNR_lcu_day_new_QstatQuo
    FactoryNRday_new_PstatQuo_mat[i, j] <- FactoryNR_lcu_day_new_PstatQuo
    #-----------
  }
}
#-----------------
xtick_labs <- -pct_factryCost_reduction_vec * 100
ytick_labs <- pct_farmCost_change_vec * 100
#-----------------
inMat <- FactoryNRday_pctChng_QstatQuo_mat
surface <- list(x = xtick_labs,
                y = ytick_labs,
                z = inMat)
plot.surface(surface, type = "C",
             xlab = "Pct factory cost reduction",
             ylab = "Pct farm cost increase", col = cm.colors(25))
title(main = "Pct Change in Factory Net Revenue \nholding feedstock quantity constant",
      cex.main = 1)
#-----------------
inMat <- FactoryNRday_pctChng_PstatQuo_mat
surface <- list(x = xtick_labs,
                y = ytick_labs,
                z = inMat)
plot.surface(surface, type = "C",
             xlab = "Pct factory cost reduction",
             ylab = "Pct farm cost increase", col = cm.colors(25))
title(main = "Pct Change in Factory Net Revenue \nholding feedstock price constant",
      cex.main = 1)














# image.plot(FactoryNRday_pctChng_PstatQuo_mat, col = cm.colors(64, alpha = 1), axes = T)
# contour(inMat, lwd = 2, labcex = 1, add = T)


df_NR <- as.data.frame(inMat)
colnames(df_NR) <- as.character(pct_farmCost_change_vec)
gathercols <- colnames(df_NR)
df_NR$`Pct chng factory cost` <- as.character(pct_factryCost_reduction_vec)
df_NR <- df_NR %>% gather_("Pct chng farm cost", "chng NR", gathercols)
#-------
df_plot <- df_NR
df_plot %>% sapply(class)
df_plot$`Pct chng factory cost` <- as.numeric(df_plot$`Pct chng factory cost`)
df_plot$`Pct chng farm cost` <- as.numeric(df_plot$`Pct chng farm cost`)

# gg <- ggplot(df_plot, aes(x = `chng C`, y = `chng h`, z = `chng NR`))
# gg <- gg + geom_contour()

gg <- ggplot()
gg <- gg + geom_raster(data = df_plot, aes(x = `Pct chng factory cost`, y = `Pct chng farm cost`, fill = `chng NR`), alpha = 0.7)
gg <- gg + scale_fill_gradient(limits = range(df_plot$`chng NR`), high = 'purple', low = 'white')
gg <- gg + labs(fill = "chng NR")
gg <- gg + geom_contour(data = df_plot, aes(x = `Pct chng factory cost`, y = `Pct chng farm cost`, z = `chng NR`, color = ..level..))#, size = 1.5, binwidth = 0.3)
gg <- gg + scale_color_gradient(limits = range(df_plot$`chng NR`), high = 'green', low = 'white')
gg <- gg + labs(color = "chng NR")
gg <- gg + theme_minimal()
gg <- gg + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank())
# gg <- gg + xlab("Change in standard deviation")
# gg <- gg + ylab("Change in mean")
gg




#--
#Regression
colnames(df)

rm_vec <- c("Harvest Diesel fuel used  (L/rai)", "Land Prep Diesel fuel used (L/rai)",
            "Planting reparation rate (%)", "Landfill organic waste", "Paraquat (L/rai)", "Chicken manure (ton/rai)")
regrsrs_str1 <- c("Farm size (rai)", "Surface occupied by cassava (rai)", "Crop duration (month)")
#regrsrs_str1 <- c("Farm size (rai)", "Crop duration (month)")
regrsrs_str1 <- paste0("`", regrsrs_str1, "`", collapse = " + ")
regrsrs_str2 <- paste0("`", setdiff(colnames(df)[6:17], rm_vec), "`", collapse = " + ")
regrsrs <- paste(regrsrs_str1, regrsrs_str2, sep = " + ")
this_formula <- as.formula(paste("`Yield (ton/rai) 1 ha = 6.25 rai` ~ ", regrsrs)[1])
df_l <- as.data.frame(apply(df[, -1], 2, log))
df_l <- df_l[-which(is.infinite(df_l$`K (kg/rai)`)), ]
df_l <- df_l[-which(is.infinite(df_l$`Glyphosate (L/rai)`)), ]

linmod <- lm(this_formula, df)
#---------------------
summod <- summary(linmod)
print(summod)
#---------------------
pvals <- as.numeric(summod$coefficients[, 4])
