### Codigos para generar los graficos y procesar informaci?n del proyecto BID
### 09-13-2018
### Autor Carlos Edo Gonzalez

### https://www.r-graph-gallery.com/4-barplot-with-error-bar/
## limpiar consola
g=gc;rm(list = ls())

### librerias 
suppressMessages(library(reshape))
suppressMessages(library(ggplot2))
suppressMessages(library(plyr))
suppressMessages(library(tidyr))
suppressMessages(library(grid))
suppressMessages(library(gridExtra))
suppressMessages(library(dplyr))
suppressMessages(library(Hmisc))
suppressMessages(library(rgdal))
suppressMessages(library(RColorBrewer))
suppressMessages(library(maptools))
suppressMessages(library(gridExtra))
suppressMessages(library(sp))
suppressMessages(library(maptools))
suppressMessages(library(maps))
suppressMessages(library(raster))
suppressMessages(library(patchwork))


#Definir directorio de trabajo
setwd("//dapadfs.cgiarad.org/workspace_cluster_6/Socioeconomia/GF_and_SF/BID_2/ResultsIMPACT/AggregationBID")
#list.files()
#Direcci?n graficos
grd<-"//dapadfs.cgiarad.org/workspace_cluster_6/Socioeconomia/GF_and_SF/BID_2/BID2version/"
#------------------------------------------------------------------------------
country_vec1 <- c("Argentina", "Bolivia", "Dominican Republic", "Ecuador", "El Salvador", "Guatemala",
                  "Honduras", "Jamaica", "Nicaragua")
country_vec2 <- c("Peru", "Costa Rica", "Colombia", "Mexico", "Panama", "Uruguay")
#------------------------------------------------------------------------------
all_dssatCrops <- c("Irrigated Maize", "Rainfed Maize",
                    "Rainfed Bean", "Irrigated Bean",
                    "Rainfed Rice", "Irrigated Rice",
                    "Rainfed Wheat", "Irrigated Wheat",
                    "Rainfed Soybean", "Irrigated Soybean")
list_relevant_dssatCrops <- list()
list_relevant_dssatCrops[["Peru"]] <- setdiff(all_dssatCrops, c("Rainfed Wheat", "Irrigated Maize",
                                                                "Rainfed Soybean", "Irrigated Soybean",
                                                                "Irrigated Wheat"))
list_relevant_dssatCrops[["Costa Rica"]] <- c("Rainfed Maize", "Rainfed Bean",
                                              "Irrigated Maize", "Irrigated Rice")
list_relevant_dssatCrops[["Colombia"]] <- c("Rainfed Bean", "Rainfed Wheat", "Rainfed Maize", "Irrigated Rice")
list_relevant_dssatCrops[["Mexico"]] <- setdiff(all_dssatCrops, c("Rainfed Wheat", "Rainfed Soybean",
                                                "Irrigated Soybean", "Rainfed Rice", "Irrigated Rice"))
list_relevant_dssatCrops[["Panama"]] <- c("Rainfed Maize", "Rainfed Bean",
                                          "Irrigated Maize", "Irrigated Rice",
                                          "Rainfed Rice")
list_relevant_dssatCrops[["Uruguay"]] <- c("Irrigated Maize", "Irrigated Rice", "Irrigated Soybean", "Irrigated Wheat")

list_relevant_dssatCrops[["Nicaragua"]] <- c("Irrigated Maize", "Rainfed Maize", "Rainfed Bean", "Irrigated Bean",
                                             "Rainfed Rice", "Irrigated Rice")
#------------------------------------------------------------------------------
all_ecoCrops <- c("Cassava", "Potato", "Yam", "Banana", "Sugarcane", "Wheat", "Coffee\nArabica", "Coffee\nRobusta")
list_relevant_ecoCrops <- list()
list_relevant_ecoCrops[["Peru"]] <-  c("Cassava", "Potato", "Yam", "Banana", "Sugarcane")
list_relevant_ecoCrops[["Costa Rica"]] <- c("Banana", "Yam", "Cassava", "Sugarcane")
list_relevant_ecoCrops[["Colombia"]] <- c("Cassava", "Potato", "Yam", "Banana", "Sugarcane")
list_relevant_ecoCrops[["Mexico"]] <- c("Cassava", "Potato", "Yam", "Banana", "Sugarcane")
list_relevant_ecoCrops[["Uruguay"]] <- NULL
list_relevant_ecoCrops[["Panama"]] <- c("Banana", "Yam", "Cassava")
list_relevant_ecoCrops[["Bolivia"]] <- c("Cassava", "Potato", "Yam", "Banana", "Sugarcane", "Wheat")
#------------------------------------------------------------------------------
list_relevant_ecoCrops_bar <- list()
list_relevant_ecoCrops_bar[["Peru"]] <-  c(list_relevant_ecoCrops[["Peru"]], "Coffee\nArabica", "Coffee\nRobusta")
list_relevant_ecoCrops_bar[["Costa Rica"]] <- c(list_relevant_ecoCrops[["Costa Rica"]], "Coffee\nArabica", "Coffee\nRobusta")
list_relevant_ecoCrops_bar[["Colombia"]] <- c(list_relevant_ecoCrops[["Colombia"]], "Coffee\nArabica", "Coffee\nRobusta")
list_relevant_ecoCrops_bar[["Mexico"]] <- c(list_relevant_ecoCrops[["Mexico"]], "Coffee\nArabica", "Coffee\nRobusta")
list_relevant_ecoCrops_bar[["Uruguay"]] <- NULL
list_relevant_ecoCrops_bar[["Panama"]] <- c(list_relevant_ecoCrops[["Panama"]], "Coffee\nArabica", "Coffee\nRobusta")
list_relevant_ecoCrops_bar[["Bolivia"]] <- c(list_relevant_ecoCrops[["Bolivia"]], "Coffee\nArabica", "Coffee\nRobusta")
#------------------------------------------------------------------------------
all_IMPACTCrops <- c("Bean", "Maize", "Rice", "Soybean", "Wheat")
list_relevant_IMPACTCrops <- list()
list_relevant_IMPACTCrops[["Peru"]] <- all_IMPACTCrops
list_relevant_IMPACTCrops[["Costa Rica"]] <- setdiff(all_IMPACTCrops, c("Soybean", "Wheat"))
list_relevant_IMPACTCrops[["Colombia"]] <- all_IMPACTCrops
list_relevant_IMPACTCrops[["Mexico"]] <- all_IMPACTCrops
list_relevant_IMPACTCrops[["Panama"]] <- all_IMPACTCrops
list_relevant_IMPACTCrops[["Uruguay"]] <- all_IMPACTCrops
################################ Cargando datos ######################################

#Cargar marco de datos principal
md<-read.csv("Phase2/V2_allRegions.csv",header=T)

#Hacer un subconjunto que s?lo contenga las variables de mi inter?s
mdsub<-subset(md,md$impactparameter=="QSXAgg -- Total Production" | 
                md$impactparameter=="TAreaXAgg -- Total Area" |
                md$impactparameter== "QNXAgg -- Net Trade" | 
                md$impactparameter== "QDXAgg -- Total Demand" |
                md$impactparameter=="TYldXAgg -- Total Yield")

#write.csv(mdsub, "mdsub.csv")
#mdsub<-read.csv("mdsub.csv", header = T)

mdsub$impactparameter<- as.character(mdsub$impactparameter)
mdsub$scenario<- as.character(mdsub$scenario)
mdsub$commodity<- as.character(mdsub$commodity)
mdsub$region<- as.character(mdsub$region)
mdsub$productiontype<- as.character(mdsub$productiontype)

#spanish
# mdsub$impactparameter<-revalue(mdsub$impactparameter, c("QDXAgg -- Total Demand"= "Demanda Total",#Demanda Total", #Total Demand
#                                                         "QNXAgg -- Net Trade"= "Comercio Neto",#Comercio Neto",
#                                                         "QSXAgg -- Total Production"= "Producción Total", #"Producción Total", #Total Production
#                                                         "TAreaXAgg -- Total Area"= "Area Total",# Area Total", # Total Area
#                                                         "TYldXAgg -- Total Yield"="Rendimiento Total ")) #Total Yield

# english
mdsub$impactparameter<-revalue(mdsub$impactparameter, c("QDXAgg -- Total Demand"= "Total Demand",#Demanda Total", #Total Demand
                                                        "QNXAgg -- Net Trade"= "Net Trade",#Comercio Neto",
                                                        "QSXAgg -- Total Production"= "Total Production", #"Producción Total", #Total Production
                                                        "TAreaXAgg -- Total Area"= "Total Area",# Area Total", # Total Area
                                                        "TYldXAgg -- Total Yield"="Total Yield")) #Total Yield

#Hacer un subconjunto que s?lo contenga los cinco cultivos analizados
mdsubcrop<-subset(mdsub,mdsub$commodity=="jbean"| mdsub$commodity=="jmaiz" |
                    mdsub$commodity=="jrice" | mdsub$commodity=="cs" |
                    mdsub$commodity=="jwhea" | mdsub$commodity=="cbean" |
                    mdsub$commodity=="cmaiz" | mdsub$commodity=="crice" |
                    mdsub$commodity=="js" | mdsub$commodity=="cwhea")


alc<- mdsubcrop[grep(pattern = "LAC-",x = mdsubcrop$region, ignore.case = T),]
alc$region<-  gsub("^LAC-", "",alc$region)

#reshape
#spanish
mdwide<- alc %>% spread(year, Val)
# #spanish
# mdwide$commodity<- revalue(mdwide$commodity, c("cbean"="Frijol",# "Bean", #"Frijol"
#                                                "cmaiz"= "Maiz" ,#"Maize", #"Maiz"
#                                                "crice"= "Arroz",#"Rice", #"Arroz"
#                                                "cs"=  "Soya",#  "Soybean", #"Soya"
#                                                "cwhea"="Trigo" ,# "Wheat",#"Trigo"
#                                                "jbean"= "Frijol",#"Bean", #"Frijol"
#                                                "jmaiz"= "Maiz",#"Maize", #"Maiz"
#                                                "jrice"= "Arroz",#"Rice", #"Arroz"
#                                                "js"= "Soya",# "Soybean",# "Soya"
#                                                "jwhea"= "Trigo"))#"Wheat" ))# "Trigo"

#english
mdwide$commodity<- plyr::revalue(mdwide$commodity, c("cbean"="Bean",# "Bean", #"Frijol"
                                               "cmaiz"= "Maize" ,#"Maize", #"Maiz"
                                               "crice"= "Rice",#"Rice", #"Arroz"
                                               "cs"=  "Soybean",#  "Soybean", #"Soya"
                                               "cwhea"="Wheat" ,# "Wheat",#"Trigo"
                                               "jbean"= "Bean",#"Bean", #"Frijol"
                                               "jmaiz"= "Maize",#"Maize", #"Maiz"
                                               "jrice"= "Rice",#"Rice", #"Arroz"
                                               "js"= "Soybean",# "Soybean",# "Soya"
                                               "jwhea"= "Wheat"))#"Wheat" ))# "Trigo"


mdwide<-data.frame(mdwide,"Cat"=ifelse(mdwide$scenario=="NoCC","NoCC","CC"))

rend_all<- mdwide[,-c(6:20)]
rend_all$Percentage_Change<-((rend_all$X2050-rend_all$X2020)/rend_all$X2020)*100
file_name <- paste(grd, "Data.csv", sep = "")
#write.csv(rend_all, file_name)

#============================================================
#============================================================
rend_all <- read.csv(file_name, header = T, stringsAsFactors = F)
#============================================================
#============================================================

########### ajustes barras con whisker

rr <- rend_all %>% dplyr::select(impactparameter,scenario,commodity,region, Cat,Percentage_Change) %>%
  data.frame()
#rr$Cat<- as.character(rr$Cat)
pots <- as.character(unique(rr$region))
crops <- as.character(unique(rr$commodity))

### standard deviation 
vv <- rr %>% group_by(region,commodity, impactparameter,Cat) %>%
  summarise(n = n(), mean=mean(Percentage_Change,na.rm=T),sd=sd(Percentage_Change))

vv$Cat[which(vv$Cat == "CC")] <- "Climate Change"
vv$Cat[which(vv$Cat == "NoCC")] <- "No Climate Change"

# pl<-NULL
# i=6

translate_IMPACTgraphic <- function(df_plot){
    u <- df_plot$commodity
    df_plot$commodity[which(u == "Bean")] <- "Frijol"
    df_plot$commodity[which(u == "Maize")] <- "Maíz"
    df_plot$commodity[which(u == "Rice")] <- "Arroz"
    df_plot$commodity[which(u == "Soybean")] <- "Soya"
    df_plot$commodity[which(u == "Wheat")] <- "Trigo"
    u <- df_plot$Cat
    df_plot$Cat[which(u == "Climate Change")] <- "Con Cambio Climático"
    df_plot$Cat[which(u == "No Climate Change")] <- "Sin Cambio Climático"
    u <- df_plot$impactparameter
    df_plot$impactparameter[which(u == "Total Demand")] <- "Demanda Total"
    df_plot$impactparameter[which(u == "Total Area")] <- "Area Total"
    df_plot$impactparameter[which(u == "Total Yield")] <- "Rendimiento Total"
    df_plot$impactparameter[which(u == "Total Production")] <- "Producción Total"
    
    return(df_plot)
}


country_vec <- country_vec2
lang_vec <- c("ENG", "ESP")
for (i in 1:length(country_vec)){
  this_country <- country_vec[i]
  relevant_IMPACTCrops <- list_relevant_IMPACTCrops[[this_country]]
  for(l in 1:2){
    lang <- lang_vec[l]
    if(lang == "ESP"){ylab <- "Cambio (%)"}
    if(lang == "ENG"){ylab <- "Change (%)"}
    
  #out <- c("Wheat","Soybean", "Rice", "Bean", "Maize")#"Soybean", "Wheat"
  #out<- c("Soybean","Rice", "Bean")#"Soya", "Trigo" 
  # out<- c("Wheat","Soybean")#"Soybean", "Wheat"

  #vv <- vv %>% filter(!commodity %in% out) 
  # vv$commodity<- revalue(x =vv$commodity, c("Maize" ="Corn"))

  # df_plot <- vv %>% filter(Cat!="NoCC") %>% 
  #   filter(impactparameter!="Net Trade") %>% 
  #   filter(region==pots[i]) %>% data.frame()
  df_plot <- vv %>% filter(impactparameter!="Net Trade") %>% 
    filter(region==this_country) %>% data.frame()
  df_plot$sd[which(is.nan(df_plot$sd))] <- NA
  
  df_plot <- subset(df_plot, commodity %in% relevant_IMPACTCrops)
  
  if(lang == "ESP"){
    df_plot <- translate_IMPACTgraphic(df_plot)
  }
  # tiff(filename=paste(grd,"Test_",pots[i],"_country_reportNew_ajustwhisker.tiff",sep=""), 
  #      width = 14, height = 7, units = 'in', res = 200)
  
  png(filename= paste0(grd, this_country,"_IMPACT_", lang, ".png"), 
      width = 14, height = 7, units = 'in', res = 300)

  gg <- ggplot(df_plot, aes(x = commodity, y = mean, fill = Cat))
  #gg <- gg + geom_bar(stat="identity", color = "black")
  gg <- gg + geom_bar(stat="identity", width = 0.7,
                      position = position_dodge(),
                      color = "black")
  gg <- gg + facet_wrap(~impactparameter, ncol=4)
  gg <- gg + geom_hline(yintercept = 0, color = "red", lwd = 0.5)
  gg <- gg + geom_errorbar(aes(x=commodity, ymin=mean-sd, ymax=mean+sd), width=0.4, colour="black", alpha=0.9, size=1,
                           position = position_dodge(0.7))
  # gg <- gg + geom_point(aes(shape=Cat), data=(subset(vv,vv$region== pots[i]
  #                                                          & vv$impactparameter !="Net Trade" 
  #                                                          & vv$Cat== "NoCC")), alpha = 0.4,size=4)+
                    #guides(fill=FALSE)+
  gg <- gg + theme_bw()
  gg <- gg + theme(#axis.text.x = element_text(angle = 0, hjust = 1),
                      legend.position = "top",
                      legend.spacing.x = unit(1.0, 'cm'),
                      legend.title=element_blank(),
                      axis.text.x= element_text(angle = 60, hjust = 1, face = "bold", size = 15),
                      axis.text.y= element_text(face = "bold", size = 14),
                      axis.title.y=element_text(face = "bold", size = 18),
                      axis.title.x = element_blank())+
                    theme(legend.text=element_text(size=18),
                          strip.text.x = element_text(size = 16, angle = 0))
  gg <- gg + labs(y = ylab) #"percentage change" "Cambio porcentual"
  pl[[i]]<- print(gg)
  dev.off()
  print(i)
}   
}
################################ Graficos de IMPACT model Net Trade ###############################

datos<- subset(rend_all,rend_all$impactparameter=="Net Trade" ) #"Comercio Neto" "Net Trade" 

# datos<- datos %>% dplyr::filter(.,!commodity %in% croput )
datmin<- datos %>% filter(scenario!="NoCC")
datmin<- aggregate(datmin[,paste("X20",20:50,sep="")],
                   by=list(datmin$region,datmin$commodity),FUN=min)
datmin<- datmin %>% gather("time","datmin", 3:ncol(datmin))
names(datmin)<-c("Region","Crop","time","datmin")
datmin$time<-  gsub("X", "",datmin$time)
datmin$time<- as.numeric(datmin$time)

# datmed<- aggregate(datos[,paste("X20",20:50,sep="")],
#                    by=list(datos$region,datos$commodity),FUN=median)

datmed<- datos %>% dplyr::filter(scenario=="NoCC") %>% 
  dplyr::select(.,-c(impactparameter,scenario,productiontype, Cat, Percentage_Change)) %>% 
  tidyr::gather(time,datmed,3:ncol(.))

names(datmed)<-c("Crop","Region","time","datmed")

# datmed<- datmed %>% gather("time","datmed", 3:ncol(datmed))
datmed$time<-  gsub("X", "", datmed$time)
datmed$time<- as.integer(datmed$time)

datmax<- datos %>% filter(scenario!="NoCC")
datmax<-aggregate(datmax[,paste("X20",20:50,sep="")],
                  by=list(datmax$region,datmax$commodity),FUN=max)
datmax<- datmax %>% gather("time","datmax", 3:ncol(datmax))
names(datmax)<-c("Region","Crop","time","datmax")
datmax$time<-  gsub("X", "",datmax$time)
datmax$time<- as.numeric(datmax$time)

extremos<-merge(datmin,datmax)
datost<-merge(extremos,datmed)


translate_IMPACTnetTradeGraphic <- function(df_plot){
  u <- df_plot$Crop
}

#py<- NULL

##### croput<- c("Soybean", "Wheat")
#i=6
country_vec <- country_vec2
lang_vec <- c("ENG", "ESP")
for (i in 1:length(country_vec)){
this_country <- country_vec[i]
relevant_IMPACTCrops <- list_relevant_IMPACTCrops[[this_country]]
  datost<- datost %>% filter(Crop %in% relevant_IMPACTCrops)
  datmin<- datmin %>%  filter(Crop %in% relevant_IMPACTCrops)
  datmax<- datmax %>%  filter(Crop %in% relevant_IMPACTCrops)
for(l in 1:2){
  lang <- lang_vec[l]
  if(lang == "ESP"){
    
  }
  
}
  
  # tiff(filename=paste(grd,"Test_",pots[i],"_net_tradeNewVenganza.tiff",sep=""), 
  #      width = 10, height = 7, units = 'in', res = 100)
  gg <- ggplot(data=subset(datost,datost$Region==this_country),
         aes(time,datmed,group=Crop,color=Crop)) + 
    geom_line(linetype="dashed",size=1)+
    geom_ribbon(aes(ymin=datmin,ymax=datmax,
                    fill=Crop,colour=Crop,
                    linetype=NA),
                alpha=0.1) +
    labs(y="Net trade ('000 MT)",x="Año")+  # Net trade  Comercio Neto ('000 MT)
    theme(legend.position="bottom", 
          legend.text=element_text(size=20),
          legend.spacing.x = unit(1.0, 'cm'),
          axis.text= element_text(face = "bold.italic", size = 20),
          axis.title=element_text(face = "bold.italic", size = 20),
          legend.title=element_blank())
  #py[[i]]<-print(gg)
  
  this_filename <- paste0(grd, this_country,"_netTrade_", lang, ".png")
  ggsave(this_filename, width = 10, height = 7, units = "in")
  #dev.off()
  print(i)
  print(this_country)
}  



################################ Graficos de DSSAT por pa?s ############################################################################

map <- "//dapadfs.cgiarad.org/workspace_cluster_6/Socioeconomia/GF_and_SF/BID_2/Shape_files/"
alc <- shapefile(paste0(map,"Latino_America1.shp"))
fpuMaps<- shapefile(paste0(map,"FPU_Latinoamerica.shp"))

grd1<- ("//dapadfs.cgiarad.org/workspace_cluster_6/Socioeconomia/GF_and_SF/BID_2/Pixels/VariesSelect/Test")
treat<- c("Irrigated","Rainfed")
crops<- c("Rice","Bean","Wheat","Maize","Soybean") 
gcm <- c("bcc_csm1_1", "bnu_esm","cccma_canesm2", "gfld_esm2g", "inm_cm4", "ipsl_cm5a_lr",
         "miroc_miroc5", "mpi_esm_mr", "ncc_noresm1_m")
grdw<- ("//dapadfs.cgiarad.org/workspace_cluster_6/Socioeconomia/GF_and_SF/BID_2/YieldsWeight/Test/")
#objetos
sys<- c( "IRRI", "RA")

Map_LatinAmerica1<- fortify(alc)
cfpuData<- (fpuMaps@data); cfpuData<- cfpuData[,c("New_FPU", "Region_Nam")]
cfpeCen<-  (fpuMaps@data); cfpeCen<- cfpeCen[,c("New_FPU", "Region_BID")]
colnames(cfpuData)<- c("FPU", "Country")
colnames(cfpeCen)<- c("FPU", "BIDregions")

cfpeCenV2<-  (fpuMaps@data)
cfpeCenV2<- cfpeCenV2[,c("New_FPU","Region_Nam", "Region_BID")]


p<- list()


## Start grafico de barras
dataF<- list.files(path = grdw,pattern= ".csv",full.names = T)
dataF<- lapply(dataF,read.csv,stringsAsFactors = F)
dataF<- do.call(rbind,dataF); dataF$X<- NULL
cfiles<- dataF 
cfiles<- cfiles %>% spread("year", "Area_Wgtd_Mean")

# cfiles[,"ymean"] <- apply(cfiles[, 5:ncol(cfiles)], 1, mean)

cfiles[,"ymean"] <-rowMeans(cfiles[, 5:ncol(cfiles)], na.rm = T)

cfiles<- cfiles[,c("crop", "FPU", "sys", "sce","ymean")]
cfiles<- cfiles %>% spread(sce, ymean)

gcm<-  colnames(cfiles)[4:12]
# g=2

h<- lapply(1:length(gcm),function(g){
  px<- cfiles %>% dplyr::select(crop,FPU, sys, gcm[g],WFD) %>% 
    mutate(.,change=((.[,4]- .[,5])/.[,5])*100, sce=gcm[g]) %>%
    dplyr::select(crop, FPU, sys, change,sce)
  
})
h<- do.call(rbind,h)
h<- h[!is.na(h$change),]

# define a function to remove outliers
FindOutliers <- function(data) {
  lowerq = quantile(data)[2]
  upperq = quantile(data)[4]
  iqr = upperq - lowerq 
  #Or use IQR(data)
  # we identify extreme outliers
  extreme.threshold.upper = (iqr * 3) + upperq
  extreme.threshold.lower = lowerq - (iqr * 3)
  result <- which(data > extreme.threshold.upper | data < extreme.threshold.lower)
}


# use the function to identify outliers
temp <- FindOutliers(h$change)
cfOut<- h[temp,]
cfilesNEt<- h[-temp,]
cfilesNEt$sys<- plyr::revalue(cfilesNEt$sys, c("IRRI"="Irrigated","RA"="Rainfed")) #Irrigated Rainfed "Irrigado" "Secano"



# for (i in 4: dim(tc_an_all)[2]) {
#       tc_an_all[which(tc_an_all[,i]>q),i]=q
# }

cfilesJoin<- left_join(cfilesNEt, cfpuData, by=("FPU"))

# cfilesNEt$sys<- plyr::revalue(cfilesNEt$sys, c("IRRI"="Irrigated","RA"="Rainfed"))
# cfilesJoin<- left_join(cfilesNEt, cfpuData, by=("FPU"))

### standard deviation 
qq<- cfilesJoin %>% dplyr::group_by(crop,sys,Country) %>%
  dplyr::summarise(n=n(), mean=mean(change,na.rm=T),sd=sd(change))
pots<- unique(cfilesJoin$Country)


# qq$crop<- revalue(qq$crop, c("Bean"="Fríjol",# "Bean", #"Frijol"
#                                                "Maize"= "Maíz" ,#"Maize", #"Maiz"
#                                                "Rice"= "Arroz",#"Rice", #"Arroz"
#                                                "Soybean"=  "Soya",#  "Soybean", #"Soya"
#                                                "Wheat"="Trigo" ))#"Wheat" ))# "Trigo"

translate_dssatGraphic <- function(df_plot){
    u <- df_plot$sys
    df_plot$sys[which(u == "Rainfed")] <- "De secano"
    df_plot$sys[which(u == "Irrigated")] <- "Bajo Riego"
    u <- df_plot$crop
    df_plot$crop[which(u == "Bean")] <- "Frijol"
    df_plot$crop[which(u == "Maize")] <- "Maíz"
    df_plot$crop[which(u == "Rice")] <- "Arroz"
    df_plot$crop[which(u == "Soybean")] <- "Soya"
    df_plot$crop[which(u == "Wheat")] <- "Trigo"
return(df_plot)
}

#---------------------------------
# Choose nice colors for dssat bar chart
# n <- 2
# bag_of_colors <- randomcoloR::distinctColorPalette(k = 5 * n)
# sys_color_vec_new <- sample(bag_of_colors, n)
sys_color_vec_fixed <- c("#8F94DA", "#88E65B")
#---------------------------------
#lang <- "ESP" #("ENG" or "ESP")
country_vec <- country_vec2
for(p in 1:length(country_vec)){
  this_country <- country_vec[p]
  #relevant_dssatCrops <- list_relevant_dssatCrops[[this_country]]
  for(l in 1:2){
    lang <- lang_vec[l]
    if(lang == "ESP"){
      ylab <- "Cambio en rendimiento (%)"
    }
    if(lang == "ENG"){
      ylab <- "Change in yield (%)"
    }
    
    cfilesProof<- qq %>% filter(., Country==this_country) %>% filter(n>1)
    cfilesProof$sysCrop <- paste(cfilesProof$sys, cfilesProof$crop)
    #cfilesProof <- cfilesProof %>% filter(sysCrop %in% relevant_dssatCrops)
    # cfilesProof[which(sys=="Irrigated" & which(crop=="Bean")]
    # cfilesProof <- cfilesProof %>% filter(sys!="Irrigated" | crop!="Bean")
    
    cfilesProof$sysCrop <- NULL
    df_plot_irr <- as.data.frame(subset(cfilesProof, sys == "Irrigated"))
    df_plot_rf <- as.data.frame(subset(cfilesProof, sys == "Rainfed"))
    
    add_crops_to_irr <- setdiff(df_plot_rf$crop, df_plot_irr$crop)
    if(length(add_crops_to_irr) != 0){
      df_add_to_irr <- data.frame(crop = add_crops_to_irr, sys = "Irrigated",
                                  Country = this_country, n = NA, mean = NA, sd = NA)
      df_plot_irr <- rbind(df_plot_irr,
                           df_add_to_irr)
      
    }
    df_plot <- rbind(df_plot_rf, df_plot_irr)
    
    if(lang == "ESP"){
      df_plot <- translate_dssatGraphic(df_plot)
      
    }
    
    # %>% group_by(crop,sys,Country) %>%
    #   mutate(val=mean(mean), des=mean(sd)) %>% dplyr::select(crop, sys,Country,val, des)
    # 
    
    
    labs2 = 'Type'
    
    png(filename= paste0(grd, this_country, "_dssatBar_", lang, ".png"), 
        width = 10, height = 7, units = 'in', res = 300)
    # ymax <- max(df_plot$mean + df_plot$sd)
    # ymin <- min(df_plot$mean - df_plot$sd)
    
    pic2<- ggplot(data=df_plot, 
                  aes(x=crop, y=mean, fill = sys)) + 
      #      facet_grid(.~sys)+
      #geom_bar(stat="identity", color = "black", fill = this_sys_color)+
      geom_bar(stat="identity", color = "black", position = position_dodge())+
      # geom_bar(stat= "summary", fun.y = "mean",position=position_dodge(width=.7))+
      geom_hline(yintercept = 0, color = "red", lwd = .5) +
      geom_errorbar(aes(ymin=mean-sd, ymax=mean+sd), 
                    width=0.4, colour="black", alpha=0.9, size=1,
                    position = position_dodge(0.9))+
      scale_fill_manual(values = sys_color_vec_fixed)
    #scale_fill_brewer(palette = "Dark2")
    pic2 <- pic2 + theme(axis.text=element_text(size=20),
                         axis.title.y = element_text(size = 22))+
      # theme(strip.text.x = element_text(angle = 0,size = 12, face = "bold"))+
      # theme(strip.text.y = element_text(angle = 0,size = 12, face = "bold"))+
      #labs(fill=labs2)+ theme(aspect.ratio = 1)+
      labs(y = ylab) +
      theme(legend.text = element_text(size=22),
            legend.title = element_blank(),
            legend.position = "top",
            legend.spacing.x = unit(2.0, 'cm'),
            # legend.background = element_blank(),
            # legend.key = element_blank(),
            # strip.text.y = element_text(size=12, face="bold"),
            # plot.title = element_text(face="bold", size=16),
            panel.border = element_blank(),
            axis.ticks = element_blank(),
            axis.title.x = element_blank(),
            strip.background = element_rect(colour="white", fill="white")) 
    
    
    plot(pic2)
    dev.off()
    
    
    
    cat(paste(this_country, " ha sido terminado\n great!!!", sep = ""))
    
    
  }
  
}

################################ Graficos de DSSAT Regiones #####################
dataF<- list.files(path = grdw,pattern= ".csv",full.names = T)
dataF<- lapply(dataF,read.csv,stringsAsFactors = F)
dataF<- do.call(rbind,dataF); dataF$X<- NULL
cfiles<- dataF 
cfiles<- cfiles %>% spread("year", "Area_Wgtd_Mean")

cfiles[,"ymean"] <- apply(cfiles[, 5:ncol(cfiles)], 1, mean)
cfiles<- cfiles[,c("crop", "FPU", "sys", "sce","ymean")]
cfiles<- cfiles %>% spread(sce, ymean)
cfiles[,"meanGCM"] <- apply(cfiles[, 4:12], 1, mean)
cfiles<- cfiles[,c("crop","FPU","sys","WFD","meanGCM")]

cfiles$change<- ((cfiles$meanGCM-cfiles$WFD)/cfiles$WFD)*100

if(length(which(cfiles$change == Inf)) > 0){
  cfiles$change[which(cfiles$change == Inf)] <- 0}else{}
cfiles$change[is.na(cfiles$change)==TRUE]<- 0
### Eliminar ceros
cfiles<-cfiles[!(cfiles$change==0),]

# define a function to remove outliers
FindOutliers <- function(data) {
  lowerq = quantile(data)[2]
  upperq = quantile(data)[4]
  iqr = upperq - lowerq 
  #Or use IQR(data)
  # we identify extreme outliers
  extreme.threshold.upper = (iqr * 3) + upperq
  extreme.threshold.lower = lowerq - (iqr * 3)
  result <- which(data > extreme.threshold.upper | data < extreme.threshold.lower)
}


# use the function to identify outliers
temp <- FindOutliers(cfiles$change)
cfOut<- cfiles[temp,]
cfilesNEt<- cfiles[-temp,]
cfilesNEt$sys<- plyr::revalue(cfilesNEt$sys, c("IRRI"="Irrigated","RA"="Rainfed"))
# cfilesNEt$crop<- plyr::revalue(cfilesNEt$crop, c("Maize"="Maize"))
colnames(cfpeCenV2)[1]<- "FPU"
cfilesJoin<- left_join(cfilesNEt, cfpeCenV2, by=("FPU"))
pots<- unique(cfilesJoin$Region_BID)
lugares<- c("Colombia", "Peru", "Uruguay", "Costa Rica", "Mexico", "Panama")


### ajuste CEN
# croput<- c("Soybean", "Wheat")
# cfilesJoin<- cfilesJoin %>% dplyr::filter(.,!crop %in% croput)
### Analisis por pais:seleccionar el pais y la region para excluirlo del analisis.
### Analisis regional deshabilitar p y l y correr el codigo deshabilitando el segundo filtro
p=4 # Region_BID
l=3 # pais

# Create shape by RegionsBID
country_vec <- country_vec1

for(p in 1:length(country_vec)){
  this_country <- country_vec[p]
  for(l in 1:2){
    lang <- lang_vec[l]
    
    
    cfilesProof<- cfilesJoin %>% filter(., Region_BID==this_country)%>% 
      filter(.,Region_Nam!=lugares[l]) # analisis regional deshabilitar el segundo filtro
    
    png(filename = paste0(grd, this_country, "_dssatMap_", lang, ".png"), 
        width = 10, height = 6, units = 'in', res = 300)
    
    pic2<- ggplot(data=cfilesProof, aes(x=crop, y=change,fill=sys)) + 
      facet_grid(.~sys)+
      geom_bar(stat= "summary", fun.y = "mean",position=position_dodge(width=.7))+
      scale_fill_brewer(palette = "Dark2") +
      labs(x="Crops",y="Percentage change \nin Yields")+
      #             theme(legend.position = "none")+
      #             theme(axis.text.x=element_text(size=12))+
      #             theme(axis.text.y=element_text(size=12))+
      #             theme(strip.text.x = element_text(angle = 0,size = 14, face = "bold.italic"))+
      #             theme(strip.text.y = element_text(angle = 0,size = 14, face = "bold.italic"))+
      theme(aspect.ratio = 1)+
      theme(legend.text = element_text(size=11),
            legend.title = element_text(face="bold",size=12),
            legend.background = element_blank(),
            legend.key = element_blank(),
            strip.text.y = element_text(size=12, face="bold"),
            plot.title = element_text(face="bold", size=20),
            panel.border = element_blank(),
            axis.ticks = element_blank(),
            strip.background = element_rect(colour="white", fill="white"),
            axis.text= element_text(face = "bold", size = 12),
            axis.title=element_text(face = "bold", size = 12)) +
      ylim(-40, 10)+ theme(legend.position="bottom",legend.text=element_text(size=20),
                           strip.text.x = element_text(size = 16, angle = 0))+
      theme(legend.position = "none")
    
    
    
    plot(pic2)
    dev.off()
    
    
    
    cat(paste(pots[p], " ha sido terminado\n great!!!", sep = ""))
    
  }
  
  
}

################################ Graficos de coropletas ###################
dataF<- list.files(path = grd1,pattern= "YieldMax_",full.names = T)
dataF<- lapply(dataF,read.csv,stringsAsFactors = F)
dataF<- do.call(rbind,dataF); dataF$X<- NULL

cfiles<- dataF 
cfiles[,3:4]<- NULL
# cfiles<- cfiles %>% filter(., sce!="WFD")%>% group_by(long,lat,FPU,sys,crop,year) %>% summarise(val=mean(ymax, na.rm=T))
# cfiles<- as.data.frame(cfiles)    
#       
# cfiles<- cfiles %>% spread("year", "val")

cfiles<- cfiles %>% spread("year", "ymax")

cfiles[,"ymean"] <- apply(cfiles[, 7:ncol(cfiles)], 1, mean)
cfiles<- cfiles[,c("long","lat","FPU","sce","sys","crop","ymean")]
cfiles<- cfiles %>% spread(sce, ymean)
cfiles[,"meanGCM"] <- apply(cfiles[, 6:14], 1, mean)
cfiles<- cfiles[,c("long","lat","FPU","sys","crop","WFD","meanGCM")]


cfiles$change<- ((cfiles$meanGCM-cfiles$WFD)/cfiles$WFD)*100
cfiles<- cfiles[,c("long", "lat","FPU","sys","crop","change")]
cfiles$sys<- plyr::revalue(cfiles$sys, c("IRRI"="Irrigated","RA"="Rainfed")) #Irrigated Rainfed


if(length(which(cfiles$change == Inf)) > 0){
  cfiles$change[which(cfiles$change == Inf)] <- 0}else{}
cfiles$change[is.na(cfiles$change)==TRUE]<- 0
### Eliminar ceros
cfiles<-cfiles[!(cfiles$change==0),]

# define a function to remove outliers
FindOutliers <- function(data) {
  lowerq = quantile(data)[2]
  upperq = quantile(data)[4]
  iqr = upperq - lowerq 
  #Or use IQR(data)
  # we identify extreme outliers
  extreme.threshold.upper = (iqr * 3) + upperq
  extreme.threshold.lower = lowerq - (iqr * 3)
  result <- which(data > extreme.threshold.upper | data < extreme.threshold.lower)
}

# use the function to identify outliers
temp <- FindOutliers(cfiles$change)
cfOut<- cfiles[temp,]
cfilesNEt<- cfiles[-temp,]


cfilesJoin<- left_join(cfilesNEt, cfpuData, by=("FPU"))
#write.csv(cfilesJoin, "cfilesJoin.csv")
#============================================================
#============================================================
cfilesJoin <- read.csv("cfilesJoin.csv", stringsAsFactors = F)
#============================================================
#============================================================

lugares<- unique(cfilesJoin$Country)

# 
# cfilesJoin$crop<- revalue(cfilesJoin$crop, c("Bean"="Fríjol",# "Bean", #"Frijol"
#                              "Maize"= "Maíz" ,#"Maize", #"Maiz"
#                              "Rice"= "Arroz",#"Rice", #"Arroz"
#                              "Soybean"=  "Soya",#  "Soybean", #"Soya"
#                              "Wheat"="Trigo" ))#"Wheat" ))# "Trigo"
crop_vec<- unique(cfilesJoin$crop)
sys_vec<- unique(cfilesJoin$sys)
#### Selecci?n por pais y cultivo
#l=25 #pais
#c=2 #crops
#t=2 #treat 1=irri 2=rainf
#l = 6

country_vec <- country_vec2
for(p in 1:length(country_vec)){
  this_country <- country_vec[p]
  print(this_country)
  allo<- alc[alc@data$COUNTRY==this_country,]
  map_allo<- fortify(allo)
  relevant_dssatCrops <- list_relevant_dssatCrops[[this_country]]
  df_plot <- subset(cfilesJoin, Country == this_country)
  max_val <- max(df_plot$change)
  min_val <- min(df_plot$change)
  for(l in 1:2){
    lang <- lang_vec[l]
    if(lang == "ESP"){
      labs2 <- "Cambio\n(%)"
    }
    if(lang == "ENG"){
      labs2 = "Change\n(%)"
    }

list_gg <- list()
i <- 0
for(c in 1:length(crop_vec)){
  this_crop <- crop_vec[c]
  for(t in 1:length(sys_vec)){
    this_sys <- sys_vec[t]
    this_crop_sys <- paste(this_sys, this_crop)
    if(!(this_crop_sys %in% relevant_dssatCrops)){next()}
    
    #proof<- cfilesJoin %>% filter(., Country==lugares[l] & crop==crops[c] & sys==treat[t])
    
    #proof<- filter(proof, change<=100) %>% filter(., change>=-100)
    proof <- subset(df_plot, crop == this_crop & sys == this_sys)
    #Coropleta 
    # png(filename = paste0(grd, this_country, "_dssatMap_", this_crop,"_",this_sys,"_", lang,".png"),
    #     width = 10, height = 6, units = 'in', res = 400)

    if(lang == "ESP"){
      proof <- translate_dssatGraphic(proof)
      proof$sys[which(proof$sys == "De secano")] <- "de Secano"
      plot_title <- paste(proof$crop[1], proof$sys[1])
    }
    if(lang == "ENG"){
      plot_title <- paste(proof$sys[1], proof$crop[1])
    }
    #---
    # This is to fix Costa Rica maps
    if(this_country == "Costa Rica"){
      map_allo <- subset(map_allo, lat > 8)
    }
    #---
    
        
    coro2<- ggplot() +
      geom_polygon(data=map_allo, aes(x=long, y=lat, group = group),colour="white", fill="white" )+
      geom_path(data=map_allo, aes(x=long, y=lat, group=group), colour="black", size=0.5)+
      geom_raster(data= proof, aes(x=long, y=lat,fill=change), alpha=0.8)+
      theme()+ coord_equal() + 
      #scale_fill_gradient2(low="red", mid="white", high="blue", midpoint = 0,breaks=seq(-80,80,10)) +
      scale_fill_gradient2(limits = c(min_val, max_val), low="red", mid="white", high="blue", midpoint = 0)+ 
      #labs(fill=labs2)+ labs(x=NULL, y=NULL, title=paste(treat[t]," ",crops[c]," (% change)", sep = ""))+ #change  # cambio
      labs(title = plot_title, fill = labs2) +
      theme(strip.text.x = element_text(angle = 0,size = 16, face = "bold"))+
      theme(strip.text.y = element_text(angle = 0,size = 16, face = "bold"))+
      theme(axis.text=element_text(size=14),
            axis.title=element_text(size=12,face="bold"),
            plot.title = element_text(size = 14),
            legend.title = element_text(size = 14)) +
      theme(panel.background = element_blank(), panel.border = element_rect(colour = "black", fill=NA, size=0.3))

    i <- i + 1
    list_gg[[i]] <- coro2
    
    #plot(coro2)
    
    #dev.off()
    this_filename <- paste0(grd, this_country, this_crop, "_dssatMap_", this_sys,"_", lang,".png")
    ggsave(this_filename, width = 10, height = 6, units = "in")
    
    
    cat(paste("terminado ", crops[c]," ",treat[t], " it's done\n", sep = ""))
  }
  cat(paste("terminado ", crops[c], " it's done\n  is completed", sep = ""))
  
}
# png(filename = paste0(grd, this_country,"_dssatMap_","all_",lang,".png"),
#     width = 10, height = 6, units = 'in', res = 400)
this_filename <- paste0(grd, this_country, "_allCrops","_dssatMap_",lang,".png")
n_maps <- length(list_gg)
if(n_maps %% 2 == 0){
  wrap_plots(list_gg, guides = 'collect')
}else{
  wrap_plots(list_gg, guides = 'collect') + guide_area()
}
ggsave(this_filename, width = 10, height = 6, units = "in")

#dev.off()

  }
}


################################ Graficos de Suitability #################################

#Limitar numero de decimales
options(digits=3) 
options(scipen = 999)

#load data 
grd1<- ("//dapadfs.cgiarad.org/workspace_cluster_6/Socioeconomia/GF_and_SF/BID_2")
grd2<- ("//dapadfs.cgiarad.org/workspace_cluster_6/Socioeconomia/GF_and_SF/BID_2/ECOcropSteve/")
grdmaps<-"C://dapadfs.cgiarad.org/workspace_cluster_6/Socioeconomia/GF_and_SF/BID_2/ECOcropSteve/"
treat<- c("Irrigated","Rainfed")
crops<- c("Rice","Bean","Wheat","Maize","Soybean") 
sui<- read.csv(paste(grd1,"/","summary_table_countries_test.csv", sep = ""))
sui[,1]<- NULL
colnames(sui)<- c("Crop","Region", "Mean suitability change (%)",	"SD (%)","Current area (km2)","Future area (km2)")
sui$Crop<- as.character(sui$Crop)
sui$Region<- as.character(sui$Region)
pots<- unique(sui$Region)
# 7: costarica
#15: Honduras
#reshape
sui<- sui %>% gather(variables, val, 3:ncol(sui))
### Eliminar ceros
sui$val[is.na(sui$val)==TRUE]<- 0
sui<-sui[!(sui$val==0),]
sui$val[which(sui$val>100 & sui$variables=="Mean suitability change (%)")]<- 100


# sui$Crop<- revalue(sui$Crop, c("Cassava"="Yuca",# "Bean", #"Frijol"
#                                              "Coffee Robusta"= "Café Robusta" ,#"Maize", #"Maiz"
#                                              "Potato"= "Papa",#"Rice", #"Arroz"
#                                              "Wheat"=  "Trigo",#  "Soybean", #"Soya"
#                                              "Yam"="Ñame",
#                                              "Banana"="Banano",
#                                              "Coffee Arabica"="Café Arábica",
#                                              "Sugarcane"="Caña de Azúcar"))#"Wheat" ))# "Trigo"

sui$Crop <- gsub("Coffee Robusta", "Coffee\nRobusta", sui$Crop)
sui$Crop <- gsub("Coffee Arabica", "Coffee\nArabica", sui$Crop)

u <- sui$Region
sui$Region[which(u == "COL")] <- "Colombia"
sui$Region[which(u == "MEX")] <- "Mexico"
sui$Region[which(u == "PAN")] <- "Panama"
sui$Region[which(u == "URY")] <- "Uruguay"
sui$Region[which(u == "CRI")] <- "Costa Rica"
sui$Region[which(u == "PER")] <- "Peru"

sui$Region[which(u == "ARG")] <- "Argentina"
sui$Region[which(u == "BOL")] <- "Bolivia"
sui$Region[which(u == "DOM")] <- "Dominican Republic"
sui$Region[which(u == "HND")] <- "Honduras"
sui$Region[which(u == "JAM")] <- "Jamaica"
sui$Region[which(u == "NIC")] <- "Nicaragua"
sui$Region[which(u == "SLV")] <- "El Salvador"
sui$Region[which(u == "ECU")] <- "Ecuador"
sui$Region[which(u == "GTM")] <- "Guatemala"




#crops<- unique(sui$Crop)


translate_suitGraphic <- function(df_plot){
  u <- df_plot$Crop
  df_plot$Crop <- gsub("Coffee", "Café", u)
  df_plot$Crop[which(u == "Cassava")] <- "Yuca"
  df_plot$Crop[which(u == "Potato")] <- "Papa"
  df_plot$Crop[which(u == "Yam")] <- "Ñame"
  df_plot$Crop[which(u == "Banana")] <- "Banano"
  df_plot$Crop[which(u == "Sugarcane")] <- "Caña de\nazucar"
  df_plot$Crop[which(u == "Wheat")] <- "Trigo"
  return(df_plot)
}


#display.brewer.pal(n = 8, name = 'Dark2')
ecoCrop_colors <- brewer.pal(n = length(all_ecoCrops), name = 'Dark2')
df_ecoCropColors <- data.frame(ecoCrop = all_ecoCrops, color = ecoCrop_colors)

#p=1 #22
country_vec <- country_vec2
lang_vec <- c("ENG", "ESP")
for(p in 1:length(country_vec)){
  this_country <- country_vec[p]
  relevant_ecoCrops_bar <- list_relevant_ecoCrops_bar[[this_country]]
  
  df_plot<- dplyr::filter(sui, Region == this_country) %>% 
    dplyr::filter(., variables=="Mean suitability change (%)") %>% 
    filter(Crop %in% relevant_ecoCrops_bar)
  
  u <- df_ecoCropColors$ecoCrop
  this_ecoCrop_colorvec <- as.character(df_ecoCropColors$color[which(u %in% relevant_ecoCrops_bar)])
  
  labs2 = 'Type'
  
for(l in 1:2){
  lang <- lang_vec[l]
  if(lang == "ESP"){
    ylab <- "Cambio de Aptitud (%)"
    df_plot <- translate_suitGraphic(df_plot)
  }
  if(lang == "ENG"){
    ylab <- "Change in Suitability (%)"
  }
}
  
  #cropsin<- c("Wheat","Coffee Robusta") #"Banana","Sugarcane","Coffee Robusta","Coffee Arabica"
  # df_plot<- dplyr::filter(sui,Region==pots[p]) %>% 
  #   dplyr::filter(., variables=="Mean suitability change (%)") %>% 
  #   filter(.,Crop!="Wheat") %>% filter(Crop %in% cropsin) #%>% filter(.,Crop!="Coffee Arabica")

  # png(filename= paste(grd,"/Suitability_",pots[p],"_bar_Interactions.png", sep = ""),
  #     width = 12, height = 6, units = 'in', res = 300)

  png(filename= paste0(grd, this_country,"_suitabilityBar_", lang, ".png"),
      width = 12, height = 6, units = 'in', res = 300)
    
  pic3<-ggplot(data=df_plot, aes(x=Crop, y=val,fill=Crop)) + 
    geom_bar(stat="identity",position=position_dodge(width=.7))+
    #scale_fill_brewer(palette = "Dark2") +
    scale_fill_manual(values = this_ecoCrop_colorvec) +
    #labs(x="Crops",y="Percentage Change in Suitability")+ # Crops  # Percentage Change in Suitability"  # "Cambio porcentual en Idoneidad"
    labs(y = ylab) +
    theme(legend.position = "none")+ 
    #             theme(axis.text.x=element_text(size=30))+
    #             theme(axis.text.y=element_text(size=30))+
    #             theme(strip.text.x = element_text(angle = 90,size = 30, face = "bold.italic"))+
    #             theme(strip.text.y = element_text(angle = 0,size = 30, face = "bold.italic"))+
    #labs(fill=labs2)+ theme(aspect.ratio = 1)+
    theme(#legend.text = element_text(size=11),
      #axis.text =(element_text(face = "bold.italic", size = 24)),
      #                   legend.title =element_text(face="bold",size=14),
      legend.background = element_blank(),
      legend.key = element_blank(),
      #                   axis.text.x=element_text(size=30),
      #                   strip.text.y = element_text(size=14, face="bold"),
      #                   plot.title = element_text(face="bold", size=20),
      panel.border = element_blank(),
      axis.ticks = element_blank(),
      strip.background = element_rect(colour="white", fill="white")) +
    theme_light()+theme(legend.position = "none",
                        axis.text = element_text(face = "bold", size = 18),
                        axis.title.y =element_text(face = "bold", size = 20),
                        axis.title.x = element_blank())
  
  plot(pic3)
  dev.off()
  
  cat(paste(this_country, " ha sido terminado\n great!!!", sep = "")) 
}

################################ Mapas de Suitability ###############

#### Mapas EcoCrop 16 Mayo 2016 
#### Estos Graficos son utilizando ya los mapas categorizados creados por Patricia
recategorizar <- function(data){ 
  # color <- 0
  if(data == 5){
    data <- "Becomes Suitable"#'Becomes Suitable' "Convierte en idóneo"
    # color <- 'Blue'
  }
  
  if(data == 4){
    data <-  "More Suitable"#'More Suitable' "Más idóneo"
    # color <- 'Green'
  }
  
  if(data == 3){
    data <- "Remains Suitable" #'Remains Suitable' "Mantiene idóneo"
    # color <- 'burlywood1'
  }
  
  if(data == 2){
    data <- "Less but Still Suitable"#'Less but Still Suitable' "Menos, pero todavia idóneo"
    # color <- 'Orange'
  }
  
  if(data == 1){
    data <- "Becomes Unsuitable" #'Becomes Unsuitable'  "Convierte en no idóneo"
    # color <- 'Red'
  }
  
  if(data == 0){
    data <- 'NA'
  }
  
  # return(data.frame(categoria = data, color = color))
  return(data)
}

path <- '//dapadfs.cgiarad.org/workspace_cluster_3/bid-cc-agricultural-sector/'
#names_crop <- c('yam', 'sugarcane', 'potato','cassava', 'banana')  # 'coffea_robusta' , 'wheat'
crop_vec <- setdiff(all_ecoCrops, c("Coffee\nRobusta", "Coffee\nArabica", "Wheat"))
# names_crop_to_graph <- c('Ñame', 'Caña de azucar', 'Papa', 'Yuca', 'Banano')  #'Coffee Robusta'
#names_crop_to_graph <- c('Yam', 'Sugarcane', 'Potato','Cassava', 'Banana')  #'Coffee Robusta'

# by_country <- c("Colombia", "Peru", "Uruguay", "Costa Rica", "Mexico", "Panama")
by_country <- c("Bolivia","Dominican Republic","El Salvador","Guatemala","Nicaragua","Jamaica","Honduras", "Colombia", "Ecuador",
                "Peru", "Mexico", "Argentina", "Haiti", "Paraguay", "Panama","Uruguay","Chile","Belize", "Costa Rica", "Cuba",
                "Venezuela", "Brazil")

shape <- readOGR(paste0(path, '03-Map_LatinAmerica/Latino_America1.shp'), 'Latino_America1')
path_data <- '//dapadfs.cgiarad.org/workspace_cluster_3/bid-cc-agricultural-sector/Raster visualizador Ecocrop/Future/'

colors_by_categoria <- data.frame(categoria = c("Becomes Unsuitable",#'Becomes Unsuitable',  "Convierte en no idóneo"
                                                "Less but Still Suitable",#'Less but Still Suitable',  "Menos, pero todavia idóneo"
                                                "Remains Suitable",#'Remains Suitable',   "Mantiene idóneo"
                                                "More Suitable",#'More Suitable', "Más idóneo"
                                                "Becomes Suitable"#'Becomes Suitable' "Convierte en idóneo"
                                                ), 
                                  color = c('#e41a1c',
          '#ff7f00',
          '#fb9a99',
          '#984ea3',
          '#377eb8'
))

c_vec <- c('#e41a1c',
           '#ff7f00',
           '#fb9a99',
           '#984ea3',
           '#377eb8')

#grid::grid.raster(c_vec, interpolate = FALSE)


translate_crop <- function(str_crop){
  if(str_crop == "Cassava"){str_crop_trans <- "Yuca"}
  if(str_crop == "Potato"){str_crop_trans <- "Papa"}
  if(str_crop == "Yam"){str_crop_trans <- "Ñame"}
  if(str_crop == "Banana"){str_crop_trans <- "Banano"}
  if(str_crop == "Sugarcane"){str_crop_trans <- "Caña de Azucar"}
  return(str_crop_trans)
  }


#### Para generar los graficos se selecciona el pais y el cultivo
# i=5  #crop
#j=22  #country
n_crops_ecoMap <- length(crop_vec)
country_vec <- country_vec2
lang_vec <- c("ENG", "ESP")
for(j in 1:length(country_vec)){
  this_country <- country_vec[j]
  print(this_country)
  filter_country <- shape[shape$COUNTRY == this_country, ]
  relevant_ecoCrops <- list_relevant_ecoCrops[[this_country]]
  if(relevant_ecoCrops != ""){
    #==================================================================
    list_df <- list()
    n_cats <- c()
    ii <- 0
    for(i in 1:n_crops_ecoMap){
      print(i)
      this_crop <- crop_vec[i]
      if(!(this_crop %in% relevant_ecoCrops)){next()}
      crop_sC <- raster(paste0(path_data, this_crop, '_change_forest_exc_suit_categories.tif'))
      crop_sC <- crop( crop_sC, filter_country)
      crop_sC <- raster::mask(crop_sC, filter_country)
      crop_sC <- rasterToPoints(crop_sC) 
      crop_sC_re <- data.frame(crop_sC, categoria = unlist(lapply(crop_sC[, 3], recategorizar)) )
      levels_col_cat <- colors_by_categoria %>%
        filter(categoria %in% unique(crop_sC_re$categoria))
      crop_sC_re <- crop_sC_re %>%
        filter(categoria != 'NA' ) 
      crop_sC_re$categoria <- factor(crop_sC_re$categoria, levels = as.character(levels_col_cat$categoria))
      
      x <- crop_sC_re
      ii <- ii + 1
      n_cats[ii] <- length(unique(x$categoria))
      
      filter_country1 <- fortify(filter_country)
      
      filter_country1$crop <- this_crop
      list_df[[ii]] <- list(filter_country1, x, levels_col_cat)
    } 
    #==================================================================
    i_legend <- which(n_cats == max(n_cats))[1]
    #==================================================================
    for(l in 1:2){
      lang <- lang_vec[l]
      list_gg <- list()
      for(i in 1:length(list_df)){
        print(i)
        this_list <- list_df[[i]]
        filter_country1 <- this_list[[1]]
        levels_col_cat <- this_list[[3]]
        this_crop <- unique(filter_country1$crop)
        filter_country1$crop <- NULL
        x <- this_list[[2]]
        #png(filename = paste(grd,'EcoCrop_atrr_', this_crop, "_",by_country[j],"_BID_Version3_coropleta.png", sep=""), width = 10, height = 6, units = 'in', res = 400)
        this_filename <- paste0(grd, this_country, "_", this_crop, "_suitabilityMap_", lang,".png")
        #png(filename = this_filename, width = 10, height = 6, units = 'in', res = 400)
        #ggsave(this_filename, width = 10, height = 6, units = "in")
        
        #---
        # This is to fix Costa Rica maps
        if(this_country == "Costa Rica"){
          filter_country1 <- subset(filter_country1, lat > 8)
        }
        #---
        xAxis_max <- max(filter_country1$long) - 1 / 3
        xAxis_min <- min(filter_country1$long) + 1 / 3
        xAxis_breaks <- round(seq(xAxis_min, xAxis_max, length.out = 3), 1)
        
        if(lang == "ESP"){
          this_title <- translate_crop(this_crop)
        }
        
        if(lang == "ENG"){
          this_title <- this_crop
        }
        
        y <- ggplot() +
          geom_polygon( data = filter_country1, aes(x=long, y=lat, group = group), colour="red", fill="white", alpha = 0.7 )+
          geom_raster(data=x, aes(x, y, fill = categoria)) +
          geom_path(data = filter_country1, aes(x=long, y=lat, group=group), colour="black", size = 0.25)+
          coord_equal() +
          ggtitle(this_title) +
          # ggtitle(paste(capitalize(cultivos.en[c]),' (',treat.en[t],'): \n',models[m,],sep=''))+
          # scale_fill_gradientn(colours=color_scale,limits=limits2,na.value = "grey50")+ # limits ,breaks=as.vector(limits),labels=as.vector(limits),limits=as.vector(limits)
          theme_bw()+
          labs(fill='')+
          theme(
            plot.title = element_text(face="bold", size=16),
            panel.border = element_blank(),
            axis.ticks = element_blank(),
            axis.text = element_text(size = 14),
            axis.title = element_text(size = 14))+
          scale_x_continuous(breaks = xAxis_breaks) +
          scale_fill_manual(values = as.character(levels_col_cat$color))
        if(i == i_legend){
          y <- y + theme(legend.text = element_text(size = 16),
                         legend.title = element_blank())
        }else{
          y <- y + theme(legend.position = "none")
        }
        
        #plot(y)
        #dev.off()
        list_gg[[i]] <- y
        
      }
      
      this_filename <- paste0(grd, this_country, "_allCrops_suitabilityMap_", lang, ".png")
      #png(filename = this_filename, width = 10, height = 6, units = 'in', res = 300)
      
      if(length(list_gg) %% 2 == 0){
        wrap_plots(list_gg, guides = "collect")
      }else{
        wrap_plots(list_gg, guides = "collect") + guide_area()
      }
      
      ggsave(this_filename, width = 10, height = 6, units = "in")
      
      #dev.off()
      
    }
    
  }
}
#==================================================================

######################################## graphics boxplot ##############

lac<- md[grep("LAC-",x = md$region),]
lac$impactparameter<- as.character(lac$impactparameter)
lac$scenario<- as.character(lac$scenario)
lac$commodity<- as.character(lac$commodity)
lac$region<- as.character(lac$region)
lac$productiontype<- as.character(lac$productiontype)

lac<- lac %>% filter(scenario!="NoCC")

#lista de paises por regiones
and_p<-c("LAC-Bolivia","LAC-Colombia","LAC-Ecuador","LAC-Peru","LAC-Venezuela")
csur_p<-c("LAC-Argentina","LAC-Chile","LAC-Uruguay","LAC-Paraguay")
cen_p<-c("LAC-Belize","LAC-Other Caribbean","LAC-Costa Rica","LAC-Cuba",
         "LAC-Dominican Republic","LAC-Guatemala","LAC-Honduras","LAC-Haiti",
         "LAC-Jamaica","LAC-Nicaragua","LAC-Panama","LAC-El Salvador")




#Regiones a analizar
and<- lac %>% filter(region %in% and_p) %>% 
  group_by(impactparameter, region ,year) %>% summarise(mean=mean(Val)) %>% 
  group_by(impactparameter,year) %>% summarise(total=sum(mean)) %>% mutate(zona="AND")

msx<- lac %>% filter(region=="LAC-Mexico") %>% 
  group_by(impactparameter, region ,year) %>% summarise(mean=mean(Val)) %>% 
  group_by(impactparameter,year) %>% summarise(total=sum(mean)) %>% mutate(zona="MEX")



bra<- lac %>% filter(region=="LAC-Brazil" | region=="LAC-Guyanas") %>% 
  group_by(impactparameter, region ,year) %>% summarise(mean=mean(Val)) %>% 
  group_by(impactparameter,year) %>% summarise(total=sum(mean)) %>% mutate(zona="BRA")

csur<- lac %>% filter(region %in% csur_p) %>% 
  group_by(impactparameter, region ,year) %>% summarise(mean=mean(Val)) %>% 
  group_by(impactparameter,year) %>% summarise(total=sum(mean)) %>% mutate(zona="SUR")

cen<- lac %>% filter(region %in% cen_p) %>% 
  group_by(impactparameter, region ,year) %>% summarise(mean=mean(Val)) %>% 
  group_by(impactparameter,year) %>% summarise(total=sum(mean))  %>% mutate(zona="CEN")


#Juntar todos los marcos de datos
var_all<-rbind(and,msx,bra,csur,cen)
VarRatio<- c("QDXAgg -- Total Demand", "QSupXAgg -- Commodity Supply")

var_all<- var_all %>% filter(impactparameter %in% VarRatio)



tiff(filename=paste(grd,"all_crops_all_variables_all_GCMs.tiff",sep=""), 
     width = 10, height = 10, units = 'in', res = 100)

ggplot(var_all,aes(x=zona,y=total,color=zona))  +
  # facet_wrap( ~ Var,ncol=5,shrink=T) +
  geom_boxplot(alpha=0.4,stat="boxplot") +
  labs(y="Percentage change",x="") +
  coord_cartesian(ylim = c(-100, 200)) + 
  scale_y_continuous( breaks=seq(-100, 200, 20))
dev.off()
