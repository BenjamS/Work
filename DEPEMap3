# library(lamW)
library(rootSolve)
library(tidyverse)
library(fields)

#=============================================================
#=============================================================
#=============================================================
# Define functions
#=============================================================
#=============================================================
#=============================================================
#=============================================================
# Map plotting
# Function to create divergent color ramp with specific color attached to specific midpoint
DivMapPal <- function(inMat, midval, start.color = "magenta", end.color = "cyan", mid.color = "khaki2"){
  ramp1 <- colorRampPalette(c(start.color,mid.color))
  ramp2 <- colorRampPalette(c(mid.color,end.color))
  # now specify the number of values on either side of "mid.value"
  minval <- min(inMat[!(is.na(inMat))])
  maxval <- max(inMat[!(is.na(inMat))])
  scaleFactr <- 10^(-(floor(log10(maxval)) - 2))
  max.breaks <- round((maxval - midval) * scaleFactr)
  min.breaks <- round((midval - minval) * scaleFactr)
  #mid.break <- round(midval * scaleFactr)
  num.breaks <- max(max.breaks, min.breaks)
  low.ramp <- ramp1(num.breaks)
  high.ramp <- ramp2(num.breaks)
  # now create a combined ramp from the higher values of "low.ramp" and
  # the lower values of "high.ramp", with the longer one using all values
  # high.ramp starts at 2 to avoid duplicating zero
  if(midval > maxval){
    out_DivMapPalette <- low.ramp[(num.breaks - min.breaks):num.breaks]
    
  }else{
    out_DivMapPalette <- c(low.ramp[(num.breaks - min.breaks):num.breaks], high.ramp[2:max.breaks])
    
  }
  return(out_DivMapPalette)
}


plotSurface2 <- function (x, main = NULL, type = "C", zlab = NULL, xlab = NULL, 
                          ylab = NULL, levels = NULL, zlim = NULL, graphics.reset = NULL, 
                          labcex = 0.6, method = "flattest", imgCol, add.legend = TRUE,
                          cntrCol = par("fg"), cntrLty = par("lty"), cntrLwd = par("lwd"),
                          imgBigplot, imgSmallplot, ...)
{
  # bigplot <- imgBigplot
  # smallplot <- imgSmallplot
  obj <- x
  old.par <- par(no.readonly = TRUE)
  if (is.na(match(type, c("b", "c", "C", "I", "p")))) {
    stop("plot type does not match b, C, I, or p.")
  }
  if (is.null(zlim)) {
    zlim = range(obj$z, na.rm = TRUE)
  }
  if (is.null(graphics.reset) & (type == "b")) {
    graphics.reset <- TRUE
  }
  else {
    graphics.reset <- FALSE
  }
  if (graphics.reset) {
    on.exit(par(old.par))
  }
  if (is.null(xlab)) {
    if (is.null(obj$xlab)) 
      xlab <- "X"
    else xlab <- obj$xlab
  }
  if (is.null(ylab)) {
    if (is.null(obj$ylab)) 
      ylab <- "Y"
    else ylab <- obj$ylab
  }
  if (is.null(zlab)) {
    if (is.null(obj$zlab)) 
      zlab <- "Z"
    else zlab <- obj$zlab
  }
  if (is.null(main)) 
    if (!is.null(obj$main)) 
      main <- obj$main
  if (type == "b") 
    set.panel(1, 2, TRUE)
  if (type == "p" | type == "b") {
    if (type == "b") {
      add.legend <- FALSE
      old.mar <- par()$mar
      par(mar = c(0, 5, 0, 0))
    }
    drape.plot(obj, xlab = xlab, ylab = ylab, zlab = zlab, 
               zlim = zlim, add.legend = add.legend, ...)
    if (!is.null(main)) 
      title(main)
  }
  if (type == "I") {
    image.plot(obj$x, obj$y, obj$z, xlab = xlab, ylab = ylab, 
               zlim = zlim, col = imgCol,
               bigplot = imgBigplot, smallplot = imgSmallplot,...)
    if ((!is.null(main)) & type != "b") 
      title(main)
  }
  if (type == "c") {
    if (is.null(levels)) 
      levels <- pretty(obj$z[!is.na(obj$z)], 5)
    contour(obj$x, obj$y, obj$z, levels = levels, labcex = labcex, 
            method = method, col = cntrCol, lty = cntrLty, lwd = cntrLwd, ...)
    if ((!is.null(main)) & type != "b") 
      title(main)
  }
  if (type == "b" | type == "C") {
    if (type == "b") {
      par(mar = old.mar)
    }
    image.plot(obj$x, obj$y, obj$z, xlab = xlab, ylab = ylab,
               zlim = zlim,
               graphics.reset = graphics.reset,
               col = imgCol,
               bigplot = imgBigplot, smallplot = imgSmallplot,...)
    if (is.null(levels)) 
      levels <- pretty(obj$z[!is.na(obj$z)], 5)
    contour(obj$x, obj$y, obj$z, add = TRUE, levels = levels, 
            labcex = labcex, method = method,
            col = cntrCol, lty = cntrLty, lwd = cntrLwd, ...)
    if ((!is.null(main)) & type != "b") 
      title(main)
  }
  invisible()
}
#=============================================================
# Tech adoption
#=============================================================
get_adopt_range <- function(delta_tech, delta_P, quietly = T){
  # delta_tech <- .9
  # delta_P <- 0.95 # Must be > delta_tech?
  ratio_deltas <- delta_tech / delta_P
  ly_switch <- -log(delta_P) / (ratio_deltas - 1)
  #if(delta_P > 1){
  #--
  if(ratio_deltas < 1){
    tech_is_pro_poor <- T
  }else{
    tech_is_pro_poor <- F
  }
  #--
  if(ly_switch > -1 & ly_switch < 0){
    if(tech_is_pro_poor){
      adopt_bounds <- c(-1, ly_switch)
    }else{
      adopt_bounds <- c(ly_switch, 0)
    }
  }else{
    if(ly_switch < -1){
      if(tech_is_pro_poor){
        adopt_bounds <- NA  
      }else{
        adopt_bounds <- c(-1, 0)
      }
    }
    if(ly_switch > 0){
      if(tech_is_pro_poor){
        adopt_bounds <- c(-1, 0)
      }else{
        adopt_bounds <- NA
      }
    }
  }
  #--
  zero_or_full <- NA
  if(adopt_bounds[1] == -1 & adopt_bounds[2] == 0){
    zero_or_full <- "Full adoption"
  }
  if(is.na(adopt_bounds)){
    zero_or_full <- "Zero adoption"
  }
  
  if(!quietly){
    print("Adoption log yield (normalized) bounds:")
    print(adopt_bounds)
    print("ly_switch:")
    print(ly_switch)
    if(tech_is_pro_poor){
      print("Tech is pro-poor")
    }else{
      print("Tech is not pro-poor")
    }
    print(zero_or_full)
  }
  #--
  out_list <- list(adopt_bounds, tech_is_pro_poor, ly_switch, zero_or_full)
  return(out_list)
}    


graph_diffNR1NR0 <- function(delta_tech, delta_P, yCeil){
  ly0_vec <- seq(-1, 0, length.out = 25)
  
  ratio_deltas <- delta_tech / delta_P
  ly_switch <- -log(delta_P) / (ratio_deltas - 1)
  
  R_0 <- yCeil * exp(ly0_vec)
  R_1 <- yCeil * exp(ly0_vec * delta_tech / delta_P) * delta_P
  diff_NR1NR0 <- R_1 - R_0
  df_plot <- data.frame(ly0_vec, diff_NR1NR0)
  gg <- ggplot(df_plot, aes(x = ly0_vec, y = diff_NR1NR0))
  gg <- gg + geom_line()
  gg <- gg + geom_hline(yintercept = 0, color = "violet", size = 1)
  #    gg <- gg + geom_vline(xintercept = ly_switch, color = "violet", size = 1)
  gg <- gg + labs(x = "Log yield index", y = expression("Diff. in net rev. ("*ha.^-1 ~Price^-1*")"))
  gg
  
}


# delta_tech <- 1.1
# delta_P <- 1.03
# out <- get_adopt_range(delta_tech, delta_P, quietly = T)
# adopt_bounds <- out[[1]]
# tech_is_pro_poor <- out[[2]]
# adopt_bounds
# tech_is_pro_poor
# graph_diffNR1NR0(delta_tech, delta_P, yCeil)

get_lq_bounds <- function(adopt_bounds, tech_is_pro_poor, which_tech, zero_or_full){
  if(which_tech == "baseline"){
    if(!is.na(zero_or_full)){
      if(zero_or_full == "Zero adoption"){
        lq_bounds <- c(-1, 0)
      }
      if(zero_or_full == "Full adoption"){
        lq_bounds <- NA
      }
      
    }else{
      if(tech_is_pro_poor){
        lq_lower <- adopt_bounds[2]
        lq_upper <- 0
      }else{
        lq_lower <- -1
        lq_upper <- adopt_bounds[1]
      }
      lq_bounds <- c(lq_lower, lq_upper)
      
    }
    
  }
  
  if(which_tech == "new"){
    lq_bounds <- adopt_bounds
  }
  
  return(lq_bounds)
}

#=============================================================
# Supply function
#=============================================================
QS_at_P <- function(P, QS_env){
  mu_alpha <- QS_env[["mu_alpha"]]
  sig_alpha <- QS_env[["sig_alpha"]]
  yCeil <- QS_env[["yCeil"]]
  m_A <- QS_env[["m_A"]]
  s_A <- QS_env[["s_A"]]
  N <- QS_env[["N"]]
  lq_bounds <- QS_env[["lq_bounds"]]
  
  m_y <- log(yCeil) + mu_alpha / P
  s_y <- sig_alpha / P
  mu_y <- exp(m_y + s_y^2 / 2)
  
  mu_A <- exp(m_A + s_A^2 / 2)
  
  mu_q <- mu_y * mu_A
  
  s_q <- s_A + s_y
  
  supply_is_zero <- F
  if(is.null(lq_bounds)){
    lq_lower <- -1
    lq_upper <- 0
  }else{
    if(is.na(lq_bounds)){
      supply_is_zero <- T
    }else{
      lq_lower <- lq_bounds[1]
      lq_upper <- lq_bounds[2]
    }
    
  }
  
  if(supply_is_zero){
    mkt_particip <- 0
    QS <- 0
  }else{
    u_upper <- (lq_upper - mu_alpha / P) / s_q
    u_lower <- (lq_lower - mu_alpha / P) / s_q
    
    theta_upper <- u_upper - s_q
    theta_lower <- u_lower - s_q
    
    N_upper <- pnorm(theta_upper)
    N_lower <- pnorm(theta_lower)
    mkt_particip <- N_upper - N_lower
    QS <- N * mu_q * mkt_particip
  }
  out_vec <- c(P, QS, mkt_particip)
  
  return(out_vec)
}
#-------------------------------------------------------------
QS_curve <- function(P_vec, QS_env){
  list_out <- purrr::map(P_vec, QS_at_P, QS_env)
  return(list_out)
}
#=============================================================
# Demand curve
#=============================================================
QD_at_P <- function(P, QD_env){
  P_output <- QD_env[["P_output"]]
  a_DEM <- QD_env[["a_DEM"]]
  kl_per_MT <- QD_env[["kl_per_MT"]]
  gamma_D <- QD_env[["gamma_D"]]
  N_D <- QD_env[["N_D"]]
  QD <- N_D * P_output / (P * gamma_D) * a_DEM * kl_per_MT
  out_vec <- c(P, QD)
  return(out_vec)
}
#-------------------------------------------------------------
QD_curve <- function(P_vec, QD_env){
  list_out <- purrr::map(P_vec, QD_at_P, QD_env)
  return(list_out)
}
#=============================================================
# Equilibrium
#=============================================================
equilib_rootfn <- function(P_vec, QS_env, QD_env){
  
  QS <- QS_curve(P_vec, QS_env)
  QS <- as.data.frame(do.call(rbind, QS))
  QS <- QS[, 2]
  
  QD <- QD_curve(P_vec, QD_env)
  QD <- as.data.frame(do.call(rbind, QD))
  QD <- QD[, 2]
  
  slack <- QS - QD
  
  return(slack)
} 

QSQD_Equilib <- function(interval_P, QS_env, QD_env){
  
  P_E <- uniroot.all(equilib_rootfn,
                     interval_P,
                     lower = min(interval_P),
                     upper = max(interval_P),
                     QS_env = QS_env,
                     QD_env = QD_env)
  
  return(QS_vec)
  
}


#=============================================================
#=============================================================
#=============================================================
# End function definitions
#=============================================================
#=============================================================
#=============================================================
# Define parameters
#-------------------------------------------------------------
# Supply
#-------------------------------------------------------------
mu_alpha <- -1000
cv_alpha <- 0.6
sig_alpha <- abs(mu_alpha * cv_alpha)
yCeil <- 44
m_A <- log(2)
cv_A <- 0.8
s_A <- m_A * cv_A
N <- 40
lq_bounds <- NULL
#-------------------------------------------------------------
# Demand
#-------------------------------------------------------------
# QD <- N_D * P_output / (P * gamma_D) * a_e
QD_obs <- 900 # observed demand
P_E_obs <- 2300 # observed equilibrium price
P_output <- 23500
gamma_D <- 1.05
N_D <- 1
kl_per_MT_0 <- 1 / 6
a_DEM <- QD_obs / (N_D * P_output * kl_per_MT_0) * P_E_obs * gamma_D
C_process_per_kL <- 9000
#=============================================================
P_vec <- seq(200, 5000, length.out = 50)
#=============================================================
# P <- 1800
# QS_at_P(P, mu_alpha, sig_alpha, yCeil, m_A, s_A, N)
QS_env <- list()
QS_env[["mu_alpha"]] <- mu_alpha
QS_env[["sig_alpha"]] <- sig_alpha
QS_env[["yCeil"]] <- yCeil
QS_env[["m_A"]] <- m_A
QS_env[["s_A"]] <- s_A
QS_env[["N"]] <- N
QS_env[["lq_bounds"]] <- NULL
QS_env_sq <- QS_env
list_QS_curve <- QS_curve(P_vec, QS_env)
df_QS <- as.data.frame(do.call(rbind, list_QS_curve))
colnames(df_QS) <- c("Price (Baht / MT)", "Supply", "Market Participation")

QD_env <- list()
QD_env[["P_output"]] <- P_output
QD_env[["a_DEM"]] <- a_DEM
QD_env[["kl_per_MT"]] <- kl_per_MT_0
QD_env[["gamma_D"]] <- gamma_D
QD_env[["N_D"]] <- N_D
QD_env_sq <- QD_env
list_QD_curve <- QD_curve(P_vec, QD_env)
df_QD <- as.data.frame(do.call(rbind, list_QD_curve))
colnames(df_QD) <- c("Price (Baht / MT)", "Demand")
df_plot <- df_QS
# gg <- ggplot(df_plot, aes(x = Price, y = Supply))
# gg <- gg + geom_line()
# gg
# df_plot <- df_QD
# gg <- ggplot(df_plot, aes(x = `Price (Baht / MT)`, y = Demand))
# gg <- gg + geom_line()
# gg

df_plot <- merge(df_QS, df_QD)
df_plot$`Market Participation` <- NULL
df_plot <- df_plot %>% gather(Type, `Quantity (MT)`, Demand:Supply)

gg <- ggplot(df_plot, aes(x = `Price (Baht / MT)`, y = `Quantity (MT)`, group = Type, color = Type))
gg <- gg + geom_line(lwd = 1)
distinct_colors <- randomcoloR::distinctColorPalette(k = 2)
gg <- gg + scale_color_manual(values = distinct_colors)
gg <- gg + coord_cartesian(ylim = c(0, 2000))
gg <- gg + theme(legend.title = element_blank())
gg

interval_P <- c(200, 3000)
equilib_vec <- QSQD_Equilib(interval_P, QS_env, QD_env)
equilib_vec
P_E_sq <- equilib_vec[1]
Q_E_sq <- equilib_vec[2]
Mkt_Part_sq <- equilib_vec[3]
C_sq <- P_E_sq * Q_E_sq + kl_per_MT_0 * Q_E_sq * C_process_per_kL
R_sq <- P_output * Q_E_sq * kl_per_MT_0
NR_sq <- R_sq - C_sq
NR_sq
Q_output_ethanol_sq <- kl_per_MT_0 * Q_E_sq
#=============================================================
#=============================================================
#=============================================================
#=============================================================
#=============================================================
# Technology adoption analysis
#=============================================================
#=============================================================
#=============================================================
# delta_tech <- 1.1
# delta_P <- 1.03
# delta_tech <- 1.11
# delta_P <- 1.03 # Must be > delta_tech?
delta_tech <- 1.08
delta_P <- 1.01
ratio_deltas <- delta_tech / delta_P
graph_diffNR1NR0(delta_tech, delta_P, yCeil)

out_list <- get_adopt_range(delta_tech, delta_P, quietly = F)
adopt_bounds <- out_list[[1]]
tech_is_pro_poor <- out_list[[2]]
zero_or_full <- out_list[[4]]
which_tech <- "baseline"
lq_bounds <- get_lq_bounds(adopt_bounds, tech_is_pro_poor, which_tech, zero_or_full)
QS_env <- QS_env_sq
QS_env[["lq_bounds"]] <- lq_bounds
list_QS_curve <- QS_curve(P_vec, QS_env)
df_QS <- as.data.frame(do.call(rbind, list_QS_curve))
colnames(df_QS) <- c("Price (Baht / MT)", "Supply", "Market Participation")
df_QS_0 <- df_QS %>% gather(Item, Value, Supply:`Market Participation`)
df_QS_0$Tech <- "Baseline\nSupply"
QS_env_0 <- QS_env

df_plot <- df_QS_0
gg <- ggplot(df_plot, aes(x = `Price (Baht / MT)`, y = Value))
gg <- gg + geom_line()
#gg <- gg + geom_vline(xintercept = P_1 / delta_tech, color = "violet", size = 1)
gg <- gg + facet_wrap(~Item, ncol = 1, scales = "free")
gg


which_tech <- "new"
lq_bounds <- get_lq_bounds(adopt_bounds, tech_is_pro_poor, which_tech, zero_or_full)
QS_env <- QS_env_sq
QS_env[["lq_bounds"]] <- lq_bounds
QS_env[["mu_alpha"]] <- mu_alpha * ratio_deltas
QS_env[["sig_alpha"]] <- abs(cv_alpha * mu_alpha * ratio_deltas)
list_QS_curve <- QS_curve(P_vec, QS_env)
df_QS <- as.data.frame(do.call(rbind, list_QS_curve))
colnames(df_QS) <- c("Price (Baht / MT)", "Supply", "Market Participation")
df_QS_1 <- df_QS %>% gather(Item, Value, Supply:`Market Participation`)
df_QS_1$Tech <- "Small Granule\nSupply"
QS_env_1 <- QS_env

df_plot <- df_QS_1
gg <- ggplot(df_plot, aes(x = `Price (Baht / MT)`, y = Value))
gg <- gg + geom_line()
gg <- gg + facet_wrap(~Item, ncol = 1, scales = "free")
gg



df_QS_1_0 <- rbind(df_QS_0, df_QS_1)
df_plot <- df_QS_1_0
gg <- ggplot(df_plot, aes(x = `Price (Baht / MT)`, y = Value, group = Tech, color = Tech))
gg <- gg + geom_line(lwd = 1.1)
distinct_colors <- randomcoloR::distinctColorPalette(k = 20)
distinct_colors <- sample(length(distinct_colors), 2)
gg <- gg + scale_color_manual(values = distinct_colors)
gg <- gg + facet_wrap(~Item, ncol = 1, scales = "free")
gg


df_QD_0 <- df_QD
colnames(df_QD_0)[2] <- "Quantity (MT)"
df_QD_0$Type <- "Baseline\nDemand"
QD_env_0 <- QD_env_sq
QD_env_1 <- QD_env_sq
kl_per_MT_1 <- kl_per_MT_0 * 1.15
QD_env_1[["kl_per_MT"]] <- kl_per_MT_1
list_QD_curve <- QD_curve(P_vec, QD_env_1)
df_QD_1 <- as.data.frame(do.call(rbind, list_QD_curve))
colnames(df_QD_1) <- c("Price (Baht / MT)", "Quantity (MT)")
df_QD_1$Type <- "Small Granule\nDemand"
df_QD_1_0 <- rbind(df_QD_0, df_QD_1)


df_QS_0 <- subset(df_QS_0, Item != "Market Participation")
df_QS_0$Item <- NULL
colnames(df_QS_0)[2:3] <- c("Quantity (MT)", "Type")
df_QS_QD_0 <- rbind(df_QS_0, df_QD_0)
df_plot <- df_QS_QD_0
gg <- ggplot(df_plot, aes(x = `Price (Baht / MT)`, y = `Quantity (MT)`, group = Type, color = Type))
gg <- gg + geom_line(lwd = 1.1)
distinct_colors <- randomcoloR::distinctColorPalette(k = 2)
gg <- gg + scale_color_manual(values = distinct_colors)
gg <- gg + theme(legend.title = element_blank(),
                 axis.title.y = element_blank())
gg <- gg + coord_cartesian(ylim = c(0, 800))
gg 
gg_baseline <- gg

df_QS_1 <- subset(df_QS_1, Item != "Market Participation")
df_QS_1$Item <- NULL
colnames(df_QS_1)[2:3] <- c("Quantity (MT)", "Type")
df_QS_QD_1 <- rbind(df_QS_1, df_QD_1)
df_plot <- df_QS_QD_1
gg <- ggplot(df_plot, aes(x = `Price (Baht / MT)`, y = `Quantity (MT)`, group = Type, color = Type))
gg <- gg + geom_line(lwd = 1.1)
distinct_colors <- randomcoloR::distinctColorPalette(k = 20)
distinct_colors <- sample(length(distinct_colors), 2)
gg <- gg + scale_color_manual(values = distinct_colors)
gg <- gg + theme(legend.title = element_blank(),
                 axis.title.y = element_blank())
gg <- gg + coord_cartesian(ylim = c(1, 800))
gg 
gg_new <- gg

df_QS_composite <- df_QS_1_0 %>% group_by(`Price (Baht / MT)`) %>% summarise(`Quantity (MT)` = sum(Value))
df_QS_composite$Type <- "Composite Supply"
df_QD_composite <- df_QD_1_0 %>% group_by(`Price (Baht / MT)`) %>% summarise(`Quantity (MT)` = sum(`Quantity (MT)`))
df_QD_composite$Type <- "Composite Demand"
df_QS_QD <- rbind(df_QS_composite, df_QD_composite)
df_plot <- df_QS_QD
gg <- ggplot(df_plot, aes(x = `Price (Baht / MT)`, y = `Quantity (MT)`, group = Type, color = Type))
gg <- gg + geom_line(lwd = 1.1)
gg <- gg + labs(title = "After release")
distinct_colors <- randomcoloR::distinctColorPalette(k = 20)
distinct_colors <- sample(length(distinct_colors), 2)
gg <- gg + scale_color_manual(values = distinct_colors)
gg <- gg + theme(legend.title = element_blank(),
                 legend.position = "bottom")
gg <- gg + coord_cartesian(ylim = c(0, 1500))
gg
gg_composite <- gg

library(patchwork)
gg_all <- gg_composite + (gg_baseline / gg_new) + plot_layout(ncol = 2, widths = c(2, 1))
gg_all


interval_P <- c(500, 10000)
equilib_vec_0 <- QSQD_Equilib(interval_P, QS_env_0, QD_env_0)
equilib_vec_1 <- QSQD_Equilib(interval_P, QS_env_1, QD_env_1)
equilib_vec_0
equilib_vec_1


P_E_0 <- equilib_vec_0[1]
P_E_1 <- equilib_vec_1[1]
Q_E_0 <- equilib_vec_0[2]
Q_E_1 <- equilib_vec_1[2]
Q_E_tot <- Q_E_0 + Q_E_1
Mkt_Part_0 <- equilib_vec_0[3]
Mkt_Part_1 <- equilib_vec_1[3]


CD_0 <- Q_E_0 * P_E_0 + Q_E_1 * kl_per_MT_1 * C_process_per_kL
CD_1 <- Q_E_1 * P_E_1 + Q_E_0 * kl_per_MT_0 * C_process_per_kL
CD_tot <- CD_0 + CD_1
CD_tot


Q_output_ethanol_ar <- Q_E_0 * kl_per_MT_0 + Q_E_1 * kl_per_MT_1
R <- P_output * Q_output_ethanol_ar
NR_ar <- R - CD_tot
NR_ar
#=============================================================
#=============================================================

kl_efficiency_gain <- 1.5
kl_per_MT_1 <- kl_per_MT_0 * kl_efficiency_gain
QD_env_0 <- QD_env_sq
QD_env_1 <- QD_env_sq
QD_env_1[["kl_per_MT"]] <- kl_per_MT_1
QS_env_0 <- QS_env_sq
QS_env_1 <- QS_env_sq
interval_P <- c(200, 1.5 * 10^8)

res <- 40
max_delta_tech <- 1.5
delta_tech_vec <- seq(1.01, max_delta_tech, length.out = res)
delta_P_vec <- seq(1.01, max_delta_tech, length.out = res)
mat_NR_diff <- matrix(NA, res, res)
mat_ly_switch <- matrix(NA, res, res)
mat_adoptRate <- matrix(NA, res, res)
mat_Q_ethanol <- matrix(NA, res, res)
for(i in 1:res){
  delta_tech <- delta_tech_vec[i]
  for(j in 1:res){
    print(c(i, j))
    delta_P <- delta_P_vec[j] # Must be > delta_tech?
    #graph_diffNR1NR0(delta_tech, delta_P, yCeil)
    out_list <- get_adopt_range(delta_tech, delta_P, quietly = F)
    adopt_bounds <- out_list[[1]]
    tech_is_pro_poor <- out_list[[2]]
    ly_switch <- out_list[[3]]
    zero_or_full <- out_list[[4]]
    #--
    which_tech <- "baseline"
    lq_bounds <- get_lq_bounds(adopt_bounds, tech_is_pro_poor, which_tech, zero_or_full)
    QS_env_0[["lq_bounds"]] <- lq_bounds
    #--
    which_tech <- "new"
    ratio_deltas <- delta_tech / delta_P
    lq_bounds <- get_lq_bounds(adopt_bounds, tech_is_pro_poor, which_tech)
    QS_env_1[["lq_bounds"]] <- lq_bounds
    QS_env_1[["mu_alpha"]] <- mu_alpha * ratio_deltas
    QS_env_1[["sig_alpha"]] <- abs(cv_alpha * mu_alpha * ratio_deltas)
    #--
    if(is.na(zero_or_full)){
      equilib_vec_0 <- QSQD_Equilib(interval_P, QS_env_0, QD_env_0)
      equilib_vec_1 <- QSQD_Equilib(interval_P, QS_env_1, QD_env_1)
    }else{
      if(zero_or_full == "Zero adoption"){
        equilib_vec_0 <- QSQD_Equilib(interval_P, QS_env_0, QD_env_0)
        equilib_vec_1 <- NA
      }
      if(zero_or_full == "Full adoption"){
        equilib_vec_0 <- NA
        equilib_vec_1 <- QSQD_Equilib(interval_P, QS_env_1, QD_env_1)
      }
      
    }
    #--
    if(!is.na(equilib_vec_0)){
      P_E_0 <- equilib_vec_0[1]
      Q_E_0 <- equilib_vec_0[2]
      Mkt_Part_0 <- equilib_vec_0[3]
    }else{
      P_E_0 <- 0
      Q_E_0 <- 0
      Mkt_Part_0 <- 0
    }
    
    if(!is.na(equilib_vec_1)){
      P_E_1 <- equilib_vec_1[1]
      Q_E_1 <- equilib_vec_1[2]
      Mkt_Part_1 <- equilib_vec_1[3]
    }else{
      P_E_1 <- 0
      Q_E_1 <- 0
      Mkt_Part_1 <- 0
    }
    
    Q_E_tot <- Q_E_0 + Q_E_1
    Mkt_Part_tot <- Mkt_Part_0 + Mkt_Part_1
    CD_0 <- Q_E_0 * P_E_0 + Q_E_0 * kl_per_MT_0 * C_process_per_kL
    CD_1 <- Q_E_1 * P_E_1 + Q_E_1 * kl_per_MT_1 * C_process_per_kL
    CD_tot <- CD_0 + CD_1
    CD_tot
    #--
    Q_output_ethanol <- Q_E_0 * kl_per_MT_0 + Q_E_1 * kl_per_MT_1
    R <- P_output * Q_output_ethanol
    NR_ar <- R - CD_tot
    #--
    adopt_rate <- Mkt_Part_1 / Mkt_Part_tot
    #--
    mat_NR_diff[i, j] <- NR_ar - NR_sq
    mat_ly_switch[i, j] <- ly_switch
    mat_adoptRate[i, j] <- adopt_rate
    mat_Q_ethanol[i, j] <- Q_output_ethanol
  }  
  
}



image(mat_NR_diff)
image(mat_adoptRate)


imgBigplot = c(0.1, 0.81, 0.15, 0.85)
imgSmallplot = c(0.9, 0.93, .2, .8)
xtick_labs <- delta_tech_vec
ytick_labs <- delta_P_vec
inMat <- mat_NR_diff
midval <- 0
this_mapPalette <- DivMapPal(inMat, midval,
                             start.color = "cyan",
                             end.color = "darkmagenta",
                             mid.color = "khaki2")

surface <- list(x = xtick_labs,
                y = ytick_labs,
                z = inMat)
plotSurface2(surface, type = "C",
             xlab = "delta tech",
             ylab = "delta P", labcex = 1,
             levels = seq(0, 10^5, 200),
             imgCol = this_mapPalette, method = "flattest",
             cntrLwd = 2,
             imgBigplot = imgBigplot, imgSmallplot = imgSmallplot)
#axis(4, at = ytick_labs, labels = pct_chng_vec)
mtext("change in tech", 4, line = 2.5)
#axis(3, at = xtick_labs, labels = pct_chng_vec)
mtext("change in price", 3, line = 2.5)
title(main = "Factory Net Revenue Difference Map (Baht / MT Root)", cex.main = 1, line = 4)





inMat <- mat_adoptRate
midval <- 0.50
this_mapPalette <- DivMapPal(inMat, midval,
                             start.color = "cyan",
                             end.color = "darkmagenta",
                             mid.color = "khaki2")
surface <- list(x = xtick_labs,
                y = ytick_labs,
                z = inMat)
plotSurface2(surface, type = "C",
             xlab = "delta tech",
             ylab = "delta P", labcex = 1,
             levels = seq(0, 10^5, 200),
             imgCol = this_mapPalette, method = "flattest",
             cntrLwd = 2,
             imgBigplot = imgBigplot, imgSmallplot = imgSmallplot)
#axis(4, at = ytick_labs, labels = pct_chng_vec)
mtext("change in tech", 4, line = 2.5)
#axis(3, at = xtick_labs, labels = pct_chng_vec)
mtext("change in price", 3, line = 2.5)
title(main = "Adoption rate", cex.main = 1, line = 4)


inMat <- mat_Q_ethanol
midval <- Q_output_ethanol_sq
this_mapPalette <- DivMapPal(inMat, midval,
                             start.color = "cyan",
                             end.color = "darkmagenta",
                             mid.color = "khaki2")
surface <- list(x = xtick_labs,
                y = ytick_labs,
                z = inMat)
plotSurface2(surface, type = "C",
             xlab = "delta tech",
             ylab = "delta P", labcex = 1,
             levels = seq(0, 10^5, 200),
             imgCol = this_mapPalette, method = "flattest",
             cntrLwd = 2,
             imgBigplot = imgBigplot, imgSmallplot = imgSmallplot)
#axis(4, at = ytick_labs, labels = pct_chng_vec)
mtext("change in tech", 4, line = 2.5)
#axis(3, at = xtick_labs, labels = pct_chng_vec)
mtext("change in price", 3, line = 2.5)
title(main = "Ethanol output (kL)", cex.main = 1, line = 4)







# # Ethanol demand
# P_ethanol_lcu_kL_statQuo <- 23500 #https://www.ceicdata.com/en/thailand/biofuel-reference-price/reference-price-ethanol-price-
# MTRootsPerkLEthanol_statQuo <- 6 # 6 - Thierry (2014)
# mu_Q_ethanol_kL_day_statQuo <- 200 # 150 -Thierry (2014) but hay also 8 new plants with 560 max cap
# mu_Q_root_MT_day_ethanol_statQuo <- mu_Q_ethanol_kL_day_statQuo * MTRootsPerkLEthanol_statQuo
# mu_cost_process_ethanol_lcu_kL_statQuo <- 9000 # 8806 Thierry (2014)
# mu_cost_process_ethanol_lcu_MTRoots_statQuo <- mu_cost_process_ethanol_lcu_kL_statQuo / MTRootsPerkLEthanol_statQuo
# cv_cost_process_ethanol_lcu_MTRoots_statQuo <- 0.08
# N_D_factry_ethanol_statQuo <- 40 #33 # 25 plus 8 under construction Thierry (2014)
# m_yCeil_factry_ethanol_statQuo <- log(mu_Q_ethanol_kL_day_statQuo * 1.5)
# cv_lyCeil_factry_ethanol_statQuo <- 0.1 #0.15
# # Starch demand
# P_starch_lcu_MT_statQuo <- 14000
# MTRootsPerMTStarch_statQuo <- 4.21 #Thierry interview
# Q_root_MT_day_starch_statQuo <- 1200
# Q_starch_MT_day_statQuo <- Q_root_MT_day_starch_statQuo / MTRootsPerMTStarch_statQuo
# N_D_factry_starch_statQuo <- 10
# cv_factryEfficiency_starch_statQuo <- 0.12
# m_yCeil_factry_starch_statQuo <- log(Q_starch_MT_day_statQuo * 1.5)
# cv_lyCeil_factry_starch_statQuo <- 0.5
# #----------------------------------
# N_D <- N_D_factry_ethanol_statQuo
# P_rev_per_output_DEM_statQuo <- P_ethanol_lcu_kL_statQuo
# beta_DEM_statQuo <- MTRootsPerkLEthanol_statQuo
# mu_P_fdstkCost_per_output_DEM_statQuo <- NULL #In functions here input P_rev_output_SUP
# cv_P_fdstkCost_per_output_DEM_statQuo <- 0
# mu_P_procCost_per_output_DEM_statQuo <- mu_cost_process_ethanol_lcu_MTRoots_statQuo
# cv_P_procCost_per_output_DEM_statQuo <- cv_cost_process_ethanol_lcu_MTRoots_statQuo
# m_yCeil_DEM_statQuo <- m_yCeil_factry_ethanol_statQuo
# cv_lyCeil_DEM_statQuo <- cv_lyCeil_factry_ethanol_statQuo
# s2_yCeil_DEM_statQuo <- (m_yCeil_DEM_statQuo * cv_lyCeil_DEM_statQuo)^2
# m_A_DEM_statQuo <- 0
# cv_lA_DEM_statQuo <- 0
# s2_A_DEM_statQuo <- (m_A_DEM_statQuo * cv_lA_DEM_statQuo)^2
# #==================================
# # Supply side parameters
# N_S_farm_statQuo <- 100
# mu_cost_per_farmProduct_statQuo <- 1500 #850 Thierry (2014)
# cv_cost_per_farmProduct_statQuo <- 0.2 #0.15 surmise
# m_yCeil_farm_statQuo <- log(45) #log(43.8375)
# cv_lyCeil_farm_statQuo <- 0
# s2_yCeil_farm_statQuo <- (m_yCeil_farm_statQuo * cv_lyCeil_farm_statQuo)^2
# m_A_farm_statQuo <- log(2) #log(1.25) # log(4.673574) Thierry data, 0.5-2 Thierry (2014)
# cv_lA_farm_statQuo <- 0.55 #0.5466573 Thierry data
# s2_A_farm_statQuo <- (m_A_farm_statQuo * cv_lA_farm_statQuo)^2
# #----------------------------------
# N_S <- N_S_farm_statQuo
# beta_SUP_statQuo <- 1
# mu_P_fdstkCost_per_output_SUP_statQuo <- mu_cost_per_farmProduct_statQuo
# cv_P_fdstkCost_per_output_SUP_statQuo <- cv_cost_per_farmProduct_statQuo
# mu_P_procCost_per_output_SUP_statQuo <- 0
# cv_P_procCost_per_output_SUP_statQuo <- 0
# m_yCeil_SUP_statQuo <- m_yCeil_farm_statQuo
# cv_lyCeil_SUP_statQuo <- cv_lyCeil_farm_statQuo
# s2_yCeil_SUP_statQuo <- (m_yCeil_SUP_statQuo * cv_lyCeil_SUP_statQuo)^2
# m_A_SUP_statQuo <- m_A_farm_statQuo
# cv_lA_SUP_statQuo <- cv_lA_farm_statQuo
# s2_A_SUP_statQuo <- (m_A_SUP_statQuo * cv_lA_SUP_statQuo)^2
# #==================================
# l_credit_statusQuo <- 0
# #==================================
# df_table <- data.frame(Ethanol_price_lcu_kL = P_ethanol_lcu_kL_statQuo,
#                        Number_factories = N_D,
#                        Productivity_MTrootsTokL = 1 / beta_DEM_statQuo,
#                        Mean_processing_cost = mu_cost_process_ethanol_lcu_kL_statQuo,
#                        CV_processing_cost = cv_cost_process_ethanol_lcu_MTRoots_statQuo,
#                        Mean_logged_maxcapacity = m_yCeil_DEM_statQuo,
#                        CV_logged_maxcapacity = cv_lyCeil_DEM_statQuo,
#                        Number_farms = N_S,
#                        Mean_cost_per_farmProduct = mu_cost_per_farmProduct_statQuo,
#                        CV_cost_per_farmProduct = cv_cost_per_farmProduct_statQuo,
#                        Mean_logged_maxyield = m_yCeil_SUP_statQuo,
#                        CV_logged_maxyield = cv_lyCeil_SUP_statQuo,
#                        Mean_logged_area = m_A_SUP_statQuo,
#                        CV_logged_area = cv_lA_SUP_statQuo)

