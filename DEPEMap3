# library(lamW)
library(rootSolve)
library(tidyverse)
#=============================================================
#=============================================================
#=============================================================
# Define functions
#=============================================================
#=============================================================
#=============================================================
# Supply function
#=============================================================
QS_at_P <- function(P, QS_env){
  mu_alpha <- QS_env[["mu_alpha"]]
  sig_alpha <- QS_env[["sig_alpha"]]
  yCeil <- QS_env[["yCeil"]]
  m_A <- QS_env[["m_A"]]
  s_A <- QS_env[["s_A"]]
  N <- QS_env[["N"]]
  
  m_y <- log(yCeil) + mu_alpha / P
  s_y <- sig_alpha / P
  mu_y <- exp(m_y + s_y^2 / 2)

  mu_A <- exp(m_A + s_A^2 / 2)
  
  mu_q <- mu_y * mu_A
  
  s_q <- s_A + s_y
  
  lq_upper <- 0
  lq_lower <- -1
  
  u_upper <- (lq_upper - mu_alpha / P) / s_q
  u_lower <- (lq_lower - mu_alpha / P) / s_q
  
  theta_upper <- u_upper - s_q
  theta_lower <- u_lower - s_q
  
  N_upper <- pnorm(theta_upper)
  N_lower <- pnorm(theta_lower)
  mkt_particip <- N_upper - N_lower
  QS <- N * mu_q * mkt_particip
  out_vec <- c(P, QS, mkt_particip)
  return(out_vec)
}
#-------------------------------------------------------------
QS_curve <- function(P, QS_env){
  QS_vec <- c()
  mkt_particip_vec <- c()
  list_out <- purrr::map(P_vec, QS_at_P, QS_env)
  return(list_out)
}
#=============================================================
# Demand curve
#=============================================================
QD_at_P <- function(P, QD_env){
  P_output <- QD_env[["P_output"]]
  a_e <- QD_env[["a_e"]] 
  gamma_D <- QD_env[["gamma_D"]]
  N_D <- QD_env[["N_D"]]
  QD <- N_D * P_output / (P * gamma_D) * a_e
  out_vec <- c(P, QD)
  return(out_vec)
}
#-------------------------------------------------------------
QD_curve <- function(P_vec, QD_env){
  QS_vec <- c()
  mkt_particip_vec <- c()
  list_out <- purrr::map(P_vec, QD_at_P, QD_env)
  return(list_out)
}
#=============================================================
# Equilibrium
#=============================================================
equilib_rootfn <- function(P_vec, QS_env, QD_env){
  print(P_vec)
  print(length(P_vec))
  
  QS <- QS_curve(P_vec, QS_env)
  QS <- as.data.frame(do.call(rbind, QS))
  QS <- QS[, 2]
  print(length(QS))
  
  QD <- QD_curve(P_vec, QD_env)
  QD <- as.data.frame(do.call(rbind, QD))
  QD <- QD[, 2]
  print(length(QD))
  
  slack <- QS - QD
  
  # print(c(slack[1], slack[length(slack)]))
  # print(c(P_vec[1], P_vec[length(P_vec)]))
  # print(c(QS[1], QS[length(QS)]))
  # print(c(QD[1], QD[length(QD)]))
  # 
  # print(QS[1] - QD[1])
  # print(QS[length(QS)] - QD[length(QD)])
  
  # print(length(QS))
  # print(length(QD))
  
  return(slack)
} 

QSQD_Equilib <- function(interval_P, QS_env, QD_env){
  
  P_E <- uniroot.all(equilib_rootfn,
              interval_P,
              lower = min(interval_P),
              upper = max(interval_P),
              QS_env = QS_env,
              QD_env = QD_env)
  
  QS_vec <- QS_at_P(P_E, QS_env)
  
  return(QS_vec)
  
}
#=============================================================
# Tech adoption
#=============================================================



#=============================================================
#=============================================================
#=============================================================
# End function definitions
#=============================================================
#=============================================================
#=============================================================
# Define parameters
#-------------------------------------------------------------
# Supply
#-------------------------------------------------------------
mu_alpha <- -1000
cv_alpha <- 0.4
sig_alpha <- abs(mu_alpha * cv_alpha)
yCeil <- 44
m_A <- log(2)
cv_A <- 0.2
s_A <- m_A * cv_A
N <- 40
#-------------------------------------------------------------
# Demand
#-------------------------------------------------------------
P_output <- 23500
a_e <- 1.5 / 0.17
gamma_D <- 1.05
N_D <- 20
#=============================================================
P_vec <- seq(200, 3500, length.out = 50)
#=============================================================
# P <- 1800
# QS_at_P(P, mu_alpha, sig_alpha, yCeil, m_A, s_A, N)
QS_env <- list()
QS_env[["mu_alpha"]] <- mu_alpha
QS_env[["sig_alpha"]] <- sig_alpha
QS_env[["yCeil"]] <- yCeil
QS_env[["m_A"]] <- m_A
QS_env[["s_A"]] <- s_A
QS_env[["N"]] <- N
list_QS_curve <- QS_curve(P_vec, QS_env)
df_QS <- as.data.frame(do.call(rbind, list_QS_curve))
colnames(df_QS) <- c("Price (Baht / MT)", "Supply", "Market Participation")

QD_env <- list()
QD_env[["P_output"]] <- P_output
QD_env[["a_e"]] <- a_e
QD_env[["gamma_D"]] <- gamma_D
QD_env[["N_D"]] <- N_D
list_QD_curve <- QD_curve(P_vec, QD_env)
df_QD <- as.data.frame(do.call(rbind, list_QD_curve))
colnames(df_QD) <- c("Price (Baht / MT)", "Demand")
df_plot <- df_QS
# gg <- ggplot(df_plot, aes(x = Price, y = Supply))
# gg <- gg + geom_line()
# gg
# df_plot <- df_QD
# gg <- ggplot(df_plot, aes(x = `Price (Baht / MT)`, y = Demand))
# gg <- gg + geom_line()
# gg

interval_P <- c(200, 3000)
equilib_vec <- QSQD_Equilib(interval_P, QS_env, QD_env)

df_plot <- merge(df_QS, df_QD)
df_plot$`Market Participation` <- NULL
df_plot <- df_plot %>% gather(Type, `Quantity (MT)`, Demand:Supply)

gg <- ggplot(df_plot, aes(x = `Price (Baht / MT)`, y = `Quantity (MT)`, group = Type, color = Type))
gg <- gg + geom_line(lwd = 1)
gg <- gg + coord_cartesian(ylim = c(0, 3000))
gg <- gg + theme(legend.title = element_blank())
gg



#=============================================================
#=============================================================

function(P_0, P_1, delta){
  alpha_switch <- (log(P_0) - log(P_1)) / (delta / P_1 - 1 / P_0)
  
  
}










#=============================================================
#=============================================================





















QS <- function(P, N_area, yCeil_SUP, cv_lyStar, mu_beta_SUP, lambda_SUP_SUP){
  QS_vec <- c()
  mktParticip_vec <- c()
  for(i in 1:length(P)){
    rCeil_SUP <- yCeil_SUP * P[i]
    #print(rCeil_SUP)
    interval_cstar <- c(0, exp(-1) * rCeil_SUP / (1 + lambda_SUP))
    cStar_atMu <- uniroot.all(rootfn_cstar, interval_cstar, lower = min(interval_cstar), upper = max(interval_cstar),
                              beta = mu_beta_SUP, rCeil = rCeil_SUP, lambda = lambda_SUP)
    m_yStar_norm <- -mu_beta / cStar_atMu
    #m_yStar_norm
    m_yStar <- m_yStar_norm + log(yCeil_SUP)
    s_yStar <- m_yStar * cv_lyStar
    mu_yStar <- exp(m_yStar + s_yStar^2 / 2)
    theta_upper <- (-m_yStar_norm) / s_yStar - s_yStar
    theta_lower <- (- 1 - m_yStar_norm) / s_yStar - s_yStar
    N_upper <- pnorm(theta_upper)
    N_lower <- pnorm(theta_lower)
    mkt_particip <- N_upper - N_lower
    QS_vec[i] <- N_area * mu_yStar * mkt_particip
    mktParticip_vec[i] <- mkt_particip
  }
  df_out <- data.frame(P, QS = QS_vec, mkt_particip = mktParticip_vec)
}

































#--------------------------------------
rootfn_cStarPerQ <- function(cStarPerQ, P, yCeil, beta, gamma){
  root <- cStarPerQ / P * gamma + lambertW0(-beta / (cStarPerQ * yCeil))
  return(root)
}
rootfn_yStar <- function(yStar, cStarPerQ, P, yCeil, beta){
  cStar <- yStar * cStarPerQ
  root <- beta / cStar + lambertW0(-cStar / (P * yCeil))
  return(root)
}
#--------------------------------------
n_farms <- 2000
#--------------------------------------
yCeil <- 44
yFloor <- yCeil * exp(-1)
beta <- 17 * 1000
mu_gamma <- 1.10
#--------------------------------------
P_SUP_sQuo <- 2000
#--------------------------------------
get_cStarPerQ_atGam_atP <- function(P, gamma, cStarPerQ_max, yCeil, beta, quietly = F){
  
  if(gamma > P * yCeil / beta * exp(-1)){print("gamma exceeds its upper bound")}
  if(gamma < 0){print("gamma less than its lower bound")}
  
  cStarPerQ_min_atGam <- P_SUP_sQuo / gamma
  interval_cStarPerQ <- c(cStarPerQ_min_atGam, cStarPerQ_max)
  out_uniroot <- uniroot.all(rootfn_cStarPerQ,
                             interval = interval_cStarPerQ,
                             lower = min(interval_cStarPerQ),
                             upper = max(interval_cStarPerQ),
                             P = P,
                             yCeil = yCeil,
                             beta = beta,
                             gamma = gamma)
  cStarPerQ_atGam_atP <- out_uniroot
  if(!quietly){
    cat(paste("Cost per unit output at user specified\ngamma, price, beta, and yield ceiling:",
              round(cStarPerQ_atGam_atP, 2)), sep = "\n")
  }
  return(cStarPerQ_atGam_atP)
}
#--------------------------------------
get_yStar_atGam_atP <- function(cStarPerQ_atGam_atP, P, yCeil, beta, quietly = F){
  yStar_min <- yCeil * exp(-1)
  yStar_max <- yCeil
  interval_yStar <- c(yStar_min, yStar_max)
  out <- uniroot.all(rootfn_yStar,
                     interval = interval_yStar,
                     lower = min(interval_yStar),
                     upper = max(interval_yStar),
                     cStarPerQ = cStarPerQ_atGam_atP,
                     P = P,
                     yCeil = yCeil,
                     beta = beta)
  yStar_atGam_atP <- out
  if(!quietly){
    cat(paste("Cost per unit output at user specified\ngamma, price, beta, and yield ceiling:",
              round(yStar_atGam_atP, 2)), sep = "\n")
  }
  return(yStar_atGam_atP)
}
#--------------------------------------
get_cStarPerQ_and_yStar_atGam_atP <- function(P, fun_env){
  gamma <- fun_env[[1]]
  cStarPerQ_max <- fun_env[[2]]
  yCeil <- fun_env[[3]]
  beta <- fun_env[[4]]
  quietly = fun_env[[5]]
  cStarPerQ_atGam_atP <- get_cStarPerQ_atGam_atP(P, gamma, cStarPerQ_max, yCeil, beta, quietly = quietly)
  yStar_atGam_atP <- get_yStar_atGam_atP(cStarPerQ_atGam_atP, P, yCeil, beta, quietly = quietly)
  out_vec <- c(cStarPerQ_atGam_atP, yStar_atGam_atP)
  return(out_vec)
  
}
#--------------------------------------
fun_env <- list(
  gamma = mu_gamma,
  cStarPerQ_max = 10^3,
  yCeil = yCeil,
  beta = beta,
  quietly = F
)
outvec_cStarPerQ_yStar <- get_cStarPerQ_and_yStar_atGam_atP(P = P_SUP_sQuo, fun_env)

cStarPerQ_atGam_atP <- outvec_cStarPerQ_yStar[1]
yStar_atGam_atP <- outvec_cStarPerQ_yStar[2]
#--------------------------------------
n_P <- 50
P_seq <- seq(100, 4000, length.out = n_P)
cStarPerQ_atGam_atP_vec <- c()
yStar_atGam_atP_vec <- c()
for(i in 1:n_P){
  this_P <- P_seq[i]
  outvec_cStarPerQ_yStar <- get_cStarPerQ_and_yStar_atGam_atP(P = this_P, fun_env)
  cStarPerQ_atGam_atP_vec[i] <- outvec_cStarPerQ_yStar[1]
  yStar_atGam_atP_vec[i] <- outvec_cStarPerQ_yStar[2]
}

plot(cStarPerQ_atGam_atP_vec, yStar_atGam_atP_vec)
plot(P_seq, yStar_atGam_atP_vec)

P_seq[which(is.na(yStar_atGam_atP_vec))]
cStarPerQ_globalMin <- beta / yCeil * exp(1)
P_globalMin_atGam <- cStarPerQ_globalMin * mu_gamma
gamma_globalMax <- P_SUP_sQuo * yCeil / beta * exp(-1)
#--------------------------------------



































cv_lyStar <- 0.12
mu_lyStar <- log(19)
sd_lyStar <- cv_lyStar * mu_lyStar
lyStar <- rnorm(n_farms, mean = mu_lyStar, sd = sd_lyStar)
hist(lyStar)
#--------------------------------------
yStar <- exp(lyStar)
hist(yStar)
mu_yStar <- exp(mu_lyStar + sd_lyStar^2 / 2)
mu_yStar
#--------------------------------------
cStar_A <- -beta / (lyStar - log(yCeil))
hist(beta / cStar_A)
#--------------------------------------
cStar_Q <- cStar_A / yStar
#--------------------------------------
P_SUP_sQuo <- 2400
#--------------------------------------
u <- -beta / (cStar_Q * yCeil)
which(u < -exp(-1))
gamma <- -P_SUP_sQuo / cStar_Q * lambertW0(u)
hist(gamma)
gamma_max <- P_SUP_sQuo * yCeil / beta * exp(-1)
#which(gamma > gamma_max)
#--------------------------------------
yStar_check <- yCeil * exp(-cStar_Q * gamma / P_SUP_sQuo)
hist(yStar_check)
check_yStar <- yStar - yStar_check
hist(check_yStar)
ind_look <- which(check_yStar < -1)
hist(u[ind_look])
hist(u)
#--------------------------------------
cStar_Q_min <- beta / yCeil * exp(1)
cStar_Q_vec <- seq(cStar_Q_min, 2500, length.out = 50)
u_vec <- -beta / (cStar_Q_vec * yCeil)
eta_yStar_nu <- lambertW0(u_vec) / (1 + lambertW0(u_vec))
plot(cStar_Q_vec, eta_yStar_nu)
#--------------------------------------
ind_rand <- 932
this_cStarQ <- cStar_Q[ind_rand]
this_gamma <- gamma[ind_rand]
A <- 3
u <- -beta / (this_cStarQ * yCeil)
eta_yStar_nu <- lambertW0(u) / (1 + lambertW0(u))
eta_yStar_nu
#eta_yStar_nu <- lambertWm1(u) / (1 + lambertWm1(u))
eta_nu_A <- ((this_gamma - 1) * this_cStarQ / (P_SUP_sQuo * A)) / (eta_yStar_nu - this_cStarQ * this_gamma / P_SUP_sQuo)
eta_nu_A
#plot(eta_nu_A)
eta_yStar_A <- eta_yStar_nu * eta_nu_A
eta_yStar_A
#plot(eta_yStar_A)
#--------------------------------------










u_seq <- seq(0, -exp(-1), length.out = 100)

y <- (1 + lambertW0(u_seq)) / (2 + lambertW0(u_seq))
plot(u_seq, y)
y[1]
y[length(y)]



























mu_cStarPerQGam <- -(mu_lyStar - log(yCeil)) * P_SUP_sQuo
sd_cStarPerQGam <- mu_cStarPerQGam * cv_lyStar
#--------------------------------------
cStarPerQGam <- rnorm(n_farms, mean = mu_cStarPerQGam, sd = sd_cStarPerQGam)
hist(cStarPerQGam)
#--------------------------------------
yStar <- yCeil * exp(-cStarPerQGam / P_SUP_sQuo)
hist(yStar)
#--------------------------------------
beta <- 16 * 1000
#--------------------------------------
u <- -yStar * cStarPerQGam / (P_SUP_sQuo * yCeil)
cStar <- -beta / lambertW0(u)
hist(cStar)
yStar_check <- yCeil * exp(-beta / cStar)
hist(yStar_check)
check_yStar <- yStar - yStar_check
hist(check_yStar)
ind_look <- which(check_yStar < -10^-10)
check_yStar[ind_look]
yStar_check[ind_look]
yStar[ind_look]
cStar[ind_look]
#--------------------------------------



















P_SUP <- 2200
#--------------------------------------
gamma <- -P_SUP / cStarPerQ * lambertW0(-beta / (cStarPerQ * yCeil) )
hist(gamma)
#--------------------------------------
yStar <- yCeil * exp(-cStarPerQ / P_SUP * gamma)
hist(yStar)
#--------------------------------------
P_SUP_new <- P_SUP * 0.9
interval_cStarPerQ <- c(beta / yCeil * exp(1), 10^5)
#--------------------------------------
cStarPerQ_new <- c()
for(i in 1:n_farms){
  this_gamma <- gamma[i]
  cStarPerQ_new[i] <- uniroot.all(rootfn_cStarPerQ,
                                  interval_cStarPerQ,
                                  lower = interval_cStarPerQ[1],
                                  upper = interval_cStarPerQ[2],
                                  P = P_SUP_new,
                                  yCeil = yCeil,
                                  beta = beta,
                                  gamma = this_gamma)
  
  
}
hist(cStarPerQ_new)
