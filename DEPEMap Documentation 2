# #--------------------------------------------
# #Make sure required packages are loaded
# #--------------------------------------------
# required_packages <- c("lamW", "rootSolve")
# lapply(required_packages, FUN = function(x) {
#   if (!require(x, character.only = TRUE)) {
#     install.packages(x, dependencies = TRUE)
#     library(x, character.only = TRUE)
#   }
# })
# #-------------------------------------------
# Libraries:
library(ggplot2)
library(rootSolve)
library(tidyverse)
library(fields)
library(lamW)
#---------------------------------------------------------
# Define functions:
# rootfn_cstar <- function(yStar_SUP, yCeil_SUP, cStar_SUP, beta_SUP){
#   slack <- beta_SUP / cStar_SUP + lambertW0(-yStar_SUP / yCeil_SUP * beta_SUP / cStar_SUP)
#   return(slack)
# }
# rootfn_cstar <- function(cStar_SUP, P_SUP, yCeil_SUP, beta_SUP, lambda_SUP){
#   slack <- beta_SUP / cStar_SUP + lambertW0(-cStar_SUP / (P_SUP * yCeil_SUP) * (1 + lambda_SUP))
#   return(slack)
# }
rootfn_cstar <- function(cPerStar_SUP, P_SUP, yCeil_SUP, beta_SUP, lambda_SUP){
  slack <- cPerStar_SUP / P_SUP * (1 + lambda_SUP) + lambertW0(-beta_SUP / (cPerStar_SUP * yCeil_SUP))
  return(slack)
}
#---------------------------------------------------------
# Get data to fit beta_SUP
#setwd("D:/OneDrive - CGIAR/Documents/Cassava work")
df <- read.csv("tran12-survey-95farmers-cassava-Korat.csv", stringsAsFactors = F)
colnames(df)[1] <- "x"
df <- df[-c(1:2), -c(ncol(df), (ncol(df) - 1))]
colnames(df)[2:ncol(df)] <- df[2, 2:ncol(df)]
df <- df[-c(1:2), ]
colnames(df)[1] <- "Ampoer"
colnames(df)[8] <- paste("Land Prep", colnames(df)[8])
colnames(df)[15] <- paste("Harvest", colnames(df)[15])
df_supplement <- df[97:144, ]
df <- df[-c(96:nrow(df)), ]
df[, -1] <- as.data.frame(apply(df[, -1], 2, as.numeric))
#--
#df$`Farm size (ha)` <- df$`Farm size (rai)` / 6.25
df$`Farm size (ha)` <- df$`Surface occupied by cassava (rai)` / 6.25
df$`l(Farm size (ha))` <- log(df$`Farm size (ha)`)
# hist(df$`Farm size (ha)`)
# hist(df$`l(Farm size (ha))`)
ind_look <- which(df$`l(Farm size (ha))` < 0)
df$`Farm size (ha)`[ind_look]
df$`Yield (ton/ha)`[ind_look]
ind_rm <- which(df$`Farm size (ha)` < 0.8)
df <- df[-ind_rm, ]
ind_look <- which(df$`l(Farm size (ha))` > 3)
df$`Farm size (ha)`[ind_look]
df$`Yield (ton/ha)`[ind_look]
colnames(df)
#--
df$`Yield (ton/ha)` <- df$`Yield (ton/rai) 1 ha = 6.25 rai` * 6.25
df$`l(Yield (ton/ha))` <- log(df$`Yield (ton/ha)`)
# hist(df$`Yield (ton/ha)`)
# hist(df$`l(Yield (ton/ha))`)
max(df$`Yield (ton/ha)`)
ind_look <- which(df$`Yield (ton/ha)` > 40)
df$`Farm size (ha)`[ind_look]
df$`Yield (ton/ha)`[ind_look]
ind_rm <- which(df$`Yield (ton/ha)` == 50)
df <- df[-ind_rm, ]
# hist(df$`Yield (ton/ha)`)
# hist(df$`l(Yield (ton/ha))`)
ind_look <- which(df$`Yield (ton/ha)` < 20)
df$`Farm size (ha)`[ind_look]
df$`Yield (ton/ha)`[ind_look]
mu_yStar_SUP <- mean(df$`Yield (ton/ha)`)
mu_yStar_SUP
m_yStar_SUP <- mean(df$`l(Yield (ton/ha))`)
#--
cStarPerYstar_atMuYstar <- 700 # Surmise
cStarPerYstar_atMuYstar / this_P * (1 + mu_lambda_SUP) + lambertW0(-beta_SUP / (cPerStar_SUP * yCeil_SUP))
#--
# this_P <- 2500
# x <- seq(beta_SUP / yCeil_SUP * exp(1), 1500, length.out = 20)
# f1 <- x / this_P * (1 + mu_lambda_SUP)
# f2 <- -lambertW0(-beta_SUP / (x * yCeil_SUP))
# df_plot <- data.frame(x, f1, f2)
# df_plot <- df_plot %>% gather(fun, value, f1:f2)
# gg <- ggplot(df_plot, aes(x, value, group = fun, color = fun))
# gg <- gg + geom_line()
# gg
#--
cStar_atMuYstar_SUP <- mu_yStar_SUP * cStarPerYstar_atMuYstar
yCeil_SUP <- 44 # Based on data
beta_SUP <- -cStar_atMuYstar_SUP * log(mu_yStar_SUP / yCeil_SUP)
beta_SUP
#m_yStarNormd_SUP <- mean(log(df$`Yield (ton/ha)` / yCeil_SUP))
#--
P_SQ_SUP <- 2100
#--
# Check to see if this beta_SUP produces realistic farm costs per ha.
df$`Cost (deduced)` <- -beta_SUP / log(df$`Yield (ton/ha)` / yCeil_SUP)
hist(df$`Cost (deduced)`)
df$`Cost / ha. (deduced)` <- df$`Cost (deduced)` / df$`Farm size (ha)`
hist(df$`Cost / ha. (deduced)`)
df$`Cost / MT output (deduced)` <- df$`Cost (deduced)` / df$`Yield (ton/ha)`
hist(df$`Cost / MT output (deduced)`)
ind_look <- which(df$`Cost / MT output (deduced)` > 1000)
df$`Farm size (ha)`[ind_look]
df$`Yield (ton/ha)`[ind_look]
#--
df$`shadow price` <- P_SQ_SUP * beta_SUP * df$`Yield (ton/ha)` / df$`Cost (deduced)`^2 - 1
df$`shadow price check` <- -P_SQ_SUP * df$`Yield (ton/ha)` / df$`Cost (deduced)` *
  log(df$`Yield (ton/ha)` / yCeil_SUP) - 1
#df$`shadow price` - df$`shadow price check`
# hist(df$`shadow price`)
# plot(df$`shadow price`, df$`Yield (ton/ha)`)
# hist(df$`Cost / ha. (deduced)`)
mu_lambda_SUP <- mean(df$`shadow price`)
sigma_lambda_SUP <- sd(df$`shadow price`)
cv_lambda_SUP <- sigma_lambda_SUP / mu_lambda_SUP
cv_lambda_SUP
# mu_cStar_SUP <- mean(df$`Cost (deduced)`)
#--
# check
df$`Yield (ton/ha)` - yCeil_SUP * exp(-df$`Cost / MT output (deduced)` / P_SQ_SUP * (1 + df$`shadow price`))
#=================================
#=================================
#=================================
# this_P <- 2100
# cPerStar_SUP <- 691.1
# cPerStar_SUP / this_P * (1 + mu_lambda_SUP) + lambertW0(-beta_SUP / (cPerStar_SUP * yCeil_SUP))
# rootfn_cstar(cPerStar_SUP, P_SUP = this_P, yCeil_SUP = yCeil_SUP, beta_SUP = beta_SUP, lambda_SUP = mu_lambda_SUP)
P_min <- exp(1) * beta_SUP / yCeil_SUP * (1 + mu_lambda_SUP)
P_min
cPerStar_min <- exp(1) * beta_SUP / yCeil_SUP
cPerStar_min
this_P <- 1250
interval_cstar <- c(cPerStar_min, 6.7 * 10^2)
cPerStar_atMuLamb_SUP <- uniroot.all(rootfn_cstar,
                                     interval_cstar,
                                     lower = min(interval_cstar),
                                     upper = max(interval_cstar),
                                     P_SUP = this_P,
                                     yCeil_SUP = yCeil_SUP,
                                     beta_SUP = beta_SUP,
                                     lambda_SUP = mu_lambda_SUP)
cPerStar_atMuLamb_SUP
cPerStar_atMuLamb_SUP / this_P
Q_S <- function(P_SUP, N_SUP, yCeil_SUP, beta_SUP,
                mu_lambda_SUP, cv_lyStar_SUP){
  #--
  cPerStar_fixed_loBound <- exp(1) * beta_SUP / yCeil_SUP
  P_min_SUP <- cPerStar_fixed_loBound * (1 + mu_lambda_SUP)
  P_SUP_vec <- seq(P_min_SUP + 1, max(P_SUP), length.out = 50)
  QS_vec <- c()
  mktParticip_vec <- c()
  muCstar_vec <- c()
  muYstar_vec <- c()
  for(i in 1:length(P_SUP_vec)){
    this_P <- P_SUP_vec[i]
    #this_P <- 1200
    interval_cstar <- c(cPerStar_fixed_loBound, )
    cPerStar_atMuLamb_SUP <- uniroot.all(rootfn_cstar,
                                      interval_cstar,
                                      lower = min(interval_cstar),
                                      upper = max(interval_cstar),
                                      P_SUP = this_P,
                                      yCeil_SUP = yCeil_SUP,
                                      beta_SUP = beta_SUP,
                                      lambda_SUP = mu_lambda_SUP)
    #cPerStar_atMuLamb_SUP
    # yStar_atMuLamb_SUP <- yCeil_SUP * exp(lambertW0(-cPerStar_atMuLamb_SUP / (this_P * yCeil_SUP) * (1 + mu_lambda_SUP)))
    # yStar_atMuLamb_SUP <- yCeil_SUP * exp(-beta_SUP / cPerStar_atMuLamb_SUP)
    yStar_atMuLamb_SUP <- yCeil_SUP * exp(-cPerStar_atMuLamb_SUP / this_P * (1 + mu_lambda_SUP))
    #cStarPerOutput_atMuLamb_SUP <- cPerStar_atMuLamb_SUP / yStar_atMuLamb_SUP
    m_yStarNormd_SUP <- -cPerStar_atMuLamb_SUP / this_P * (1 + mu_lambda_SUP)
    s_yStar_SUP <- -cv_lyStar_SUP * m_yStarNormd_SUP
    #--
    theta_upper <- (-m_yStarNormd_SUP) / s_yStar_SUP - s_yStar_SUP
    theta_lower <- (- 1 - m_yStarNormd_SUP) / s_yStar_SUP - s_yStar_SUP
    N_upper <- pnorm(theta_upper)
    N_lower <- pnorm(theta_lower)
    mkt_particip_SUP <- N_upper - N_lower
    #mkt_particip_SUP
    #--
    m_yStar_SUP <- log(yCeil_SUP) + m_yStarNormd_SUP
    mu_yStar_SUP <- exp(m_yStar_SUP + s_yStar_SUP^2 / 2)
    #--
    Q_S <- N_SUP * mu_yStar_SUP * mkt_particip_SUP
    #Q_S
    QS_vec[i] <- ifelse(length(Q_S) == 0, NA, Q_S)
    mktParticip_vec[i] <- ifelse(length(mkt_particip_SUP) == 0, NA, mkt_particip_SUP)
    muCstar_vec[i] <- ifelse(length(cPerStar_atMuLamb_SUP) == 0, NA, cPerStar_atMuLamb_SUP)
    muYstar_vec[i] <- ifelse(length(mu_yStar_SUP) == 0, NA, mu_yStar_SUP)
  }
  df_QS <- data.frame(Quantity = QS_vec, Participation = mktParticip_vec,
                      mu_cStar_SUP = muCstar_vec, mu_yStar_SUP = muYstar_vec, Price = P_SUP_vec)
  #--
  P_interval <- P_SUP_vec[2] - P_SUP_vec[1]
  P_NApad <- seq(0, P_min_SUP, P_interval)
  df_NApad <- as.data.frame(matrix(NA, nrow = length(P_NApad), ncol = ncol(df_QS)))
  colnames(df_NApad) <- colnames(df_QS)
  df_NApad$Price <- P_NApad
  df_QS <- rbind(df_NApad, df_QS)
  #--
  theta_upper_min <- 1 / cv_lyStar_SUP - cv_lyStar_SUP
  theta_lower_min <- -cv_lyStar_SUP
  N_upper_min <- pnorm(theta_upper_min)
  N_lower_min <- pnorm(theta_lower_min)
  mkt_particip_min_SUP <- N_upper_min - N_lower_min
  #--
  m_yStarNormd_min_SUP <- -1
  s_yStar_min_SUP <- cv_lyStar_SUP * m_yStarNormd_min_SUP
  m_yStar_min_SUP <- log(yCeil_SUP) + m_yStarNormd_min_SUP
  mu_yStar_min_SUP <- exp(m_yStar_min_SUP + s_yStar_min_SUP^2 / 2)
  QS_min <- N_SUP * mu_yStar_min_SUP * mkt_particip_min_SUP
  #--
  theta_upper_max <- 1 / cv_lyStar_SUP
  theta_lower_max <- -Inf
  N_upper_max <- pnorm(theta_upper_max)
  N_lower_max <- pnorm(theta_lower_max)
  mkt_particip_ceil_SUP <- N_upper_max - N_lower_max
  #--
  m_yStarNormd_max_SUP <- 0
  s_yStar_max_SUP <- cv_lyStar_SUP * m_yStarNormd_max_SUP
  m_yStar_max_SUP <- log(yCeil_SUP) + m_yStarNormd_max_SUP
  mu_yStar_max_SUP <- exp(m_yStar_max_SUP + s_yStar_max_SUP^2 / 2)
  QS_ceil <- N_SUP * mu_yStar_max_SUP * mkt_particip_ceil_SUP
  #--
  df_QS_bounds <- data.frame(Type = "Quantity", Min = QS_min,
                             Ceiling = QS_ceil,
                             min_price = P_min_SUP)
  df_Particp_bounds <- data.frame(Type = "Participation", Min = mkt_particip_min_SUP,
                                  Ceiling = mkt_particip_ceil_SUP,
                                  min_price = P_min_SUP)
  df_bounds <- rbind(df_QS_bounds, df_Particp_bounds)
  colnames(df_bounds)[ncol(df_bounds)] <- "Min. Price"
  #--
  return(list(df_QS, df_bounds))
  #--
}











#--
sd(df$`l(Yield (ton/ha))`) / mean(df$`l(Yield (ton/ha))`)
cv_lyStar_SUP <- 0.2
#--
N_SUP <- 60
P_SUP <- seq(100, 3000, 100)

list_QS <- Q_S(P_SUP, N_SUP, yCeil_SUP, beta_SUP,
               mu_lambda_SUP, cv_lyStar_SUP)
df_QS <- list_QS[[1]]
df_bounds <- list_QS[[2]]

df_plot <- df_QS[, c("Price", "Quantity", "Participation")]
df_plot <- df_plot %>% gather(Type, Value, Quantity:Participation)
gg <- ggplot()
gg <- gg + geom_line(data = df_plot, aes(x = Price, y = Value), lwd = 1.5)
gg <- gg + geom_hline(data = df_bounds, aes(yintercept = Min), linetype = "dashed", lwd = 1.5)
gg <- gg + geom_hline(data = df_bounds, aes(yintercept = Ceiling), linetype = "dashed", lwd = 1.5)
gg <- gg + geom_vline(data = df_bounds, aes(xintercept = `Min. Price`), linetype = "dashed", lwd = 1.5)
gg <- gg + facet_wrap(~ Type, ncol = 1, scales = "free")
gg <- gg + expand_limits(y = 0)
gg <- gg + theme(axis.title.y = element_blank())
gg

# df_plot <- df_QS[, c("Price", "mu_cStar_SUP", "mu_yStar_SUP")]
# df_plot <- df_plot %>% gather(Type, Value, mu_cStar_SUP:mu_yStar_SUP)
# gg <- ggplot()
# gg <- gg + geom_line(data = df_plot, aes(x = Price, y = Value), lwd = 1.5)
# #gg <- gg + geom_line(data = df_plot, aes(x = mu_cStar_SUP, y = mu_yStar_SUP), lwd = 1.5)
# # gg <- gg + geom_hline(data = df_bounds, aes(yintercept = Min), linetype = "dashed", lwd = 1.5)
# # gg <- gg + geom_hline(data = df_bounds, aes(yintercept = Ceiling), linetype = "dashed", lwd = 1.5)
# # gg <- gg + geom_vline(data = df_bounds, aes(xintercept = `Min. Price`), linetype = "dashed", lwd = 1.5)
# gg <- gg + facet_wrap(~ Type, ncol = 1, scales = "free")
# gg <- gg + expand_limits(y = 0)
# gg <- gg + theme(axis.title.y = element_blank())
# gg
















# Supply side
#in_P <- P_rev_per_output_SUP[!(P_rev_per_output_SUP > 2000)]
P_sq <- 2200
yCeil_SUP <- 45
lambda_SUP <- 0
rCeil_sq_SUP <- yCeil_SUP * P_sq
cStar_sq <- 0.35 * rCeil_sq_SUP # max is exp(-1) * rCeil_sq_SUP
cStar_sq
# Deduce mu_beta based on observed status quo expenditure cStar_sq
mu_beta_SUP <- -cStar_sq * lambertW0(-cStar_sq / rCeil_sq_SUP * (1 + lambda_SUP))
mu_beta_SUP
m_yStar_norm <- -mu_beta_SUP / cStar_sq
m_yStar_norm
yCeil_SUP * exp(m_yStar_norm)
m_yStar <- m_yStar_norm + log(yCeil_SUP)
m_yStar
cv_lyStar <- 0.07
s2_yStar <- m_yStar^2 * cv_lyStar^2
mu_yStar <- exp(m_yStar + s2_yStar / 2)
mu_yStar
#---------------------------------

N <- 80
P_new <- P_sq
rCeil_SUP <- yCeil_SUP * P_new
interval_cstar <- c(0, exp(-1) * rCeil_SUP / (1 + lambda_SUP))
cStar <- uniroot.all(rootfn_cstar, interval_cstar, lower = min(interval_cstar), upper = max(interval_cstar),
                     beta_SUP = mu_beta_SUP, rCeil = rCeil_SUP, lambda_SUP = lambda_SUP)
cStar
m_yStar_norm <- -mu_beta_SUP / cStar
m_yStar_norm
m_yStar <- m_yStar_norm + log(yCeil_SUP)
m_yStar
exp(m_yStar)
s_yStar <- m_yStar * cv_lyStar
mu_yStar <- exp(m_yStar + s_yStar^2 / 2)
mu_yStar

theta_upper <- (-m_yStar_norm) / s_yStar - s_yStar
theta_lower <- (- 1 - m_yStar_norm) / s_yStar - s_yStar
N_upper <- pnorm(theta_upper)
N_lower <- pnorm(theta_lower)
mkt_particip <- N_upper - N_lower
mkt_particip

Q_S <- N * mu_yStar * mkt_particip

z <- seq(-3, 3, 0.001)
df_z <- data.frame(z = z, f = dnorm(z))
df_z <- df_z %>% mutate(area = ifelse(z > theta_lower & z < theta_upper,
                                      "Participating", "Not Participating"))
gg <- ggplot(data = df_z, aes(x = z, ymin = 0, ymax = f))
gg <- gg + geom_ribbon(aes(fill = factor("Not participating")))
gg <- gg + geom_ribbon(data = df_z[df_z$area == "Participating", ], aes(fill = area))
gg <- gg + scale_fill_manual(values=c("lightcyan2", "turquoise"), name="fill")
gg <- gg + theme_bw()
gg <- gg + theme(legend.title = element_blank())
gg <- gg + theme(axis.text.y = element_blank())
gg <- gg + theme(axis.ticks.y = element_blank())
gg <- gg + theme(axis.title.x = element_blank())
gg


QS <- function(P, N_area, yCeil_SUP, cv_lyStar, mu_beta_SUP, lambda_SUP_SUP){
  QS_vec <- c()
  mktParticip_vec <- c()
  for(i in 1:length(P)){
    rCeil_SUP <- yCeil_SUP * P[i]
    #print(rCeil_SUP)
    interval_cstar <- c(0, exp(-1) * rCeil_SUP / (1 + lambda_SUP))
    cStar_atMu <- uniroot.all(rootfn_cstar, interval_cstar, lower = min(interval_cstar), upper = max(interval_cstar),
                              beta = mu_beta_SUP, rCeil = rCeil_SUP, lambda = lambda_SUP)
    m_yStar_norm <- -mu_beta / cStar_atMu
    #m_yStar_norm
    m_yStar <- m_yStar_norm + log(yCeil_SUP)
    s_yStar <- m_yStar * cv_lyStar
    mu_yStar <- exp(m_yStar + s_yStar^2 / 2)
    theta_upper <- (-m_yStar_norm) / s_yStar - s_yStar
    theta_lower <- (- 1 - m_yStar_norm) / s_yStar - s_yStar
    N_upper <- pnorm(theta_upper)
    N_lower <- pnorm(theta_lower)
    mkt_particip <- N_upper - N_lower
    QS_vec[i] <- N_area * mu_yStar * mkt_particip
    mktParticip_vec[i] <- mkt_particip
  }
  df_out <- data.frame(P, QS = QS_vec, mkt_particip = mktParticip_vec)
}


P <- seq(10, 8000, 10)
N_area <- 80
yCeil_SUP <- 45
lambda <- 0
rCeil_sq_SUP <- yCeil_SUP * P_sq
cStar_sq <- 0.33 * rCeil_sq_SUP # max is exp(-1) * rCeil_sq_SUP
#cStar_sq
mu_beta <- -cStar_sq * lambertW0(-cStar_sq / rCeil_sq_SUP * (1 + lambda))
#mu_beta
cv_lyStar <- 0.07
df_QS <- QS(P, N_area, yCeil_SUP, cv_lyStar, mu_beta_SUP, lambda_SUP)


df_plot <- df_QS
gg <- ggplot(df_plot, aes(x = P, y = mkt_particip))
gg <- gg + geom_line(lwd = 1.7)
gg
gg <- ggplot(df_plot, aes(x = P, y = QS))
gg <- gg + geom_line(lwd = 1.7)
gg










# Demand
#function(P_SUP, P_DEM, y_DEM, alpha_DEM, lambda){
#y_demanded <- sqrt((y_DEM * P_DEM) / (1 + lambda) * alpha_DEM / P_SUP)

P_sq_DEM <- 24000
yCeil_DEM <- 300
lambda_DEM <- 0
rCeil_sq_DEM <- yCeil_DEM * P_sq_DEM
cStar_sq_DEM <- 0.35 * rCeil_sq_DEM # max is exp(-1) * rCeil_sq_DEM
cStar_sq_DEM
beta_DEM <- -cStar_sq_DEM * lambertW0(-cStar_sq_DEM / rCeil_sq_DEM * (1 + lambda_DEM))
yStar_sq_DEM <- yCeil_DEM * exp(-beta_DEM / cStar_sq_DEM)
yStar_sq_DEM
P <- 2500
# alpha_x <- 150
# xStar_sq_DEM <- sqrt(P_sq_DEM * yStar_sq_DEM / (1 + lambda_DEM) * alpha_x / P)
# xStar_sq_DEM / yStar_sq_DEM
roots_per_kL <- 5.5
xStar_sq_DEM <- roots_per_kL * yStar_sq_DEM
xStar_sq_DEM
(xStar_sq_DEM * P) / cStar_sq_DEM
alpha_x_derived <- xStar_sq_DEM^2 * P * (1 + lambda_DEM) / (P_sq_DEM * yStar_sq_DEM)
(alpha_x_derived * P) / beta_DEM
alpha_x_derived

aw_x <- P * alpha_x_derived
aw_other <- beta_DEM - aw_x
aw_other


interval_cstar <- c(0, exp(-1) * rCeil_sq_DEM / (1 + lambda_DEM))
#P_new <- P * 0.9
xStarvec_DEM <- c()
yStarvec_DEM <- c()
cStarvec_DEM <- c()
cxSharevec_DEM <- c()
awSharevec_DEM <- c()
effvec_DEM <- c()
NRvec_DEM <- c()
P <- seq(10, 3000, 10)
for(i in 1:length(P)){
  this_P <- P[i]
  beta_DEM <- alpha_x_derived * this_P + aw_x
  cStar_DEM <- uniroot.all(rootfn_cstar, interval_cstar, lower = min(interval_cstar), upper = max(interval_cstar),
                           beta = beta_DEM, rCeil = rCeil_sq_DEM, lambda = lambda_DEM)
  cStar_DEM
  yStar_DEM <- yCeil_DEM * exp(-beta_DEM / cStar_DEM)
  yStar_DEM
  xStar_DEM <- sqrt(P_sq_DEM * yStar_DEM / (1 + lambda_DEM) * alpha_x_derived / this_P)
  efficiency <- xStar_DEM / yStar_DEM
  cxShare_DEM <- (xStar_DEM * this_P) / cStar_DEM
  awShare_DEM <- (alpha_x_derived * this_P) / beta_DEM
  NR_DEM <- P_sq_DEM * yStar_DEM - cStar_DEM
  
  xStarvec_DEM[i] <- xStar_DEM
  yStarvec_DEM[i] <- yStar_DEM
  cStarvec_DEM[i] <- cStar_DEM
  cxSharevec_DEM[i] <- cxShare_DEM
  awSharevec_DEM[i] <- awShare_DEM
  effvec_DEM[i] <- efficiency
  NRvec_DEM[i] <- NR_DEM
}

df <- data.frame(P, xStar_DEM = xStarvec_DEM, yStar_DEM = yStarvec_DEM,
                 cStar_DEM = cStarvec_DEM, cxShare_DEM = cxSharevec_DEM,
                 awShare_DEM = awSharevec_DEM,
                 efficiency_DEM = effvec_DEM, NR_DEM = NRvec_DEM)
df$cTilda <- df$cStar_DEM / df$yStar_DEM
gg <- ggplot(df, aes(x = P, y = xStar_DEM))
gg <- gg + geom_line(lwd = 1.7)
gg <- gg + coord_cartesian(xlim = c(0, 3000), ylim = c(0, 2000))
gg

gg <- ggplot(df, aes(x = P, y = yStar_DEM))
gg <- gg + geom_line(lwd = 1.7)
gg

gg <- ggplot(df, aes(x = P, y = cStar_DEM))
gg <- gg + geom_line(lwd = 1.7)
gg

gg <- ggplot(df, aes(x = P, y = cTilda))
gg <- gg + geom_line(lwd = 1.7)
gg

gg <- ggplot(df, aes(x = P, y = cxShare_DEM))
gg <- gg + geom_line(lwd = 1.7)
gg

gg <- ggplot(df, aes(x = P, y = awShare_DEM))
gg <- gg + geom_line(lwd = 1.7)
gg

gg <- ggplot(df, aes(x = P, y = NR_DEM))
gg <- gg + geom_line(lwd = 1.7)
gg

gg <- ggplot(df, aes(x = P, y = efficiency_DEM))
gg <- gg + geom_line(lwd = 1.7)
gg <- gg + coord_cartesian(xlim = c(0, 3000), ylim = c(0, 20))
gg



#--------------------
# Aggregate demand

P_sq_DEM <- 24000
yCeil_DEM <- 300
lambda_DEM <- 0
rCeil_sq_DEM <- yCeil_DEM * P_sq_DEM
mu_c_DEM <- 0.35 * rCeil_sq_DEM # max is exp(-1) * rCeil_sq_DEM
mu_c_DEM
beta_DEM <- -mu_c_DEM * lambertW0(-mu_c_DEM / rCeil_sq_DEM * (1 + lambda_DEM))
mu_yStar_sq_DEM <- yCeil_DEM * exp(-beta_DEM / mu_c_DEM)
mu_yStar_sq_DEM
log(mu_yStar_sq_DEM / yCeil_DEM)
roots_per_kL_sq <- 5.5
mu_xStar_sq_DEM <- roots_per_kL_sq * mu_yStar_sq_DEM
mu_xStar_sq_DEM

P <- 2500
(mu_xStar_sq_DEM * P) / mu_c_DEM
mu_alpha_x_derived <- mu_xStar_sq_DEM^2 * P * (1 + lambda_DEM) / (P_sq_DEM * yStar_sq_DEM)
(alpha_x_derived * P) / beta_DEM
alpha_x_derived

P_DEM <- P_sq_DEM
x_min <- sqrt(P_DEM * yCeil_DEM * exp(-1) / (1 + lambda_DEM) * alpha_x_derived / P)
x_min
x_max <- sqrt(P_DEM * yCeil_DEM / (1 + lambda_DEM) * alpha_x_derived / P)
x_max



P_sq_DEM <- 24000
yCeil_DEM <- 300
lambda_DEM <- 0
cStar_sq_DEM
beta_DEM <- -cStar_sq_DEM * lambertW0(-cStar_sq_DEM / rCeil_sq_DEM * (1 + lambda_DEM))
yStar_sq_DEM <- yCeil_DEM * exp(-beta_DEM / cStar_sq_DEM)

P_sq_SUP <- 2500
cv_ly <- 0.03
# m_y <- log(150)
# s_y <- cv_ly * m_y
# mode_yStar_sq_DEM <- exp(m_y - s_y)
# mode_yStar_sq_DEM
# mu_yStar_sq_DEM <- exp(m_y + s_y^2 / 2)
# mu_yStar_sq_DEM
mode_cStar_sq_DEM <- 14000 * 160 #surmise cost/(kL/day) * kL/day output
mode_cStar_sq_DEM
yCeil_DEM <- mode_cStar_sq_DEM / P_sq_DEM * exp(1.05) #min is exp(1)
yCeil_DEM
rCeil_sq_DEM <- P_sq_DEM * yCeil_DEM
#mode_beta_sq_DEM <- -mode_cStar_sq_DEM * log(mode_yStar_sq_DEM / yCeil_DEM)
mode_beta_sq_DEM <- -mode_cStar_sq_DEM * lambertW0(-mode_cStar_sq_DEM / rCeil_sq_DEM * (1 + lambda_DEM))
mode_beta_sq_DEM
mode_yStar_sq_DEM <- yCeil_DEM * exp(-mode_beta_sq_DEM / mode_cStar_sq_DEM)
mode_yStar_sq_DEM
a <- -cv_ly^2
b <- 1
c <- -log(mode_yStar_sq_DEM)
m_yStar_sq_DEM <- (-b + sqrt(b^2 - 4 * a * c)) / (2 * a)
s_yStar_sq_DEM <- cv_ly * m_yStar_sq_DEM
mu_yStar_sq_DEM <- exp(m_yStar_sq_DEM + s_yStar_sq_DEM^2 / 2)
#yCeil_DEM <- 170
#rCeil_sq_DEM <- yCeil_DEM * P_sq_DEM
#(mode_cStar_sq_DEM <- exp(-1.05) * rCeil_sq_DEM # max is exp(-1) * rCeil_sq_DEM)

roots_per_kL_sq <- 5.5
mu_xStar_sq_DEM <- roots_per_kL_sq * mu_yStar_sq_DEM
mu_xStar_sq_DEM
(mu_xStar_sq_DEM * P_sq_SUP) / mode_cStar_sq_DEM
mu_alpha_x <- mu_xStar_sq_DEM^2 * P_sq_SUP * (1 + lambda_DEM) / (P_sq_DEM * mu_yStar_sq_DEM)
mu_aw_x <- P_sq_SUP * mu_alpha_x
mu_aw_x / mode_beta_sq_DEM
mu_aw_other <- mode_beta_sq_DEM - mu_aw_x
mu_aw_other

cv_lyStar_DEM <- cv_ly
cv_xStar <- cv_lyStar_DEM
P_DEM <- P_sq_DEM
N <- 11

this_P <- 2500
#this_P <- P[i]
mu_beta_DEM <- alpha_x_derived * this_P + aw_x
cStar_atMu <- uniroot.all(rootfn_cstar, interval_cstar, lower = min(interval_cstar), upper = max(interval_cstar),
                          beta = beta_DEM, rCeil = rCeil_sq_DEM, lambda = lambda_DEM)
m_yStar_norm_DEM <- -mu_beta_DEM / cStar_atMu
m_yStar_DEM <- m_yStar_norm_DEM + log(yCeil_DEM)
s_yStar_DEM <- cv_lyStar_DEM * m_yStar_DEM
mu_yStar_DEM <- exp(m_yStar_DEM + s_yStar_DEM^2 / 2)
#m_xStar <- 1 / 2 * ((log(P_sq_DEM) - mu_beta_DEM / cStar_atMu) / (1 + lambda_DEM) + log(alpha_x_derived) - log(this_P))
mu_xStar <- sqrt(P_DEM * mu_yStar_DEM / (1 + lambda_DEM) * alpha_x_derived / this_P)
sig_xStar <- cv_xStar * mu_xStar
x_max <- sqrt(P_DEM * yCeil_DEM / (1 + lambda_DEM) * alpha_x_derived / this_P)
x_min <- exp(-1 / 2) * x_max

theta_upper <- (x_max - mu_xStar) / sig_xStar
theta_lower <- (x_min - mu_xStar) / sig_xStar
mkt_particip <- pnorm(theta_upper) - pnorm(theta_lower)
mkt_particip
Q_D <- N * (mu_xStar + sig_xStar * (dnorm(theta_lower) - dnorm(theta_upper)) / mkt_particip)
Q_D



z <- seq(-3, 3, 0.001)
df_z <- data.frame(z = z, f = dnorm(z))
df_z <- df_z %>% mutate(area = ifelse(z > theta_lower & z < theta_upper,
                                      "Participating", "Not Participating"))
gg <- ggplot(data = df_z, aes(x = z, ymin = 0, ymax = f))
gg <- gg + geom_ribbon(aes(fill = factor("Not participating")))
gg <- gg + geom_ribbon(data = df_z[df_z$area == "Participating", ], aes(fill = area))
gg <- gg + scale_fill_manual(values=c("lightcyan2", "turquoise"), name="fill")
gg <- gg + theme_bw()
gg <- gg + theme(legend.title = element_blank())
gg <- gg + theme(axis.text.y = element_blank())
gg <- gg + theme(axis.ticks.y = element_blank())
gg <- gg + theme(axis.title.x = element_blank())
gg


#---------
P <- seq(100, 3000, 10)


QD <- function(P, beta_DEM, rCeil_sq_DEM, lambda_DEM, alpha_x_derived,
               aw_x, cv_lyStar_DEM, m_yStar_DEM, yCeil_DEM, P_DEM){
  
}
Q_D <- c()


for(i in 1:length(P)){
  this_P <- P[i]
  mu_beta_DEM <- alpha_x_derived * this_P + aw_x
  cStar_atMu <- uniroot.all(rootfn_cstar, interval_cstar, lower = min(interval_cstar), upper = max(interval_cstar),
                            beta = beta_DEM, rCeil = rCeil_sq_DEM, lambda = lambda_DEM)
  m_yStar_norm_DEM <- -mu_beta_DEM / cStar_atMu
  m_yStar_DEM <- m_yStar_norm_DEM + log(yCeil_DEM)
  s_yStar_DEM <- cv_lyStar_DEM * m_yStar_DEM
  mu_yStar_DEM <- exp(m_yStar_DEM + s_yStar_DEM^2 / 2)
  #m_xStar <- 1 / 2 * ((log(P_sq_DEM) - mu_beta_DEM / cStar_atMu) / (1 + lambda_DEM) + log(alpha_x_derived) - log(this_P))
  mu_xStar <- sqrt(P_DEM * mu_yStar_DEM / (1 + lambda_DEM) * alpha_x_derived / this_P)
  sig_xStar <- cv_xStar * mu_xStar
  x_max <- sqrt(P_DEM * yCeil_DEM / (1 + lambda_DEM) * alpha_x_derived / this_P)
  x_min <- exp(-1 / 2) * x_max
  
  theta_upper <- (x_max - mu_xStar) / sig_xStar
  theta_lower <- (x_min - mu_xStar) / sig_xStar
  mkt_particip <- pnorm(theta_upper) - pnorm(theta_lower)
  mkt_particip
  Q_D[i] <- N * (mu_xStar + sig_xStar * (dnorm(theta_lower) - dnorm(theta_upper)) / mkt_particip)
  
}

df_plot <- data.frame(P, QD = Q_D)
gg <- ggplot(df_plot, aes(x = P, y = QD))
gg <- gg + geom_line(lwd = 1.7)
gg <- gg + theme_bw()
gg <- gg + coord_cartesian(ylim = c(0, 10000))
gg

























































yStar_DEM <- yCeil_DEM * exp(-mu_beta_DEM / cStar_atMu)
yStar_DEM
xStar_DEM <- sqrt(P_sq_DEM * yStar_DEM / (1 + lambda_DEM) * alpha_x_derived / this_P)
efficiency <- xStar_DEM / yStar_DEM
cxShare_DEM <- (xStar_DEM * this_P) / cStar_DEM
awShare_DEM <- (alpha_x_derived * this_P) / beta_DEM
NR_DEM <- P_sq_DEM * yStar_DEM - cStar_DEM


cv_c_DEM <- 0.15
sig_c_DEM <- mu_c_DEM * cv_c_DEM
theta_upper <- 1 / 2 * sig_c_DEM / mu_c_DEM - beta_DEM / sig_c_DEM
theta_lower <- 1 / 2 * (-sig_c_DEM / beta_DEM + sig_c_DEM / mu_c_DEM) - beta_DEM / sig_c_DEM
N_hi <- pnorm(theta_upper)
N_lo <- pnorm(theta_lower)
mkt_particip <- N_hi - N_lo
mkt_particip









x_sq_DEM <- yStar_sq_DEM * 3
P <- 2000

cStar_sq_DEM / (x_sq_DEM * P)
#9000 / 13500

cost_feedstk_sq


alpha_DEM <- P * x_sq_DEM^2 * (1 + lambda_DEM) / (P_sq_DEM * yStar_sq_DEM)

NR_DEM <- P_sq_DEM * yStar_sq_DEM - cStar_sq_DEM
NR_DEM

cost_feedstk <- yStar_sq_DEM * 6 * P
cost_other <- cStar_sq_DEM - cost_feedstk
aw_other <- cost_other^2 * (1 + lambda_DEM) / (P_sq_DEM * yStar_sq_DEM)
aw_feedstk <- mu_beta_DEM - aw_other
alpha_DEM <- aw_feedstk / P
alpha_DEM





alpha_DEM <- 230
yStar_sq_DEM <- 140
cost_feedstk <- x_DEM * P
cStar_sq_DEM <- cost_feedstk * 1.15
NR_DEM <- P_sq_DEM * yStar_sq_DEM - cStar_sq_DEM
NR_DEM
cStar_sq_DEM / rCeil_sq_DEM
mu_beta_DEM <- -cStar_sq_DEM * lambertW0(-cStar_sq_DEM / rCeil_sq_DEM * (1 + lambda_DEM))
mu_beta_DEM
yStar_sq_DEM - yCeil_DEM * exp(-mu_beta_DEM / cStar_sq_DEM)



log(yStar_sq_DEM / yCeil_DEM) + mu_beta_DEM / cStar_sq_DEM = 0

cv_lyStar_DEM <- 0.05

yStar_sq_DEM * 6
interval_cstar <- c(0, exp(-1) * rCeil_sq_DEM / (1 + lambda_DEM))
cStar_atMu_DEM <- uniroot.all(rootfn_cstar, interval_cstar, lower = min(interval_cstar), upper = max(interval_cstar),
                              beta = mu_beta_DEM, rCeil = rCeil_sq_DEM, lambda = lambda_DEM)
m_yStar_norm_DEM <- -mu_beta_DEM / cStar_atMu_DEM
m_yStar_DEM <- m_yStar_norm_DEM + log(yCeil_DEM)
s_yStar_DEM <- cv_lyStar_DEM * m_yStar_DEM
mu_yStar_DEM <- exp(m_yStar_DEM + s_yStar_DEM^2 / 2)
mu_yStar_DEM

mu_alphaDEM <- xStar_DEM^2 * (1 + lambda) / (mu_yStar_DEM * P_sq_DEM)
cv_xStar_DEM <- 0.1




m_rDEM <- P_DEM * yStar_DEM
m_xStar_DEM <- 1 / 2 * log((m_rDEM * mu_alphaDEM) / ((1 + lambda) * P))
s_xStar_DEM <- cv_yStar_DEM * m_yStar_DEM
mu_xStar_DEM <- exp(m_yStar_DEM + s_yStar_DEM^2 / 2)
#mu_yStar_DEM
theta_upper <- 
  
  
  
  
  
  
  
  
  
  
  















# C_tilda_statQuo <- mu_P_fdstkCost_per_output_SUP_statQuo
# C_tilda_statQuo <- 800
# C_star_statQuo <- C_tilda_statQuo * y_star_statQuo
beta <- -cStar_sq * lambertW0(-cStar_sq / rCeil_SUP * (1 + lambda))
beta
y_star_statQuo <- yCeil_SUP * exp(-beta / cStar_sq)
y_star_statQuo
yCeil_SUP * exp(lambertW0(-cStar_sq / rCeil_SUP * (1 + lambda)))

-beta / cStar_sq - lambertW0(-cStar_sq / rCeil_SUP * (1 + lambda))

-cStar_sq * lambertW0(-cStar_sq / rCeil_SUP * (1 + lambda))
beta

c_star_tilda <- -1 / y_star_statQuo *  beta / log(y_star_statQuo / yCeil_SUP)
c_star_tilda


supply_farmLevel <- function(P, beta, yCeil_SUP, lambda){
  c_star <- c()
  y_star <- c()
  last_i <- length(P)
  for(i in 1:last_i){
    rCeil_SUP <- yCeil_SUP * P[i]
    interval_cstar <- c(0, exp(-1) * rCeil_SUP / (1 + lambda))
    this_c_star <- uniroot.all(rootfn_cstar, interval_cstar, lower = min(interval_cstar), upper = max(interval_cstar),
                               beta = beta, rCeil_SUP = rCeil_SUP, lambda = lambda)
    this_y_star <- yCeil_SUP * exp(-beta / this_c_star)
    c_star[i] <- this_c_star
    y_star[i] <- this_y_star
  }
  df_out <- data.frame(P, y_star, c_star)
  return(df_out)
}


yStar_lobound <- yCeil_SUP * exp(-1)
yStar_upbound <- yCeil_SUP
P_lobound <- beta / yCeil_SUP * (1 + lambda) * exp(1)
in_P <- seq(1, 3000, 10)
df_out <- supply_farmLevel(in_P, beta, yCeil_SUP, lambda)
gg <- ggplot(df_out, aes(x = P, y = y_star))
gg <- gg + geom_line(lwd = 1.7)
gg <- gg + geom_hline(yintercept = yStar_lobound, lwd = 1.7, linetype = "dashed")
gg <- gg + geom_hline(yintercept = yStar_upbound, lwd = 1.7, linetype = "dashed")
gg <- gg + geom_vline(xintercept = P_lobound, lwd = 1.7, linetype = "dashed")
gg

cStar_lobound <- beta
gg <- ggplot(df_out, aes(x = P, y = c_star))
gg <- gg + geom_line(lwd = 1.7)
gg <- gg + geom_hline(yintercept = cStar_lobound, lwd = 1.7, linetype = "dashed")
gg <- gg + geom_vline(xintercept = P_lobound, lwd = 1.7, linetype = "dashed")
gg


df_out$c_star_tilda <- df_out$c_star / df_out$y_star
cStar_tilda_lobound <- cStar_lobound / yStar_lobound
gg <- ggplot(df_out, aes(x = P, y = c_star_tilda))
gg <- gg + geom_line(lwd = 1.7)
gg <- gg + geom_hline(yintercept = cStar_tilda_lobound, lwd = 1.7, linetype = "dashed")
gg <- gg + geom_vline(xintercept = P_lobound, lwd = 1.7, linetype = "dashed")
gg


df_out$drdc <- df_out$P / df_out$c_star_tilda
gg <- ggplot(df_out, aes(x = P, y = drdc))
gg <- gg + geom_line(lwd = 1.7)
#gg <- gg + geom_hline(yintercept = cStar_tilda_lobound, lwd = 1.7, linetype = "dashed")
gg <- gg + geom_vline(xintercept = P_lobound, lwd = 1.7, linetype = "dashed")
gg


gg <- ggplot(df_out, aes(x = c_star, y = drdc))
gg <- gg + geom_line(lwd = 1.7)
gg




df_out$NR <- df_out$y_star * df_out$P - df_out$c_star
gg <- ggplot(df_out, aes(x = P, y = NR))
gg <- gg + geom_line(lwd = 1.7)
#gg <- gg + geom_hline(yintercept = cStar_tilda_lobound, lwd = 1.7, linetype = "dashed")
gg <- gg + geom_vline(xintercept = P_lobound, lwd = 1.7, linetype = "dashed")
gg


#===============================
# Demand - firm level
demand_firmLevel <- function(P_SUP, P_DEM, y_DEM, alpha_DEM, lambda){
  y_demanded <- sqrt((y_DEM * P_DEM) / (1 + lambda) * alpha_DEM / P_SUP)
  return(y_demanded)
}
P_DEM <- 23400
y_DEM <- 130
# rCeil_DEM <- yCeil_DEM * P_DEM  #* P_eq_00
alpha_DEM <- P_SUP * 0.3
yStar_DEM <- sqrt((y_DEM * P_DEM) / (1 + lambda) * alpha_DEM / P_SUP)

in_P_SUP <- seq(0, 3000, 10)
yStar_DEM <- demand_firmLevel(in_P_SUP, P_DEM, y_DEM, alpha_DEM, lambda)

df_plot <- data.frame(P = in_P_SUP, yStar_DEM)
gg <- ggplot(df_plot, aes(x = P, y = yStar_DEM))
gg <- gg + geom_line(lwd = 1.7)
gg











#===============================
#===============================
#===============================
#===============================
#===============================
# Supply - population level

yStar_min_SUP <- yCeil_SUP * exp(-1)
yStar_max_SUP <- yCeil_SUP

midval <- log(yStar_min_SUP / yCeil_SUP) + 1 / 2 * (log(yStar_max_SUP / yCeil_SUP) - log(yStar_min_SUP / yCeil_SUP))

beta

exp(-1) * rCeil_SUP / (1 + lambda)

mu_x <- 
  
  
  
  
  
